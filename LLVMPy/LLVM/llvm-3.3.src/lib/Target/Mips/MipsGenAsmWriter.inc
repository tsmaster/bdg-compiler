/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3071U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3064U,	// BUNDLE
    3081U,	// LIFETIME_START
    3051U,	// LIFETIME_END
    5366U,	// ABSQ_S_PH
    4578U,	// ABSQ_S_QB
    6849U,	// ABSQ_S_W
    17900388U,	// ADD
    33559603U,	// ADDQH_PH
    33559720U,	// ADDQH_R_PH
    33561181U,	// ADDQH_R_W
    33561125U,	// ADDQH_W
    33559677U,	// ADDQ_PH
    33559776U,	// ADDQ_S_PH
    33561261U,	// ADDQ_S_W
    33559170U,	// ADDSC
    33558878U,	// ADDUH_QB
    33558986U,	// ADDUH_R_QB
    33559875U,	// ADDU_PH
    33559091U,	// ADDU_QB
    33559820U,	// ADDU_S_PH
    33559032U,	// ADDU_S_QB
    33559177U,	// ADDWC
    17900388U,	// ADD_MM
    51455506U,	// ADDi
    51455506U,	// ADDi_MM
    51456368U,	// ADDiu
    51456368U,	// ADDiu_MM
    17901917U,	// ADDu
    17901917U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    17900410U,	// AND
    17900410U,	// AND64
    17900410U,	// AND_MM
    605103640U,	// ANDi
    605103640U,	// ANDi_MM
    33559432U,	// APPEND
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_P8
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_P8
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_P8
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_P8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_P8
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_P8
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_P8
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_P8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_P8
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_P8
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_P8
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_P8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_P8
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_P8
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_P8
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_P8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_P8
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_P8
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_P8
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_P8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_P8
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_P8
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_P8
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_P8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_P8
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_P8
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_P8
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_P8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_P8
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_P8
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_P8
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_P8
    6512U,	// AddiuRxImmX16
    137584U,	// AddiuRxPcImmX16
    85989744U,	// AddiuRxRxImm16
    2103664U,	// AddiuRxRxImmX16
    3152240U,	// AddiuRxRyOffMemX16
    203686U,	// AddiuSpImm16
    269222U,	// AddiuSpImmX16
    33560925U,	// AdduRxRyRz16
    2102138U,	// AndRxRxRy16
    266525U,	// B
    33560344U,	// BALIGN
    267866U,	// BAL_BR
    267182U,	// BC1F
    268588U,	// BC1T
    33560484U,	// BEQ
    33560484U,	// BEQ64
    6937U,	// BGEZ
    6937U,	// BGEZ64
    4531812U,	// BGEZAL
    6981U,	// BGTZ
    6981U,	// BGTZ64
    6552U,	// BITREV
    6943U,	// BLEZ
    6943U,	// BLEZ64
    6987U,	// BLTZ
    6987U,	// BLTZ64
    4531820U,	// BLTZAL
    33559444U,	// BNE
    33559444U,	// BNE64
    266363U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    100670264U,	// BeqzRxImm16
    6968U,	// BeqzRxImmX16
    266525U,	// BimmX16
    100670245U,	// BnezRxImm16
    6949U,	// BnezRxImmX16
    117446479U,	// BteqzT8CmpX16
    117446190U,	// BteqzT8CmpiX16
    117446962U,	// BteqzT8SltX16
    117446202U,	// BteqzT8SltiX16
    117447031U,	// BteqzT8SltiuX16
    117447038U,	// BteqzT8SltuX16
    269118U,	// BteqzX16
    134223695U,	// BtnezT8CmpX16
    134223406U,	// BtnezT8CmpiX16
    134224178U,	// BtnezT8SltX16
    134223418U,	// BtnezT8SltiX16
    134224247U,	// BtnezT8SltiuX16
    134224254U,	// BtnezT8SltuX16
    269099U,	// BtnezX16
    0U,	// BuildPairF64
    4807U,	// CEIL_L_D64
    6302U,	// CEIL_L_S
    4920U,	// CEIL_W_D32
    4920U,	// CEIL_W_D64
    6406U,	// CEIL_W_S
    5247011U,	// CFC1
    4269863U,	// CLO
    4270899U,	// CLZ
    33558924U,	// CMPGDU_EQ_QB
    33558829U,	// CMPGDU_LE_QB
    33559043U,	// CMPGDU_LT_QB
    33558938U,	// CMPGU_EQ_QB
    33558843U,	// CMPGU_LE_QB
    33559057U,	// CMPGU_LT_QB
    4519U,	// CMPU_EQ_QB
    4424U,	// CMPU_LE_QB
    4638U,	// CMPU_LT_QB
    5254U,	// CMP_EQ_PH
    5150U,	// CMP_LE_PH
    5423U,	// CMP_LT_PH
    405552U,	// CTC1
    6247U,	// CVT_D32_S
    6612U,	// CVT_D32_W
    5704U,	// CVT_D64_L
    6247U,	// CVT_D64_S
    6612U,	// CVT_D64_W
    4828U,	// CVT_L_D64
    6323U,	// CVT_L_S
    4852U,	// CVT_S_D32
    4852U,	// CVT_S_D64
    5713U,	// CVT_S_L
    6800U,	// CVT_S_W
    4941U,	// CVT_W_D32
    4941U,	// CVT_W_D64
    6427U,	// CVT_W_S
    5967U,	// CmpRxRy16
    151000622U,	// CmpiRxImm16
    5678U,	// CmpiRxImmX16
    269240U,	// Constant32
    17900387U,	// DADD
    51455505U,	// DADDi
    51456367U,	// DADDiu
    17901916U,	// DADDu
    605103640U,	// DANDi
    4269862U,	// DCLO
    4270898U,	// DCLZ
    1141976020U,	// DEXT
    1141976007U,	// DEXTM
    1141976033U,	// DEXTU
    1141976014U,	// DINS
    1141976000U,	// DINSM
    1141976026U,	// DINSU
    605102089U,	// DMFC0_3OP64
    4137U,	// DMFC1
    605102229U,	// DMFC2_3OP64
    16400U,	// DMTC0_3OP64
    471094U,	// DMTC1
    16540U,	// DMTC2_3OP64
    4270391U,	// DMULT
    4270468U,	// DMULTu
    33559934U,	// DPAQX_SA_W_PH
    33560017U,	// DPAQX_S_W_PH
    33561134U,	// DPAQ_SA_L_W
    33559976U,	// DPAQ_S_W_PH
    33560180U,	// DPAU_H_QBL
    33560489U,	// DPAU_H_QBR
    33560055U,	// DPAX_W_PH
    33559924U,	// DPA_W_PH
    33559949U,	// DPSQX_SA_W_PH
    33560031U,	// DPSQX_S_W_PH
    33561147U,	// DPSQ_SA_L_W
    33560004U,	// DPSQ_S_W_PH
    33560192U,	// DPSU_H_QBL
    33560501U,	// DPSU_H_QBR
    33560066U,	// DPSX_W_PH
    33560045U,	// DPS_W_PH
    51456070U,	// DROTR
    534982U,	// DROTRV
    4269012U,	// DSBH
    4271001U,	// DSDIV
    4268911U,	// DSHD
    51455741U,	// DSLL
    51454085U,	// DSLL32
    167778045U,	// DSLL64_32
    534944U,	// DSLLV
    51454229U,	// DSRA
    51454067U,	// DSRA32
    534929U,	// DSRAV
    51455747U,	// DSRL
    51454093U,	// DSRL32
    534951U,	// DSRLV
    17901902U,	// DSUBu
    4270987U,	// DUDIV
    7066U,	// DivRxRy16
    7052U,	// DivuRxRy16
    1141976021U,	// EXT
    1644173214U,	// EXTP
    1644173119U,	// EXTPDP
    33561014U,	// EXTPDPV
    33561023U,	// EXTPV
    33561324U,	// EXTRV_RS_W
    33561213U,	// EXTRV_R_W
    33559497U,	// EXTRV_S_H
    33561336U,	// EXTRV_W
    1644174049U,	// EXTR_RS_W
    1644173928U,	// EXTR_R_W
    1644172223U,	// EXTR_S_H
    1644173960U,	// EXTR_W
    0U,	// ExtractElementF64
    4861U,	// FABS_D32
    4861U,	// FABS_D64
    6347U,	// FABS_S
    33559195U,	// FADD_D32
    33559195U,	// FADD_D64
    33560690U,	// FADD_S
    613352U,	// FCMP_D32
    613352U,	// FCMP_D64
    678888U,	// FCMP_S32
    33559316U,	// FDIV_D32
    33559316U,	// FDIV_D64
    33560802U,	// FDIV_S
    4817U,	// FLOOR_L_D64
    6312U,	// FLOOR_L_S
    4930U,	// FLOOR_W_D32
    4930U,	// FLOOR_W_D64
    6416U,	// FLOOR_W_S
    4891U,	// FMOV_D32
    4891U,	// FMOV_D64
    6377U,	// FMOV_S
    33559269U,	// FMUL_D32
    33559269U,	// FMUL_D64
    33560764U,	// FMUL_S
    4778U,	// FNEG_D32
    4778U,	// FNEG_D64
    6273U,	// FNEG_S
    4868U,	// FSQRT_D32
    4868U,	// FSQRT_D64
    6354U,	// FSQRT_S
    33559186U,	// FSUB_D32
    33559186U,	// FSUB_D64
    33560672U,	// FSUB_S
    1141976015U,	// INS
    2103758U,	// INSV
    267845U,	// J
    267871U,	// JAL
    6198U,	// JALR
    6198U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    268338U,	// JR
    268338U,	// JR64
    726623U,	// Jal16
    3105U,	// JrRa16
    3096U,	// JrcRa16
    269143U,	// JrcRx16
    266241U,	// JumpLinkReg16
    6295840U,	// LB
    6295840U,	// LB64
    6295840U,	// LB64_P8
    186653454U,	// LBUX
    6295840U,	// LB_MM
    6295840U,	// LB_MM_P8
    6295840U,	// LB_P8
    6297929U,	// LBu
    6297929U,	// LBu64
    6297929U,	// LBu64_P8
    6297929U,	// LBu_MM
    6297929U,	// LBu_MM_P8
    6297929U,	// LBu_P8
    6296438U,	// LD
    6295575U,	// LDC1
    6295575U,	// LDC164
    6295575U,	// LDC164_P8
    6297275U,	// LDL
    6297275U,	// LDL_P8
    6297584U,	// LDR
    6297584U,	// LDR_P8
    186650697U,	// LDXC1
    186650697U,	// LDXC164
    186650697U,	// LDXC164_P8
    6296438U,	// LD_P8
    3152240U,	// LEA_ADDiu
    3152239U,	// LEA_ADDiu64
    6296549U,	// LH
    6296549U,	// LH64
    6296549U,	// LH64_P8
    186653449U,	// LHX
    6296549U,	// LH_MM
    6296549U,	// LH_MM_P8
    6296549U,	// LH_P8
    6297962U,	// LHu
    6297962U,	// LHu64
    6297962U,	// LHu64_P8
    6297962U,	// LHu_MM
    6297962U,	// LHu_MM_P8
    6297962U,	// LHu_P8
    796415U,	// LL
    795509U,	// LLD
    795509U,	// LLD_P8
    796415U,	// LL_P8
    6295738U,	// LOAD_AC128
    6295738U,	// LOAD_AC128_P8
    6295715U,	// LOAD_AC64
    6295715U,	// LOAD_AC64_P8
    6297428U,	// LOAD_AC_DSP
    6297428U,	// LOAD_AC_DSP_P8
    6297455U,	// LOAD_CCOND_DSP
    6297455U,	// LOAD_CCOND_DSP_P8
    186650711U,	// LUXC1
    186650711U,	// LUXC164
    7345728U,	// LUi
    7345728U,	// LUi64
    7345728U,	// LUi_MM
    6298369U,	// LW
    6298369U,	// LW64
    6298369U,	// LW64_P8
    6295613U,	// LWC1
    6295613U,	// LWC1_P8
    6297358U,	// LWL
    6297358U,	// LWL64
    6297358U,	// LWL64_P8
    6297358U,	// LWL_P8
    6297684U,	// LWR
    6297684U,	// LWR64
    6297684U,	// LWR64_P8
    6297684U,	// LWR_P8
    186653460U,	// LWX
    186650725U,	// LWXC1
    186650725U,	// LWXC1_P8
    6298369U,	// LW_MM
    6298369U,	// LW_MM_P8
    6298369U,	// LW_P8
    6297996U,	// LWu64
    6297996U,	// LWu64_P8
    6295840U,	// LbRxRyOffMemX16
    6297929U,	// LbuRxRyOffMemX16
    6296549U,	// LhRxRyOffMemX16
    6297962U,	// LhuRxRyOffMemX16
    151000618U,	// LiRxImm16
    5674U,	// LiRxImmX16
    4530399U,	// LoadAddr32Imm
    794847U,	// LoadAddr32Reg
    4531754U,	// LoadImm32Reg
    858881U,	// LwConstant32
    6298369U,	// LwRxRyOffMemX16
    203430657U,	// LwRxSpImmX16
    4268905U,	// MADD
    4270435U,	// MADDU
    33560931U,	// MADDU_DSP
    2181042842U,	// MADD_D32
    2181042842U,	// MADD_D64
    33559401U,	// MADD_DSP
    2181044337U,	// MADD_S
    33560261U,	// MAQ_SA_W_PHL
    33560570U,	// MAQ_SA_W_PHR
    33560289U,	// MAQ_S_W_PHL
    33560598U,	// MAQ_S_W_PHR
    605102090U,	// MFC0_3OP
    4138U,	// MFC1
    605102230U,	// MFC2_3OP
    267806U,	// MFHI
    267806U,	// MFHI64
    5662U,	// MFHI_DSP
    268076U,	// MFLO
    268076U,	// MFLO64
    5932U,	// MFLO_DSP
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    33559156U,	// MODSUB
    0U,	// MOVCCRToCCR
    218108578U,	// MOVF_D32
    218108578U,	// MOVF_D64
    218108852U,	// MOVF_I
    218108852U,	// MOVF_I64
    218110073U,	// MOVF_S
    33559276U,	// MOVN_I64_D64
    33560352U,	// MOVN_I64_I
    33560352U,	// MOVN_I64_I64
    33560771U,	// MOVN_I64_S
    33559276U,	// MOVN_I_D32
    33559276U,	// MOVN_I_D64
    33560352U,	// MOVN_I_I
    33560352U,	// MOVN_I_I64
    33560771U,	// MOVN_I_S
    218108684U,	// MOVT_D32
    218108684U,	// MOVT_D64
    218110275U,	// MOVT_I
    218110275U,	// MOVT_I64
    218110170U,	// MOVT_S
    33559382U,	// MOVZ_I64_D64
    33561425U,	// MOVZ_I64_I
    33561425U,	// MOVZ_I64_I64
    33560868U,	// MOVZ_I64_S
    33559382U,	// MOVZ_I_D32
    33559382U,	// MOVZ_I_D64
    33561425U,	// MOVZ_I_I
    33561425U,	// MOVZ_I_I64
    33560868U,	// MOVZ_I_S
    4268668U,	// MSUB
    4270421U,	// MSUBU
    33560917U,	// MSUBU_DSP
    2181042833U,	// MSUB_D32
    2181042833U,	// MSUB_D64
    33559164U,	// MSUB_DSP
    2181044319U,	// MSUB_S
    16401U,	// MTC0_3OP
    471095U,	// MTC1
    16541U,	// MTC2_3OP
    267812U,	// MTHI
    267812U,	// MTHI64
    472612U,	// MTHI_DSP
    472903U,	// MTHLIP
    268089U,	// MTLO
    268089U,	// MTLO64
    472889U,	// MTLO_DSP
    17901321U,	// MUL
    33560302U,	// MULEQ_S_W_PHL
    33560611U,	// MULEQ_S_W_PHR
    33560204U,	// MULEU_S_PH_QBL
    33560513U,	// MULEU_S_PH_QBR
    33559843U,	// MULQ_RS_PH
    33561302U,	// MULQ_RS_W
    33559787U,	// MULQ_S_PH
    33561271U,	// MULQ_S_W
    33559989U,	// MULSAQ_S_W_PH
    33559964U,	// MULSA_W_PH
    4270392U,	// MULT
    33560965U,	// MULTU_DSP
    33560888U,	// MULT_DSP
    4270392U,	// MULT_MM
    4270469U,	// MULTu
    4270469U,	// MULTu_MM
    17901321U,	// MUL_MM
    33559660U,	// MUL_PH
    33559755U,	// MUL_S_PH
    267806U,	// Mfhi16
    268076U,	// Mflo16
    5032U,	// Move32R16
    5032U,	// MoveR3216
    6456U,	// MultRxRy16
    9320760U,	// MultRxRyRz16
    6533U,	// MultuRxRy16
    9320837U,	// MultuRxRyRz16
    2181042841U,	// NMADD_D32
    2181042841U,	// NMADD_D64
    2181044336U,	// NMADD_S
    2181042832U,	// NMSUB_D32
    2181042832U,	// NMSUB_D64
    2181044318U,	// NMSUB_S
    0U,	// NOP
    17901628U,	// NOR
    17901628U,	// NOR64
    17901628U,	// NOR_MM
    5050U,	// NegRxRy16
    6462U,	// NotRxRy16
    17901629U,	// OR
    17901629U,	// OR64
    17901629U,	// OR_MM
    605103669U,	// ORi
    605103669U,	// ORi64
    605103669U,	// ORi_MM
    2103357U,	// OrRxRxRy16
    33559649U,	// PACKRL_PH
    33559613U,	// PICK_PH
    33558888U,	// PICK_QB
    5803U,	// PRECEQU_PH_QBL
    4323U,	// PRECEQU_PH_QBLA
    6112U,	// PRECEQU_PH_QBR
    4356U,	// PRECEQU_PH_QBRA
    5843U,	// PRECEQ_W_PHL
    6152U,	// PRECEQ_W_PHR
    5788U,	// PRECEU_PH_QBL
    4307U,	// PRECEU_PH_QBLA
    6097U,	// PRECEU_PH_QBR
    4340U,	// PRECEU_PH_QBRA
    33559565U,	// PRECRQU_S_QB_PH
    33561069U,	// PRECRQ_PH_W
    33559538U,	// PRECRQ_QB_PH
    33561100U,	// PRECRQ_RS_PH_W
    33559552U,	// PRECR_QB_PH
    33561053U,	// PRECR_SRA_PH_W
    33561082U,	// PRECR_SRA_R_PH_W
    33559423U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    4708U,	// RADDU_W_QB
    7346064U,	// RDDSP
    5249101U,	// RDHWR
    5249101U,	// RDHWR64
    5472U,	// REPLV_PH
    4688U,	// REPLV_QB
    7345231U,	// REPL_PH
    7344506U,	// REPL_QB
    268338U,	// RET
    51456071U,	// ROTR
    534983U,	// ROTRV
    534983U,	// ROTRV_MM
    51456071U,	// ROTR_MM
    4796U,	// ROUND_L_D64
    6291U,	// ROUND_L_S
    4909U,	// ROUND_W_D32
    4909U,	// ROUND_W_D64
    6395U,	// ROUND_W_S
    25497U,	// RestoreIncSpF16
    27485U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    6296176U,	// SB
    6296176U,	// SB64
    6296176U,	// SB64_P8
    6296176U,	// SB_MM
    6296176U,	// SB_MM_P8
    6296176U,	// SB_P8
    29317U,	// SC
    29534U,	// SCD
    29534U,	// SCD_P8
    29317U,	// SC_P8
    6296464U,	// SD
    6295581U,	// SDC1
    6295581U,	// SDC164
    6295581U,	// SDC164_P8
    4271002U,	// SDIV
    6297280U,	// SDL
    6297280U,	// SDL_P8
    6297589U,	// SDR
    6297589U,	// SDR_P8
    186650704U,	// SDXC1
    186650704U,	// SDXC164
    186650704U,	// SDXC164_P8
    6296464U,	// SD_P8
    4379U,	// SEB
    4379U,	// SEB64
    5088U,	// SEH
    5088U,	// SEH64
    6297101U,	// SH
    6297101U,	// SH64
    6297101U,	// SH64_P8
    5938U,	// SHILO
    6574U,	// SHILOV
    33559894U,	// SHLLV_PH
    33559110U,	// SHLLV_QB
    33559831U,	// SHLLV_S_PH
    33561291U,	// SHLLV_S_W
    1644172358U,	// SHLL_PH
    1644171633U,	// SHLL_QB
    1644172480U,	// SHLL_S_PH
    1644173977U,	// SHLL_S_W
    33559884U,	// SHRAV_PH
    33559100U,	// SHRAV_QB
    33559732U,	// SHRAV_R_PH
    33558998U,	// SHRAV_R_QB
    33561202U,	// SHRAV_R_W
    1644172265U,	// SHRA_PH
    1644171556U,	// SHRA_QB
    1644172433U,	// SHRA_R_PH
    1644171699U,	// SHRA_R_QB
    1644173896U,	// SHRA_R_W
    33559914U,	// SHRLV_PH
    33559130U,	// SHRLV_QB
    1644172376U,	// SHRL_PH
    1644171651U,	// SHRL_QB
    6297101U,	// SH_MM
    6297101U,	// SH_MM_P8
    6297101U,	// SH_P8
    51455742U,	// SLL
    234886910U,	// SLL64_32
    234886910U,	// SLL64_64
    534945U,	// SLLV
    534945U,	// SLLV_MM
    51455742U,	// SLL_MM
    51718450U,	// SLT
    51718450U,	// SLT64
    51718450U,	// SLT_MM
    51717690U,	// SLTi
    51717690U,	// SLTi64
    51717690U,	// SLTi_MM
    51718519U,	// SLTiu
    51718519U,	// SLTiu64
    51718519U,	// SLTiu_MM
    51718526U,	// SLTu
    51718526U,	// SLTu64
    51718526U,	// SLTu_MM
    51454230U,	// SRA
    534930U,	// SRAV
    534930U,	// SRAV_MM
    51454230U,	// SRA_MM
    51455748U,	// SRL
    534952U,	// SRLV
    534952U,	// SRLV_MM
    51455748U,	// SRL_MM
    6295750U,	// STORE_AC128
    6295750U,	// STORE_AC128_P8
    6295726U,	// STORE_AC64
    6295726U,	// STORE_AC64_P8
    6297441U,	// STORE_AC_DSP
    6297441U,	// STORE_AC_DSP_P8
    6297471U,	// STORE_CCOND_DSP
    6297471U,	// STORE_CCOND_DSP_P8
    17900151U,	// SUB
    33559593U,	// SUBQH_PH
    33559708U,	// SUBQH_R_PH
    33561170U,	// SUBQH_R_W
    33561116U,	// SUBQH_W
    33559668U,	// SUBQ_PH
    33559765U,	// SUBQ_S_PH
    33561251U,	// SUBQ_S_W
    33558868U,	// SUBUH_QB
    33558974U,	// SUBUH_R_QB
    33559866U,	// SUBU_PH
    33559082U,	// SUBU_QB
    33559809U,	// SUBU_S_PH
    33559021U,	// SUBU_S_QB
    17900151U,	// SUB_MM
    17901903U,	// SUBu
    17901903U,	// SUBu_MM
    186650718U,	// SUXC1
    186650718U,	// SUXC164
    6298373U,	// SW
    6298373U,	// SW64
    6298373U,	// SW64_P8
    6295619U,	// SWC1
    6295619U,	// SWC1_P8
    6297363U,	// SWL
    6297363U,	// SWL64
    6297363U,	// SWL64_P8
    6297363U,	// SWL_P8
    6297689U,	// SWR
    6297689U,	// SWR64
    6297689U,	// SWR64_P8
    6297689U,	// SWR_P8
    186650732U,	// SWXC1
    186650732U,	// SWXC1_P8
    6298373U,	// SW_MM
    6298373U,	// SW_MM_P8
    6298373U,	// SW_P8
    269234U,	// SYNC
    25506U,	// SaveDecSpF16
    27510U,	// SaveRaF16
    6296176U,	// SbRxRyOffMemX16
    1018680U,	// SelBeqZ
    1018661U,	// SelBneZ
    261130063U,	// SelTBteqZCmp
    261129774U,	// SelTBteqZCmpi
    261130546U,	// SelTBteqZSlt
    261129786U,	// SelTBteqZSlti
    261130615U,	// SelTBteqZSltiu
    261130622U,	// SelTBteqZSltu
    277907279U,	// SelTBtneZCmp
    277906990U,	// SelTBtneZCmpi
    277907762U,	// SelTBtneZSlt
    277907002U,	// SelTBtneZSlti
    277907831U,	// SelTBtneZSltiu
    277907838U,	// SelTBtneZSltu
    6297101U,	// ShRxRyOffMemX16
    33560318U,	// SllX16
    2103713U,	// SllvRxRy16
    11417906U,	// SltCCRxRy16
    6450U,	// SltRxRy16
    11417146U,	// SltiCCRxImmX16
    151000634U,	// SltiRxImm16
    5690U,	// SltiRxImmX16
    11417975U,	// SltiuCCRxImmX16
    151001463U,	// SltiuRxImm16
    6519U,	// SltiuRxImmX16
    11417982U,	// SltuCCRxRy16
    6526U,	// SltuRxRy16
    11417982U,	// SltuRxRyRz16
    33558806U,	// SraX16
    2103698U,	// SravRxRy16
    33560324U,	// SrlX16
    2103720U,	// SrlvRxRy16
    33560911U,	// SubuRxRyRz16
    6298373U,	// SwRxRyOffMemX16
    203430661U,	// SwRxSpImmX16
    267845U,	// TAILCALL
    268338U,	// TAILCALL64_R
    268338U,	// TAILCALL_R
    4785U,	// TRUNC_L_D64
    6280U,	// TRUNC_L_S
    4898U,	// TRUNC_W_D32
    4898U,	// TRUNC_W_D64
    6384U,	// TRUNC_W_S
    4270988U,	// UDIV
    7346071U,	// WRDSP
    4269018U,	// WSBH
    17901633U,	// XOR
    17901633U,	// XOR64
    17901633U,	// XOR_MM
    605103668U,	// XORi
    605103668U,	// XORi64
    605103668U,	// XORi_MM
    2103361U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'c', 't', 'c', '1', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 60 */ 'l', 'w', 'c', '1', 9, 0,
  /* 66 */ 's', 'w', 'c', '1', 9, 0,
  /* 72 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 79 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 86 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 114 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 122 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 132 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 140 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 148 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 155 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 162 */ 'l', 'o', 'a', 'd', '_', 'a', 'c', '6', '4', 9, 0,
  /* 173 */ 's', 't', 'o', 'r', 'e', '_', 'a', 'c', '6', '4', 9, 0,
  /* 185 */ 'l', 'o', 'a', 'd', '_', 'a', 'c', '1', '2', '8', 9, 0,
  /* 197 */ 's', 't', 'o', 'r', 'e', '_', 'a', 'c', '1', '2', '8', 9, 0,
  /* 210 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 226 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 243 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 259 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 276 */ 'd', 's', 'r', 'a', 9, 0,
  /* 282 */ 's', 'e', 'b', 9, 0,
  /* 287 */ 'l', 'b', 9, 0,
  /* 291 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 300 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 314 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 327 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 339 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 349 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 359 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 368 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 377 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 386 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 395 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 409 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 422 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 434 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 445 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 457 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 469 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 481 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 492 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 503 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 514 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 528 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 541 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 553 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 562 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 571 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 581 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 591 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 601 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 611 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 623 */ 's', 'b', 9, 0,
  /* 627 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 635 */ 'm', 's', 'u', 'b', 9, 0,
  /* 641 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 648 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 655 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 664 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 673 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 681 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 688 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 699 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 710 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 720 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 731 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 740 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 747 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 755 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 764 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 771 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 779 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 787 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 794 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 801 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 812 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 823 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 833 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 844 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 853 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 861 */ 's', 'c', 'd', 9, 0,
  /* 866 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 872 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 878 */ 'd', 's', 'h', 'd', 9, 0,
  /* 884 */ 'l', 'l', 'd', 9, 0,
  /* 889 */ 'a', 'n', 'd', 9, 0,
  /* 894 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 903 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 911 */ 's', 'd', 9, 0,
  /* 915 */ 'b', 'n', 'e', 9, 0,
  /* 920 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 929 */ 's', 'a', 'v', 'e', 9, 0,
  /* 935 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 941 */ 'b', 'c', '1', 'f', 9, 0,
  /* 947 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 953 */ 'n', 'e', 'g', 9, 0,
  /* 958 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 968 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 979 */ 'd', 's', 'b', 'h', 9, 0,
  /* 985 */ 'w', 's', 'b', 'h', 9, 0,
  /* 991 */ 's', 'e', 'h', 9, 0,
  /* 996 */ 'l', 'h', 9, 0,
  /* 1000 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 1009 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1023 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1036 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1053 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 1064 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1074 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1084 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 1093 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 1102 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 1111 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1120 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1131 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 1139 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 1148 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 1157 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 1168 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1179 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1191 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1203 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1215 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1226 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1236 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1247 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1258 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1269 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1280 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1291 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1302 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1314 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 1326 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 1337 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 1346 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 1355 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 1365 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1375 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1385 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1395 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1405 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1420 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1435 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1447 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1460 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1475 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1488 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1502 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1516 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1526 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1537 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1548 */ 's', 'h', 9, 0,
  /* 1552 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 1559 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 1565 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 1571 */ 'm', 't', 'h', 'i', 9, 0,
  /* 1577 */ 'l', 'i', 9, 0,
  /* 1581 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 1587 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 1593 */ 's', 'l', 't', 'i', 9, 0,
  /* 1599 */ 'l', 'u', 'i', 9, 0,
  /* 1604 */ 'j', 9, 0,
  /* 1607 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 1616 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 1625 */ 'b', 'a', 'l', 9, 0,
  /* 1630 */ 'j', 'a', 'l', 9, 0,
  /* 1635 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 1643 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 1651 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1663 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1675 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1691 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1706 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1722 */ 'l', 'd', 'l', 9, 0,
  /* 1727 */ 's', 'd', 'l', 9, 0,
  /* 1732 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1746 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1760 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1773 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1788 */ 'd', 's', 'l', 'l', 9, 0,
  /* 1794 */ 'd', 's', 'r', 'l', 9, 0,
  /* 1800 */ 'm', 'u', 'l', 9, 0,
  /* 1805 */ 'l', 'w', 'l', 9, 0,
  /* 1810 */ 's', 'w', 'l', 9, 0,
  /* 1815 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 1823 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 1829 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 1835 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 1841 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 1848 */ 'm', 't', 'l', 'o', 9, 0,
  /* 1854 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 1862 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 1870 */ 'c', 'm', 'p', 9, 0,
  /* 1875 */ 'l', 'o', 'a', 'd', '_', 'a', 'c', '_', 'd', 's', 'p', 9, 0,
  /* 1888 */ 's', 't', 'o', 'r', 'e', '_', 'a', 'c', '_', 'd', 's', 'p', 9, 0,
  /* 1902 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 1918 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 1935 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 1942 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 1949 */ 'e', 'x', 't', 'p', 9, 0,
  /* 1955 */ 'b', 'e', 'q', 9, 0,
  /* 1960 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1972 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1984 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2000 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2015 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2031 */ 'l', 'd', 'r', 9, 0,
  /* 2036 */ 's', 'd', 'r', 9, 0,
  /* 2041 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2055 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2069 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2082 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2097 */ 'j', 'r', 9, 0,
  /* 2101 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 2107 */ 'n', 'o', 'r', 9, 0,
  /* 2112 */ 'x', 'o', 'r', 9, 0,
  /* 2117 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 2124 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 2131 */ 'l', 'w', 'r', 9, 0,
  /* 2136 */ 's', 'w', 'r', 9, 0,
  /* 2141 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 2150 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 2159 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 2168 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 2176 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 2183 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 2194 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 2205 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 2215 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 2226 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 2235 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 2242 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 2250 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 2257 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 2265 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 2273 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 2280 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 2287 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 2298 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 2309 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 2319 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 2330 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 2339 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 2347 */ 'b', 'c', '1', 't', 9, 0,
  /* 2353 */ 's', 'l', 't', 9, 0,
  /* 2358 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 2365 */ 'n', 'o', 't', 9, 0,
  /* 2370 */ 'm', 'o', 'v', 't', 9, 0,
  /* 2376 */ 'l', 'b', 'u', 9, 0,
  /* 2381 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 2388 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 2395 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 2402 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 2409 */ 'l', 'h', 'u', 9, 0,
  /* 2414 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 2422 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 2429 */ 's', 'l', 't', 'u', 9, 0,
  /* 2435 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 2443 */ 'l', 'w', 'u', 9, 0,
  /* 2448 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 2455 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 2463 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 2470 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 2477 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 2485 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 2494 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 2501 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 2509 */ 'i', 'n', 's', 'v', 9, 0,
  /* 2515 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 2524 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2540 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2553 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2571 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2587 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 2596 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 2605 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2618 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2631 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 2641 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2652 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2663 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 2673 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2684 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2695 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 2703 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 2712 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 2722 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2732 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2742 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2752 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2762 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 2773 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2784 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2795 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2807 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 2816 */ 'l', 'w', 9, 0,
  /* 2820 */ 's', 'w', 9, 0,
  /* 2824 */ 'l', 'h', 'x', 9, 0,
  /* 2829 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 2835 */ 'l', 'w', 'x', 9, 0,
  /* 2840 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 2846 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 2852 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 2858 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 2865 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 2871 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 2877 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 2884 */ 'b', 'g', 't', 'z', 9, 0,
  /* 2890 */ 'b', 'l', 't', 'z', 9, 0,
  /* 2896 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 2902 */ 'j', 'r', 'c', 9, 32, 0,
  /* 2908 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 2933 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 2954 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 2968 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 2981 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 2993 */ 's', 'y', 'n', 'c', 32, 0,
  /* 2999 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 3007 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 3014 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 3021 */ 'd', 'i', 'n', 's', 32, 0,
  /* 3027 */ 'd', 'e', 'x', 't', 32, 0,
  /* 3033 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 3040 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 3047 */ 'c', '.', 0,
  /* 3050 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3063 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3070 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3080 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3095 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 3104 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, JrRa16, JrcRa16
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD, ADD_MM, ADDi, ADDi_MM, ADDiu, ADDiu_MM, ADDu, ADDu_MM, AND, AND64...
    printCPURegs(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // CTC1, DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP, MultRxRyRz16, MultuRxRy...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // DMTC0_3OP64, DMTC2_3OP64, MTC0_3OP, MTC2_3OP
    printCPURegs(MI, 2, O); 
    O << ", "; 
    printCPURegs(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 6:
    // RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveRaF16
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 7:
    // SC, SCD, SCD_P8, SC_P8
    printCPURegs(MI, 1, O); 
    O << ", "; 
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 16) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    O << ", "; 
    break;
  case 1:
    // ADD, ADD_MM, ADDi, ADDi_MM, ADDiu, ADDiu_MM, ADDu, ADDu_MM, AND, AND64...
    printCPURegs(MI, 1, O); 
    break;
  case 2:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // AddiuSpImm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 4:
    // AddiuSpImmX16, B, BAL_BR, BC1F, BC1T, BPOSGE32, BimmX16, BteqzX16, Btn...
    return;
    break;
  case 5:
    // BGEZAL, BLTZAL, LoadAddr32Imm, LoadImm32Reg, SLT, SLT64, SLT_MM, SLTi,...
    printOperand(MI, 1, O); 
    break;
  case 6:
    // CTC1
    printCPURegs(MI, 0, O); 
    return;
    break;
  case 7:
    // DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // DROTRV, DSLLV, DSRAV, DSRLV, ROTRV, ROTRV_MM, SLLV, SLLV_MM, SRAV, SRA...
    printCPURegs(MI, 2, O); 
    O << ", "; 
    printCPURegs(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // LL, LLD, LLD_P8, LL_P8, LoadAddr32Reg
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 14:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 15:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD, ADD_MM, ADDi, ADDi_MM, ADDiu, ADDiu_MM, ADDu, ADDu_MM, AND, AND64...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, INSV, LBUX, LDXC1, LDXC1...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // BGEZAL, BLTZAL, CLO, CLZ, DCLO, DCLZ, DMULT, DMULTu, DSBH, DSDIV, DSHD...
    return;
    break;
  case 5:
    // CFC1, RDHWR, RDHWR64
    printCPURegs(MI, 1, O); 
    return;
    break;
  case 6:
    // LB, LB64, LB64_P8, LB_MM, LB_MM_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_M...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // LUi, LUi64, LUi_MM, RDDSP, REPL_PH, REPL_QB, WRDSP
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 8:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 10:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 24) & 31) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADD_MM, ADDu, ADDu_MM, AND, AND64, AND_MM, DADD, DADDu, DSUBu, MU...
    printCPURegs(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    O << ", "; 
    break;
  case 3:
    // ADDi, ADDi_MM, ADDiu, ADDiu_MM, DADDi, DADDiu, DROTR, DSLL, DSLL32, DS...
    printOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ANDi, ANDi_MM, DANDi, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, DMFC0_3O...
    printUnsignedImm(MI, 2, O); 
    break;
  case 5:
    // AddiuRxRxImm16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 6:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 7:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 10:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 11:
    // LBUX, LDXC1, LDXC164, LDXC164_P8, LHX, LUXC1, LUXC164, LWX, LWXC1, LWX...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 13:
    // MOVF_D32, MOVF_D64, MOVF_I, MOVF_I64, MOVF_S, MOVT_D32, MOVT_D64, MOVT...
    O << ", $fcc0"; 
    return;
    break;
  case 14:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 15:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 29) & 3) {
  default:   // unreachable.
  case 0:
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ANDi, ANDi_MM, DANDi, DMFC0_3OP64, DMFC2_3OP64, MFC0_3OP, MFC2_3OP, OR...
    return;
    break;
  case 2:
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, INS
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // EXTP, EXTPDP, EXTR_RS_W, EXTR_R_W, EXTR_S_H, EXTR_W, SHLL_PH, SHLL_QB,...
    printUnsignedImm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 31) & 1) {
    // MADD_D32, MADD_D64, MADD_S, MSUB_D32, MSUB_D64, MSUB_S, NMADD_D32, NMA...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'f', '2', '0', 0,
  /* 8 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 21 */ 'f', '3', '0', 0,
  /* 25 */ 'a', 'c', '0', 0,
  /* 29 */ 'f', 'c', 'c', '0', 0,
  /* 34 */ 'f', '0', 0,
  /* 37 */ 'f', '1', '1', 0,
  /* 41 */ 'f', '2', '1', 0,
  /* 45 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 58 */ 'f', '3', '1', 0,
  /* 62 */ 'a', 'c', '1', 0,
  /* 66 */ 'f', '1', 0,
  /* 69 */ 'f', '1', '2', 0,
  /* 73 */ 'f', '2', '2', 0,
  /* 77 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 90 */ 'a', 'c', '2', 0,
  /* 94 */ 'f', '2', 0,
  /* 97 */ 'f', '1', '3', 0,
  /* 101 */ 'f', '2', '3', 0,
  /* 105 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 118 */ 'a', 'c', '3', 0,
  /* 122 */ 'f', '3', 0,
  /* 125 */ 'f', '1', '4', 0,
  /* 129 */ 'f', '2', '4', 0,
  /* 133 */ 'f', '4', 0,
  /* 136 */ 'f', '1', '5', 0,
  /* 140 */ 'f', '2', '5', 0,
  /* 144 */ 'f', '5', 0,
  /* 147 */ 'f', '1', '6', 0,
  /* 151 */ 'f', '2', '6', 0,
  /* 155 */ 'f', '6', 0,
  /* 158 */ 'f', '1', '7', 0,
  /* 162 */ 'f', '2', '7', 0,
  /* 166 */ 'f', '7', 0,
  /* 169 */ 'f', '1', '8', 0,
  /* 173 */ 'f', '2', '8', 0,
  /* 177 */ 'f', '8', 0,
  /* 180 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 196 */ 'f', '1', '9', 0,
  /* 200 */ 'f', '2', '9', 0,
  /* 204 */ 'f', '9', 0,
  /* 207 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 214 */ 'r', 'a', 0,
  /* 217 */ 'p', 'c', 0,
  /* 220 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 229 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 240 */ 'h', 'i', 0,
  /* 243 */ 'l', 'o', 0,
  /* 246 */ 'z', 'e', 'r', 'o', 0,
  /* 251 */ 'f', 'p', 0,
  /* 254 */ 'g', 'p', 0,
  /* 257 */ 's', 'p', 0,
  /* 260 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 267 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 277 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    127, 127, 138, 138, 149, 149, 160, 160, 25, 25, 62, 90, 118, 39, 
    39, 34, 34, 94, 66, 133, 94, 155, 122, 177, 133, 0, 144, 69, 
    155, 125, 166, 147, 177, 169, 204, 4, 0, 73, 37, 129, 69, 151, 
    97, 173, 125, 21, 136, 147, 158, 169, 196, 4, 41, 73, 101, 129, 
    140, 151, 162, 173, 200, 21, 58, 220, 277, 207, 229, 180, 8, 45, 
    77, 105, 260, 267, 34, 66, 94, 122, 133, 144, 155, 166, 177, 204, 
    0, 37, 69, 97, 125, 136, 147, 158, 169, 196, 4, 41, 73, 101, 
    129, 140, 151, 162, 173, 200, 21, 58, 29, 59, 251, 251, 254, 254, 
    25, 62, 90, 118, 240, 201, 201, 152, 152, 163, 163, 25, 62, 90, 
    118, 243, 217, 214, 214, 148, 148, 159, 159, 170, 170, 193, 193, 5, 
    5, 42, 42, 74, 74, 102, 102, 257, 257, 171, 171, 194, 194, 1, 
    1, 38, 38, 70, 70, 98, 98, 126, 126, 137, 137, 130, 130, 141, 
    141, 71, 71, 99, 99, 246, 246, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu CPURegsOpnd:$dst, CPURegsOpnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu CPU64RegsOpnd:$dst, CPU64RegsOpnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR RA, CPURegs:$rs)
      AsmString = "jalr $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 RA_64, CPU64Regs:$rs)
      AsmString = "jalr $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      break;
    }
    return false;
  case Mips::NOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (NOR CPURegsOpnd:$rt, CPURegsOpnd:$rs, ZERO)
      AsmString = "not $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::NOR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (NOR64 CPU64RegsOpnd:$rt, CPU64RegsOpnd:$rs, ZERO_64)
      AsmString = "not $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR CPURegsOpnd:$dst, CPURegsOpnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 CPU64RegsOpnd:$dst, CPU64RegsOpnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB CPURegsOpnd:$rt, ZERO, CPURegsOpnd:$rs)
      AsmString = "neg $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu CPURegsOpnd:$rt, ZERO, CPURegsOpnd:$rs)
      AsmString = "negu $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
