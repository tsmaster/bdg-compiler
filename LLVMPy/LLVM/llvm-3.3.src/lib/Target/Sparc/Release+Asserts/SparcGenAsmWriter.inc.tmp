/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SparcAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    686U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    679U,	// BUNDLE
    696U,	// LIFETIME_START
    666U,	// LIFETIME_END
    1128U,	// ADDCCri
    1128U,	// ADDCCrr
    1458U,	// ADDXri
    1458U,	// ADDXrr
    1156U,	// ADDri
    1156U,	// ADDrr
    18474U,	// ADJCALLSTACKDOWN
    18493U,	// ADJCALLSTACKUP
    1319U,	// ANDNri
    1319U,	// ANDNrr
    1190U,	// ANDri
    1190U,	// ANDrr
    18510U,	// BA
    36604U,	// BCOND
    52996U,	// BPXCC
    18699U,	// CALL
    66752U,	// FABSD
    66937U,	// FABSS
    1161U,	// FADDD
    1359U,	// FADDS
    36603U,	// FBCOND
    215225U,	// FCMPD
    215410U,	// FCMPS
    1236U,	// FDIVD
    1416U,	// FDIVS
    66813U,	// FDTOI
    66916U,	// FDTOS
    66731U,	// FITOD
    66923U,	// FITOS
    789U,	// FLUSHW
    66779U,	// FMOVD
    103166U,	// FMOVD_FCC
    119550U,	// FMOVD_ICC
    66959U,	// FMOVS
    103179U,	// FMOVS_FCC
    119563U,	// FMOVS_ICC
    1175U,	// FMULD
    1373U,	// FMULS
    66704U,	// FNEGD
    66902U,	// FNEGS
    1182U,	// FSMULD
    66759U,	// FSQRTD
    66944U,	// FSQRTS
    66738U,	// FSTOD
    66820U,	// FSTOI
    1149U,	// FSUBD
    1352U,	// FSUBS
    66584U,	// FpABSD
    66593U,	// FpMOVD
    66575U,	// FpNEGD
    5126U,	// GETPCX
    6411U,	// JMPLri
    6411U,	// JMPLrr
    7893U,	// LDDFri
    7893U,	// LDDFrr
    7899U,	// LDFri
    7899U,	// LDFrr
    7879U,	// LDSBri
    7879U,	// LDSBrr
    7904U,	// LDSHri
    7904U,	// LDSHrr
    7918U,	// LDSWri
    7918U,	// LDSWrr
    7886U,	// LDUBri
    7886U,	// LDUBrr
    7911U,	// LDUHri
    7911U,	// LDUHrr
    7925U,	// LDXri
    7925U,	// LDXrr
    7899U,	// LDri
    7899U,	// LDrr
    8324U,	// LEA_ADDri
    103185U,	// MOVFCCri
    103185U,	// MOVFCCrr
    119569U,	// MOVICCri
    119569U,	// MOVICCrr
    316177U,	// MOVXCCri
    316177U,	// MOVXCCrr
    1476U,	// MULXri
    1476U,	// MULXrr
    775U,	// NOP
    1325U,	// ORNri
    1325U,	// ORNrr
    1339U,	// ORri
    1339U,	// ORrr
    66679U,	// POPCrr
    18439U,	// RDY
    1250U,	// RESTOREri
    1250U,	// RESTORErr
    19075U,	// RET
    19084U,	// RETL
    1259U,	// SAVEri
    1259U,	// SAVErr
    1487U,	// SDIVXri
    1487U,	// SDIVXrr
    1434U,	// SDIVri
    1434U,	// SDIVrr
    477U,	// SELECT_CC_DFP_FCC
    560U,	// SELECT_CC_DFP_ICC
    505U,	// SELECT_CC_FP_FCC
    588U,	// SELECT_CC_FP_ICC
    532U,	// SELECT_CC_Int_FCC
    615U,	// SELECT_CC_Int_ICC
    66806U,	// SETHIi
    1464U,	// SLLXri
    1464U,	// SLLXrr
    1297U,	// SLLri
    1297U,	// SLLrr
    1307U,	// SMULri
    1307U,	// SMULrr
    1446U,	// SRAXri
    1446U,	// SRAXrr
    1106U,	// SRAri
    1106U,	// SRArr
    1470U,	// SRLXri
    1470U,	// SRLXrr
    1302U,	// SRLri
    1302U,	// SRLrr
    9303U,	// STBri
    9303U,	// STBrr
    9423U,	// STDFri
    9217U,	// STDFrr
    9622U,	// STFri
    9622U,	// STFrr
    9457U,	// STHri
    9457U,	// STHrr
    9674U,	// STXri
    9674U,	// STXrr
    9622U,	// STri
    9622U,	// STrr
    1121U,	// SUBCCri
    1121U,	// SUBCCrr
    1135U,	// SUBXCCrr
    1452U,	// SUBXri
    1452U,	// SUBXrr
    1116U,	// SUBri
    1116U,	// SUBrr
    661U,	// TA3
    1494U,	// UDIVXri
    1494U,	// UDIVXrr
    1440U,	// UDIVri
    1440U,	// UDIVrr
    1313U,	// UMULri
    1313U,	// UMULrr
    18738U,	// UNIMP
    477508U,	// WRYri
    477508U,	// WRYrr
    1337U,	// XNORri
    1337U,	// XNORrr
    1343U,	// XORri
    1343U,	// XORrr
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 's', 't', 'd', 32, 32, 0,
  /* 6 */ 'r', 'd', 32, '%', 'y', ',', 32, 0,
  /* 14 */ '!', 'F', 'p', 'N', 'E', 'G', 'D', 32, 0,
  /* 23 */ '!', 'F', 'p', 'A', 'B', 'S', 'D', 32, 0,
  /* 32 */ '!', 'F', 'p', 'M', 'O', 'V', 'D', 32, 0,
  /* 41 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 60 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 77 */ 'b', 'a', 32, 0,
  /* 81 */ 's', 'r', 'a', 32, 0,
  /* 86 */ 's', 't', 'b', 32, 0,
  /* 91 */ 's', 'u', 'b', 32, 0,
  /* 96 */ 's', 'u', 'b', 'c', 'c', 32, 0,
  /* 103 */ 'a', 'd', 'd', 'c', 'c', 32, 0,
  /* 110 */ 's', 'u', 'b', 'x', 'c', 'c', 32, 0,
  /* 118 */ 'p', 'o', 'p', 'c', 32, 0,
  /* 124 */ 'f', 's', 'u', 'b', 'd', 32, 0,
  /* 131 */ 'a', 'd', 'd', 32, 0,
  /* 136 */ 'f', 'a', 'd', 'd', 'd', 32, 0,
  /* 143 */ 'f', 'n', 'e', 'g', 'd', 32, 0,
  /* 150 */ 'f', 'm', 'u', 'l', 'd', 32, 0,
  /* 157 */ 'f', 's', 'm', 'u', 'l', 'd', 32, 0,
  /* 165 */ 'a', 'n', 'd', 32, 0,
  /* 170 */ 'f', 'i', 't', 'o', 'd', 32, 0,
  /* 177 */ 'f', 's', 't', 'o', 'd', 32, 0,
  /* 184 */ 'f', 'c', 'm', 'p', 'd', 32, 0,
  /* 191 */ 'f', 'a', 'b', 's', 'd', 32, 0,
  /* 198 */ 'f', 's', 'q', 'r', 't', 'd', 32, 0,
  /* 206 */ 's', 't', 'd', 32, 0,
  /* 211 */ 'f', 'd', 'i', 'v', 'd', 32, 0,
  /* 218 */ 'f', 'm', 'o', 'v', 'd', 32, 0,
  /* 225 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 32, 0,
  /* 234 */ 's', 'a', 'v', 'e', 32, 0,
  /* 240 */ 's', 't', 'h', 32, 0,
  /* 245 */ 's', 'e', 't', 'h', 'i', 32, 0,
  /* 252 */ 'f', 'd', 't', 'o', 'i', 32, 0,
  /* 259 */ 'f', 's', 't', 'o', 'i', 32, 0,
  /* 266 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 272 */ 's', 'l', 'l', 32, 0,
  /* 277 */ 's', 'r', 'l', 32, 0,
  /* 282 */ 's', 'm', 'u', 'l', 32, 0,
  /* 288 */ 'u', 'm', 'u', 'l', 32, 0,
  /* 294 */ 'a', 'n', 'd', 'n', 32, 0,
  /* 300 */ 'o', 'r', 'n', 32, 0,
  /* 305 */ 'u', 'n', 'i', 'm', 'p', 32, 0,
  /* 312 */ 'x', 'n', 'o', 'r', 32, 0,
  /* 318 */ 'x', 'o', 'r', 32, 0,
  /* 323 */ 'w', 'r', 32, 0,
  /* 327 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 334 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 341 */ 'f', 'n', 'e', 'g', 's', 32, 0,
  /* 348 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 355 */ 'f', 'd', 't', 'o', 's', 32, 0,
  /* 362 */ 'f', 'i', 't', 'o', 's', 32, 0,
  /* 369 */ 'f', 'c', 'm', 'p', 's', 32, 0,
  /* 376 */ 'f', 'a', 'b', 's', 's', 32, 0,
  /* 383 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 391 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 398 */ 'f', 'm', 'o', 'v', 's', 32, 0,
  /* 405 */ 's', 't', 32, 0,
  /* 409 */ 's', 'd', 'i', 'v', 32, 0,
  /* 415 */ 'u', 'd', 'i', 'v', 32, 0,
  /* 421 */ 's', 'r', 'a', 'x', 32, 0,
  /* 427 */ 's', 'u', 'b', 'x', 32, 0,
  /* 433 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 439 */ 's', 'l', 'l', 'x', 32, 0,
  /* 445 */ 's', 'r', 'l', 'x', 32, 0,
  /* 451 */ 'm', 'u', 'l', 'x', 32, 0,
  /* 457 */ 's', 't', 'x', 32, 0,
  /* 462 */ 's', 'd', 'i', 'v', 'x', 32, 0,
  /* 469 */ 'u', 'd', 'i', 'v', 'x', 32, 0,
  /* 476 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 504 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 531 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 559 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 587 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 614 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 642 */ 'j', 'm', 'p', 32, '%', 'i', '7', '+', 0,
  /* 651 */ 'j', 'm', 'p', 32, '%', 'o', '7', '+', 0,
  /* 660 */ 't', 'a', 32, '3', 0,
  /* 665 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 678 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 685 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 695 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 710 */ 'l', 'd', 's', 'b', 32, '[', 0,
  /* 717 */ 'l', 'd', 'u', 'b', 32, '[', 0,
  /* 724 */ 'l', 'd', 'd', 32, '[', 0,
  /* 730 */ 'l', 'd', 32, '[', 0,
  /* 735 */ 'l', 'd', 's', 'h', 32, '[', 0,
  /* 742 */ 'l', 'd', 'u', 'h', 32, '[', 0,
  /* 749 */ 'l', 'd', 's', 'w', 32, '[', 0,
  /* 756 */ 'l', 'd', 'x', 32, '[', 0,
  /* 762 */ 'f', 'b', 0,
  /* 765 */ 'f', 'm', 'o', 'v', 'd', 0,
  /* 771 */ 'b', 'p', 0,
  /* 774 */ 'n', 'o', 'p', 0,
  /* 778 */ 'f', 'm', 'o', 'v', 's', 0,
  /* 784 */ 'm', 'o', 'v', 0,
  /* 788 */ 'f', 'l', 'u', 's', 'h', 'w', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 10) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FLUSHW, NOP, SELECT_C...
    return;
    break;
  case 1:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, FCMPD, FCMPS, RDY, RET, RE...
    printOperand(MI, 0, O); 
    break;
  case 3:
    // BCOND, BPXCC, FBCOND
    printCCOperand(MI, 1, O); 
    break;
  case 4:
    // FMOVD_FCC, FMOVD_ICC, FMOVS_FCC, FMOVS_ICC, MOVFCCri, MOVFCCrr, MOVICC...
    printCCOperand(MI, 3, O); 
    break;
  case 5:
    // GETPCX
    printGetPCX(MI, 0, O); 
    return;
    break;
  case 6:
    // JMPLri, JMPLrr
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // LDDFri, LDDFrr, LDFri, LDFrr, LDSBri, LDSBrr, LDSHri, LDSHrr, LDSWri, ...
    printMemOperand(MI, 1, O); 
    O << "], "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // LEA_ADDri
    printMemOperand(MI, 1, O, "arith"); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // STBri, STBrr, STDFri, STDFrr, STFri, STFrr, STHri, STHrr, STXri, STXrr...
    printOperand(MI, 2, O); 
    O << ", ["; 
    printMemOperand(MI, 0, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, RDY, RET, RETL, UNIMP
    return;
    break;
  case 2:
    // BCOND, FBCOND
    O << ' '; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BPXCC, MOVXCCri, MOVXCCrr
    O << " %xcc, "; 
    break;
  case 4:
    // FABSD, FABSS, FDTOI, FDTOS, FITOD, FITOS, FMOVD, FMOVS, FNEGD, FNEGS, ...
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FCMPD, FCMPS, WRYri, WRYrr
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 6:
    // FMOVD_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // FMOVD_ICC, FMOVS_ICC, MOVICCri, MOVICCrr
    O << " %icc, "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 17) & 3) {
  default:   // unreachable.
  case 0:
    // BPXCC
    printOperand(MI, 0, O); 
    return;
    break;
  case 1:
    // FCMPD, FCMPS
    O << "\n\tnop"; 
    return;
    break;
  case 2:
    // MOVXCCri, MOVXCCrr
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // WRYri, WRYrr
    O << ", %y"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 84 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'F', '1', '0', 0,
  /* 4 */ 'F', '2', '0', 0,
  /* 8 */ 'F', '3', '0', 0,
  /* 12 */ 'F', '0', 0,
  /* 15 */ 'G', '0', 0,
  /* 18 */ 'I', '0', 0,
  /* 21 */ 'L', '0', 0,
  /* 24 */ 'O', '0', 0,
  /* 27 */ 'F', '1', '1', 0,
  /* 31 */ 'F', '2', '1', 0,
  /* 35 */ 'F', '3', '1', 0,
  /* 39 */ 'F', '1', 0,
  /* 42 */ 'G', '1', 0,
  /* 45 */ 'I', '1', 0,
  /* 48 */ 'L', '1', 0,
  /* 51 */ 'O', '1', 0,
  /* 54 */ 'F', '1', '2', 0,
  /* 58 */ 'F', '2', '2', 0,
  /* 62 */ 'F', '2', 0,
  /* 65 */ 'G', '2', 0,
  /* 68 */ 'I', '2', 0,
  /* 71 */ 'L', '2', 0,
  /* 74 */ 'O', '2', 0,
  /* 77 */ 'F', '1', '3', 0,
  /* 81 */ 'F', '2', '3', 0,
  /* 85 */ 'F', '3', 0,
  /* 88 */ 'G', '3', 0,
  /* 91 */ 'I', '3', 0,
  /* 94 */ 'L', '3', 0,
  /* 97 */ 'O', '3', 0,
  /* 100 */ 'F', '1', '4', 0,
  /* 104 */ 'F', '2', '4', 0,
  /* 108 */ 'F', '4', 0,
  /* 111 */ 'G', '4', 0,
  /* 114 */ 'I', '4', 0,
  /* 117 */ 'L', '4', 0,
  /* 120 */ 'O', '4', 0,
  /* 123 */ 'F', '1', '5', 0,
  /* 127 */ 'F', '2', '5', 0,
  /* 131 */ 'F', '5', 0,
  /* 134 */ 'G', '5', 0,
  /* 137 */ 'I', '5', 0,
  /* 140 */ 'L', '5', 0,
  /* 143 */ 'O', '5', 0,
  /* 146 */ 'F', '1', '6', 0,
  /* 150 */ 'F', '2', '6', 0,
  /* 154 */ 'F', '6', 0,
  /* 157 */ 'G', '6', 0,
  /* 160 */ 'L', '6', 0,
  /* 163 */ 'F', '1', '7', 0,
  /* 167 */ 'F', '2', '7', 0,
  /* 171 */ 'F', '7', 0,
  /* 174 */ 'G', '7', 0,
  /* 177 */ 'I', '7', 0,
  /* 180 */ 'L', '7', 0,
  /* 183 */ 'O', '7', 0,
  /* 186 */ 'F', '1', '8', 0,
  /* 190 */ 'F', '2', '8', 0,
  /* 194 */ 'F', '8', 0,
  /* 197 */ 'F', '1', '9', 0,
  /* 201 */ 'F', '2', '9', 0,
  /* 205 */ 'F', '9', 0,
  /* 208 */ 'F', 'C', 'C', 0,
  /* 212 */ 'I', 'C', 'C', 0,
  /* 216 */ 'F', 'P', 0,
  /* 219 */ 'S', 'P', 0,
  /* 222 */ 'Y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    12, 62, 108, 154, 194, 0, 54, 100, 146, 186, 4, 58, 104, 150, 
    190, 8, 12, 39, 62, 85, 108, 131, 154, 171, 194, 205, 0, 27, 
    54, 77, 100, 123, 146, 163, 186, 197, 4, 31, 58, 81, 104, 127, 
    150, 167, 190, 201, 8, 35, 208, 15, 42, 65, 88, 111, 134, 157, 
    174, 18, 45, 68, 91, 114, 137, 216, 177, 212, 21, 48, 71, 94, 
    117, 140, 160, 180, 24, 51, 74, 97, 120, 143, 219, 183, 222, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
