Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    STATIC

Grammar

Rule 0     S' -> toplevelgroup
Rule 1     toplevelgroup -> funcdecl toplevelgroup
Rule 2     toplevelgroup -> funcdef toplevelgroup
Rule 3     toplevelgroup -> globalvardecl toplevelgroup
Rule 4     toplevelgroup -> classdecl toplevelgroup
Rule 5     toplevelgroup -> empty
Rule 6     funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
Rule 7     funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
Rule 8     type -> INT
Rule 9     type -> FLOAT
Rule 10    type -> STRING
Rule 11    type -> VOID
Rule 12    type -> IDENTIFIER
Rule 13    argdecllist -> empty
Rule 14    argdecllist -> argdecl
Rule 15    argdecllist -> argdecl COMMA argdecllist
Rule 16    argdecl -> type IDENTIFIER
Rule 17    empty -> <empty>
Rule 18    arglist -> empty
Rule 19    arglist -> expression
Rule 20    arglist -> expression COMMA arglist
Rule 21    memberlist -> memberdecl memberlist
Rule 22    memberlist -> empty
Rule 23    memberdecl -> type IDENTIFIER SEMICOLON
Rule 24    classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE
Rule 25    globalvardecl -> type IDENTIFIER SEMICOLON
Rule 26    globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON
Rule 27    globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON
Rule 28    statementlist -> empty
Rule 29    statementlist -> statement statementlist
Rule 30    statement -> expression SEMICOLON
Rule 31    statement -> ifelse
Rule 32    statement -> RETURN castexpression SEMICOLON
Rule 33    statement -> RETURN SEMICOLON
Rule 34    statement -> type IDENTIFIER SEMICOLON
Rule 35    statement -> type IDENTIFIER ASSIGN expression SEMICOLON
Rule 36    statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON
Rule 37    statement -> LOOP LBRACE statementlist RBRACE
Rule 38    statement -> BREAK SEMICOLON
Rule 39    statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
Rule 40    statement -> unaryexpression ASSIGN castexpression SEMICOLON
Rule 41    primaryexpression -> IDENTIFIER
Rule 42    primaryexpression -> NUMBER
Rule 43    primaryexpression -> LPAREN expression RPAREN
Rule 44    postfixexpression -> primaryexpression
Rule 45    postfixexpression -> expression LBRACKET expression RBRACKET
Rule 46    postfixexpression -> expression LPAREN RPAREN
Rule 47    postfixexpression -> expression LPAREN arglist RPAREN
Rule 48    postfixexpression -> castexpression DOT IDENTIFIER
Rule 49    unaryexpression -> postfixexpression
Rule 50    castexpression -> unaryexpression
Rule 51    castexpression -> LPAREN IDENTIFIER RPAREN castexpression
Rule 52    expression -> castexpression ISEQUAL castexpression
Rule 53    expression -> castexpression NOTEQUAL castexpression
Rule 54    expression -> castexpression LESSTHAN castexpression
Rule 55    expression -> castexpression GREATERTHAN castexpression
Rule 56    expression -> castexpression LESSEQUAL castexpression
Rule 57    expression -> castexpression GREATEREQUAL castexpression
Rule 58    expression -> castexpression LOGICAND castexpression
Rule 59    expression -> castexpression LOGICOR castexpression
Rule 60    expression -> castexpression PLUS castexpression
Rule 61    expression -> castexpression MINUS castexpression
Rule 62    expression -> castexpression TIMES castexpression
Rule 63    expression -> castexpression DIVIDE castexpression
Rule 64    expression -> MINUS expression
Rule 65    elifgroup -> empty
Rule 66    elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
Rule 67    optelse -> empty
Rule 68    optelse -> ELSE LBRACE statementlist RBRACE
Rule 69    ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse

Terminals, with rules where they appear

ASSIGN               : 26 27 35 36 40
BREAK                : 38
CLASS                : 24
COMMA                : 15 20
CONST                : 26 36
DIVIDE               : 63
DOT                  : 48
ELIF                 : 66
ELSE                 : 68
FLOAT                : 9
GREATEREQUAL         : 57
GREATERTHAN          : 55
IDENTIFIER           : 6 7 12 16 23 24 25 26 27 34 35 36 41 48 51
IF                   : 69
INT                  : 8
ISEQUAL              : 52
LBRACE               : 7 24 37 39 66 68 69
LBRACKET             : 45
LESSEQUAL            : 56
LESSTHAN             : 54
LOGICAND             : 58
LOGICOR              : 59
LOOP                 : 37
LPAREN               : 6 7 39 43 46 47 51 66 69
MINUS                : 61 64
NOTEQUAL             : 53
NUMBER               : 42
PLUS                 : 60
RBRACE               : 7 24 37 39 66 68 69
RBRACKET             : 45
RETURN               : 32 33
RPAREN               : 6 7 39 43 46 47 51 66 69
SEMICOLON            : 6 23 25 26 27 30 32 33 34 35 36 38 40
STATIC               : 
STRING               : 10
TIMES                : 62
VOID                 : 11
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

argdecl              : 14 15
argdecllist          : 6 7 15
arglist              : 20 47
castexpression       : 32 40 48 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 69
classdecl            : 4
elifgroup            : 66 69
empty                : 5 13 18 22 28 65 67
expression           : 19 20 26 27 30 35 36 39 43 45 45 46 47 64 66
funcdecl             : 1
funcdef              : 2
globalvardecl        : 3
ifelse               : 31
memberdecl           : 21
memberlist           : 21 24
optelse              : 69
postfixexpression    : 49
primaryexpression    : 44
statement            : 29
statementlist        : 7 29 37 39 66 68 69
toplevelgroup        : 1 2 3 4 0
type                 : 6 7 16 23 25 26 27 34 35 36
unaryexpression      : 40 50

Parsing method: LALR

state 0

    (0) S' -> . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . classdecl toplevelgroup
    (5) toplevelgroup -> . empty
    (6) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> . type IDENTIFIER SEMICOLON
    (26) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (27) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (24) classdecl -> . CLASS IDENTIFIER LBRACE memberlist RBRACE
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    CONST           shift and go to state 1
    CLASS           shift and go to state 14
    $end            reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    classdecl                      shift and go to state 4
    funcdecl                       shift and go to state 12
    toplevelgroup                  shift and go to state 8
    funcdef                        shift and go to state 10
    type                           shift and go to state 6
    globalvardecl                  shift and go to state 9
    empty                          shift and go to state 7

state 1

    (26) globalvardecl -> CONST . type IDENTIFIER ASSIGN expression SEMICOLON
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    type                           shift and go to state 15

state 2

    (11) type -> VOID .

    IDENTIFIER      reduce using rule 11 (type -> VOID .)


state 3

    (10) type -> STRING .

    IDENTIFIER      reduce using rule 10 (type -> STRING .)


state 4

    (4) toplevelgroup -> classdecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . classdecl toplevelgroup
    (5) toplevelgroup -> . empty
    (6) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> . type IDENTIFIER SEMICOLON
    (26) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (27) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (24) classdecl -> . CLASS IDENTIFIER LBRACE memberlist RBRACE
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    CONST           shift and go to state 1
    CLASS           shift and go to state 14
    $end            reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    classdecl                      shift and go to state 4
    funcdecl                       shift and go to state 12
    toplevelgroup                  shift and go to state 16
    funcdef                        shift and go to state 10
    type                           shift and go to state 6
    globalvardecl                  shift and go to state 9
    empty                          shift and go to state 7

state 5

    (12) type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 12 (type -> IDENTIFIER .)


state 6

    (6) funcdecl -> type . IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> type . IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> type . IDENTIFIER SEMICOLON
    (27) globalvardecl -> type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 17


state 7

    (5) toplevelgroup -> empty .

    $end            reduce using rule 5 (toplevelgroup -> empty .)


state 8

    (0) S' -> toplevelgroup .



state 9

    (3) toplevelgroup -> globalvardecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . classdecl toplevelgroup
    (5) toplevelgroup -> . empty
    (6) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> . type IDENTIFIER SEMICOLON
    (26) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (27) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (24) classdecl -> . CLASS IDENTIFIER LBRACE memberlist RBRACE
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    CONST           shift and go to state 1
    CLASS           shift and go to state 14
    $end            reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    classdecl                      shift and go to state 4
    funcdecl                       shift and go to state 12
    toplevelgroup                  shift and go to state 18
    funcdef                        shift and go to state 10
    type                           shift and go to state 6
    globalvardecl                  shift and go to state 9
    empty                          shift and go to state 7

state 10

    (2) toplevelgroup -> funcdef . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . classdecl toplevelgroup
    (5) toplevelgroup -> . empty
    (6) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> . type IDENTIFIER SEMICOLON
    (26) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (27) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (24) classdecl -> . CLASS IDENTIFIER LBRACE memberlist RBRACE
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    CONST           shift and go to state 1
    CLASS           shift and go to state 14
    $end            reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    classdecl                      shift and go to state 4
    funcdecl                       shift and go to state 12
    toplevelgroup                  shift and go to state 19
    funcdef                        shift and go to state 10
    type                           shift and go to state 6
    globalvardecl                  shift and go to state 9
    empty                          shift and go to state 7

state 11

    (8) type -> INT .

    IDENTIFIER      reduce using rule 8 (type -> INT .)


state 12

    (1) toplevelgroup -> funcdecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . classdecl toplevelgroup
    (5) toplevelgroup -> . empty
    (6) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> . type IDENTIFIER SEMICOLON
    (26) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (27) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (24) classdecl -> . CLASS IDENTIFIER LBRACE memberlist RBRACE
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    CONST           shift and go to state 1
    CLASS           shift and go to state 14
    $end            reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    classdecl                      shift and go to state 4
    funcdecl                       shift and go to state 12
    toplevelgroup                  shift and go to state 20
    funcdef                        shift and go to state 10
    type                           shift and go to state 6
    globalvardecl                  shift and go to state 9
    empty                          shift and go to state 7

state 13

    (9) type -> FLOAT .

    IDENTIFIER      reduce using rule 9 (type -> FLOAT .)


state 14

    (24) classdecl -> CLASS . IDENTIFIER LBRACE memberlist RBRACE

    IDENTIFIER      shift and go to state 21


state 15

    (26) globalvardecl -> CONST type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 22


state 16

    (4) toplevelgroup -> classdecl toplevelgroup .

    $end            reduce using rule 4 (toplevelgroup -> classdecl toplevelgroup .)


state 17

    (6) funcdecl -> type IDENTIFIER . LPAREN argdecllist RPAREN SEMICOLON
    (7) funcdef -> type IDENTIFIER . LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (25) globalvardecl -> type IDENTIFIER . SEMICOLON
    (27) globalvardecl -> type IDENTIFIER . ASSIGN expression SEMICOLON

    LPAREN          shift and go to state 24
    SEMICOLON       shift and go to state 23
    ASSIGN          shift and go to state 25


state 18

    (3) toplevelgroup -> globalvardecl toplevelgroup .

    $end            reduce using rule 3 (toplevelgroup -> globalvardecl toplevelgroup .)


state 19

    (2) toplevelgroup -> funcdef toplevelgroup .

    $end            reduce using rule 2 (toplevelgroup -> funcdef toplevelgroup .)


state 20

    (1) toplevelgroup -> funcdecl toplevelgroup .

    $end            reduce using rule 1 (toplevelgroup -> funcdecl toplevelgroup .)


state 21

    (24) classdecl -> CLASS IDENTIFIER . LBRACE memberlist RBRACE

    LBRACE          shift and go to state 26


state 22

    (26) globalvardecl -> CONST type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 27


state 23

    (25) globalvardecl -> type IDENTIFIER SEMICOLON .

    CONST           reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    $end            reduce using rule 25 (globalvardecl -> type IDENTIFIER SEMICOLON .)


state 24

    (6) funcdecl -> type IDENTIFIER LPAREN . argdecllist RPAREN SEMICOLON
    (7) funcdef -> type IDENTIFIER LPAREN . argdecllist RPAREN LBRACE statementlist RBRACE
    (13) argdecllist -> . empty
    (14) argdecllist -> . argdecl
    (15) argdecllist -> . argdecl COMMA argdecllist
    (17) empty -> .
    (16) argdecl -> . type IDENTIFIER
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    RPAREN          reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    argdecllist                    shift and go to state 28
    type                           shift and go to state 30
    empty                          shift and go to state 31
    argdecl                        shift and go to state 29

state 25

    (27) globalvardecl -> type IDENTIFIER ASSIGN . expression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    primaryexpression              shift and go to state 36
    expression                     shift and go to state 40
    castexpression                 shift and go to state 33

state 26

    (24) classdecl -> CLASS IDENTIFIER LBRACE . memberlist RBRACE
    (21) memberlist -> . memberdecl memberlist
    (22) memberlist -> . empty
    (23) memberdecl -> . type IDENTIFIER SEMICOLON
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    RBRACE          reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    memberlist                     shift and go to state 41
    type                           shift and go to state 43
    memberdecl                     shift and go to state 42
    empty                          shift and go to state 44

state 27

    (26) globalvardecl -> CONST type IDENTIFIER ASSIGN . expression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    primaryexpression              shift and go to state 36
    expression                     shift and go to state 45
    castexpression                 shift and go to state 33

state 28

    (6) funcdecl -> type IDENTIFIER LPAREN argdecllist . RPAREN SEMICOLON
    (7) funcdef -> type IDENTIFIER LPAREN argdecllist . RPAREN LBRACE statementlist RBRACE

    RPAREN          shift and go to state 46


state 29

    (14) argdecllist -> argdecl .
    (15) argdecllist -> argdecl . COMMA argdecllist

    RPAREN          reduce using rule 14 (argdecllist -> argdecl .)
    COMMA           shift and go to state 47


state 30

    (16) argdecl -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 48


state 31

    (13) argdecllist -> empty .

    RPAREN          reduce using rule 13 (argdecllist -> empty .)


state 32

    (49) unaryexpression -> postfixexpression .

    DOT             reduce using rule 49 (unaryexpression -> postfixexpression .)
    ISEQUAL         reduce using rule 49 (unaryexpression -> postfixexpression .)
    NOTEQUAL        reduce using rule 49 (unaryexpression -> postfixexpression .)
    LESSTHAN        reduce using rule 49 (unaryexpression -> postfixexpression .)
    GREATERTHAN     reduce using rule 49 (unaryexpression -> postfixexpression .)
    LESSEQUAL       reduce using rule 49 (unaryexpression -> postfixexpression .)
    GREATEREQUAL    reduce using rule 49 (unaryexpression -> postfixexpression .)
    LOGICAND        reduce using rule 49 (unaryexpression -> postfixexpression .)
    LOGICOR         reduce using rule 49 (unaryexpression -> postfixexpression .)
    PLUS            reduce using rule 49 (unaryexpression -> postfixexpression .)
    MINUS           reduce using rule 49 (unaryexpression -> postfixexpression .)
    TIMES           reduce using rule 49 (unaryexpression -> postfixexpression .)
    DIVIDE          reduce using rule 49 (unaryexpression -> postfixexpression .)
    SEMICOLON       reduce using rule 49 (unaryexpression -> postfixexpression .)
    LBRACKET        reduce using rule 49 (unaryexpression -> postfixexpression .)
    LPAREN          reduce using rule 49 (unaryexpression -> postfixexpression .)
    RPAREN          reduce using rule 49 (unaryexpression -> postfixexpression .)
    RBRACKET        reduce using rule 49 (unaryexpression -> postfixexpression .)
    COMMA           reduce using rule 49 (unaryexpression -> postfixexpression .)
    ASSIGN          reduce using rule 49 (unaryexpression -> postfixexpression .)


state 33

    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression
    (48) postfixexpression -> castexpression . DOT IDENTIFIER

    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61
    DOT             shift and go to state 55


state 34

    (42) primaryexpression -> NUMBER .

    DOT             reduce using rule 42 (primaryexpression -> NUMBER .)
    ISEQUAL         reduce using rule 42 (primaryexpression -> NUMBER .)
    NOTEQUAL        reduce using rule 42 (primaryexpression -> NUMBER .)
    LESSTHAN        reduce using rule 42 (primaryexpression -> NUMBER .)
    GREATERTHAN     reduce using rule 42 (primaryexpression -> NUMBER .)
    LESSEQUAL       reduce using rule 42 (primaryexpression -> NUMBER .)
    GREATEREQUAL    reduce using rule 42 (primaryexpression -> NUMBER .)
    LOGICAND        reduce using rule 42 (primaryexpression -> NUMBER .)
    LOGICOR         reduce using rule 42 (primaryexpression -> NUMBER .)
    PLUS            reduce using rule 42 (primaryexpression -> NUMBER .)
    MINUS           reduce using rule 42 (primaryexpression -> NUMBER .)
    TIMES           reduce using rule 42 (primaryexpression -> NUMBER .)
    DIVIDE          reduce using rule 42 (primaryexpression -> NUMBER .)
    SEMICOLON       reduce using rule 42 (primaryexpression -> NUMBER .)
    LBRACKET        reduce using rule 42 (primaryexpression -> NUMBER .)
    LPAREN          reduce using rule 42 (primaryexpression -> NUMBER .)
    RPAREN          reduce using rule 42 (primaryexpression -> NUMBER .)
    RBRACKET        reduce using rule 42 (primaryexpression -> NUMBER .)
    COMMA           reduce using rule 42 (primaryexpression -> NUMBER .)
    ASSIGN          reduce using rule 42 (primaryexpression -> NUMBER .)


state 35

    (64) expression -> MINUS . expression
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    expression                     shift and go to state 62
    primaryexpression              shift and go to state 36

state 36

    (44) postfixexpression -> primaryexpression .

    DOT             reduce using rule 44 (postfixexpression -> primaryexpression .)
    ISEQUAL         reduce using rule 44 (postfixexpression -> primaryexpression .)
    NOTEQUAL        reduce using rule 44 (postfixexpression -> primaryexpression .)
    LESSTHAN        reduce using rule 44 (postfixexpression -> primaryexpression .)
    GREATERTHAN     reduce using rule 44 (postfixexpression -> primaryexpression .)
    LESSEQUAL       reduce using rule 44 (postfixexpression -> primaryexpression .)
    GREATEREQUAL    reduce using rule 44 (postfixexpression -> primaryexpression .)
    LOGICAND        reduce using rule 44 (postfixexpression -> primaryexpression .)
    LOGICOR         reduce using rule 44 (postfixexpression -> primaryexpression .)
    PLUS            reduce using rule 44 (postfixexpression -> primaryexpression .)
    MINUS           reduce using rule 44 (postfixexpression -> primaryexpression .)
    TIMES           reduce using rule 44 (postfixexpression -> primaryexpression .)
    DIVIDE          reduce using rule 44 (postfixexpression -> primaryexpression .)
    SEMICOLON       reduce using rule 44 (postfixexpression -> primaryexpression .)
    LBRACKET        reduce using rule 44 (postfixexpression -> primaryexpression .)
    LPAREN          reduce using rule 44 (postfixexpression -> primaryexpression .)
    RPAREN          reduce using rule 44 (postfixexpression -> primaryexpression .)
    RBRACKET        reduce using rule 44 (postfixexpression -> primaryexpression .)
    COMMA           reduce using rule 44 (postfixexpression -> primaryexpression .)
    ASSIGN          reduce using rule 44 (postfixexpression -> primaryexpression .)


state 37

    (50) castexpression -> unaryexpression .

    DOT             reduce using rule 50 (castexpression -> unaryexpression .)
    ISEQUAL         reduce using rule 50 (castexpression -> unaryexpression .)
    NOTEQUAL        reduce using rule 50 (castexpression -> unaryexpression .)
    LESSTHAN        reduce using rule 50 (castexpression -> unaryexpression .)
    GREATERTHAN     reduce using rule 50 (castexpression -> unaryexpression .)
    LESSEQUAL       reduce using rule 50 (castexpression -> unaryexpression .)
    GREATEREQUAL    reduce using rule 50 (castexpression -> unaryexpression .)
    LOGICAND        reduce using rule 50 (castexpression -> unaryexpression .)
    LOGICOR         reduce using rule 50 (castexpression -> unaryexpression .)
    PLUS            reduce using rule 50 (castexpression -> unaryexpression .)
    MINUS           reduce using rule 50 (castexpression -> unaryexpression .)
    TIMES           reduce using rule 50 (castexpression -> unaryexpression .)
    DIVIDE          reduce using rule 50 (castexpression -> unaryexpression .)
    SEMICOLON       reduce using rule 50 (castexpression -> unaryexpression .)
    LBRACKET        reduce using rule 50 (castexpression -> unaryexpression .)
    LPAREN          reduce using rule 50 (castexpression -> unaryexpression .)
    RPAREN          reduce using rule 50 (castexpression -> unaryexpression .)
    RBRACKET        reduce using rule 50 (castexpression -> unaryexpression .)
    COMMA           reduce using rule 50 (castexpression -> unaryexpression .)


state 38

    (41) primaryexpression -> IDENTIFIER .

    DOT             reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICAND        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICOR         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    PLUS            reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    MINUS           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    TIMES           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    DIVIDE          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LBRACKET        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LPAREN          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    RPAREN          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    RBRACKET        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    COMMA           reduce using rule 41 (primaryexpression -> IDENTIFIER .)


state 39

    (51) castexpression -> LPAREN . IDENTIFIER RPAREN castexpression
    (43) primaryexpression -> LPAREN . expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 63
    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    expression                     shift and go to state 64
    primaryexpression              shift and go to state 36

state 40

    (27) globalvardecl -> type IDENTIFIER ASSIGN expression . SEMICOLON
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    SEMICOLON       shift and go to state 65
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 41

    (24) classdecl -> CLASS IDENTIFIER LBRACE memberlist . RBRACE

    RBRACE          shift and go to state 68


state 42

    (21) memberlist -> memberdecl . memberlist
    (21) memberlist -> . memberdecl memberlist
    (22) memberlist -> . empty
    (23) memberdecl -> . type IDENTIFIER SEMICOLON
    (17) empty -> .
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    RBRACE          reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    memberlist                     shift and go to state 69
    type                           shift and go to state 43
    memberdecl                     shift and go to state 42
    empty                          shift and go to state 44

state 43

    (23) memberdecl -> type . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 70


state 44

    (22) memberlist -> empty .

    RBRACE          reduce using rule 22 (memberlist -> empty .)


state 45

    (26) globalvardecl -> CONST type IDENTIFIER ASSIGN expression . SEMICOLON
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    SEMICOLON       shift and go to state 71
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 46

    (6) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN . SEMICOLON
    (7) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN . LBRACE statementlist RBRACE

    SEMICOLON       shift and go to state 72
    LBRACE          shift and go to state 73


state 47

    (15) argdecllist -> argdecl COMMA . argdecllist
    (13) argdecllist -> . empty
    (14) argdecllist -> . argdecl
    (15) argdecllist -> . argdecl COMMA argdecllist
    (17) empty -> .
    (16) argdecl -> . type IDENTIFIER
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    RPAREN          reduce using rule 17 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    argdecllist                    shift and go to state 74
    type                           shift and go to state 30
    empty                          shift and go to state 31
    argdecl                        shift and go to state 29

state 48

    (16) argdecl -> type IDENTIFIER .

    COMMA           reduce using rule 16 (argdecl -> type IDENTIFIER .)
    RPAREN          reduce using rule 16 (argdecl -> type IDENTIFIER .)


state 49

    (53) expression -> castexpression NOTEQUAL . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 75
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 50

    (57) expression -> castexpression GREATEREQUAL . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 77
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 51

    (58) expression -> castexpression LOGICAND . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 78
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 52

    (62) expression -> castexpression TIMES . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 79
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 53

    (54) expression -> castexpression LESSTHAN . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 80
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 54

    (55) expression -> castexpression GREATERTHAN . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 81
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 55

    (48) postfixexpression -> castexpression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 82


state 56

    (52) expression -> castexpression ISEQUAL . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 83
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 57

    (56) expression -> castexpression LESSEQUAL . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 84
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 58

    (60) expression -> castexpression PLUS . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 85
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 59

    (61) expression -> castexpression MINUS . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 86
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 60

    (59) expression -> castexpression LOGICOR . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 87
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 61

    (63) expression -> castexpression DIVIDE . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 88
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 62

    (64) expression -> MINUS expression .
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    LBRACKET        reduce using rule 64 (expression -> MINUS expression .)
    LPAREN          reduce using rule 64 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 64 (expression -> MINUS expression .)
    COMMA           reduce using rule 64 (expression -> MINUS expression .)
    RPAREN          reduce using rule 64 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 64 (expression -> MINUS expression .)

  ! LBRACKET        [ shift and go to state 66 ]
  ! LPAREN          [ shift and go to state 67 ]


state 63

    (51) castexpression -> LPAREN IDENTIFIER . RPAREN castexpression
    (41) primaryexpression -> IDENTIFIER .

    RPAREN          shift and go to state 89
    ISEQUAL         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICAND        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICOR         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    PLUS            reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    MINUS           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    TIMES           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    DIVIDE          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    DOT             reduce using rule 41 (primaryexpression -> IDENTIFIER .)


state 64

    (43) primaryexpression -> LPAREN expression . RPAREN
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    RPAREN          shift and go to state 90
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 65

    (27) globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .

    CONST           reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 27 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)


state 66

    (45) postfixexpression -> expression LBRACKET . expression RBRACKET
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    expression                     shift and go to state 91
    primaryexpression              shift and go to state 36

state 67

    (46) postfixexpression -> expression LPAREN . RPAREN
    (47) postfixexpression -> expression LPAREN . arglist RPAREN
    (18) arglist -> . empty
    (19) arglist -> . expression
    (20) arglist -> . expression COMMA arglist
    (17) empty -> .
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 93
    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

  ! RPAREN          [ reduce using rule 17 (empty -> .) ]

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    arglist                        shift and go to state 92
    expression                     shift and go to state 95
    empty                          shift and go to state 94
    primaryexpression              shift and go to state 36

state 68

    (24) classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .

    CONST           reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    CLASS           reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    INT             reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    FLOAT           reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    STRING          reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    VOID            reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    IDENTIFIER      reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)
    $end            reduce using rule 24 (classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE .)


state 69

    (21) memberlist -> memberdecl memberlist .

    RBRACE          reduce using rule 21 (memberlist -> memberdecl memberlist .)


state 70

    (23) memberdecl -> type IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 96


state 71

    (26) globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .

    CONST           reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    CLASS           reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 26 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)


state 72

    (6) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .

    CONST           reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    CLASS           reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    INT             reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    FLOAT           reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    STRING          reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    VOID            reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    $end            reduce using rule 6 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)


state 73

    (7) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE . statementlist RBRACE
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    expression                     shift and go to state 109
    statementlist                  shift and go to state 98
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    type                           shift and go to state 104
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 74

    (15) argdecllist -> argdecl COMMA argdecllist .

    RPAREN          reduce using rule 15 (argdecllist -> argdecl COMMA argdecllist .)


state 75

    (53) expression -> castexpression NOTEQUAL castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    LPAREN          reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    SEMICOLON       reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    COMMA           reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    RPAREN          reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    RBRACKET        reduce using rule 53 (expression -> castexpression NOTEQUAL castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 76

    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 77

    (57) expression -> castexpression GREATEREQUAL castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    LPAREN          reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    SEMICOLON       reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    COMMA           reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    RPAREN          reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    RBRACKET        reduce using rule 57 (expression -> castexpression GREATEREQUAL castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 78

    (58) expression -> castexpression LOGICAND castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    LPAREN          reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    SEMICOLON       reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    COMMA           reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    RPAREN          reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    RBRACKET        reduce using rule 58 (expression -> castexpression LOGICAND castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 79

    (62) expression -> castexpression TIMES castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    LPAREN          reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    SEMICOLON       reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    COMMA           reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    RPAREN          reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    RBRACKET        reduce using rule 62 (expression -> castexpression TIMES castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 80

    (54) expression -> castexpression LESSTHAN castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    LPAREN          reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    SEMICOLON       reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    COMMA           reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    RPAREN          reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    RBRACKET        reduce using rule 54 (expression -> castexpression LESSTHAN castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 81

    (55) expression -> castexpression GREATERTHAN castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    LPAREN          reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    SEMICOLON       reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    COMMA           reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    RPAREN          reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    RBRACKET        reduce using rule 55 (expression -> castexpression GREATERTHAN castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 82

    (48) postfixexpression -> castexpression DOT IDENTIFIER .

    DOT             reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    ISEQUAL         reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    NOTEQUAL        reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LESSTHAN        reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    GREATERTHAN     reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LESSEQUAL       reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    GREATEREQUAL    reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LOGICAND        reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LOGICOR         reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    PLUS            reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    MINUS           reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    TIMES           reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    LPAREN          reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    RPAREN          reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    COMMA           reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 48 (postfixexpression -> castexpression DOT IDENTIFIER .)


state 83

    (52) expression -> castexpression ISEQUAL castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    LPAREN          reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    SEMICOLON       reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    COMMA           reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    RPAREN          reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    RBRACKET        reduce using rule 52 (expression -> castexpression ISEQUAL castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 84

    (56) expression -> castexpression LESSEQUAL castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    LPAREN          reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    SEMICOLON       reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    COMMA           reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    RPAREN          reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    RBRACKET        reduce using rule 56 (expression -> castexpression LESSEQUAL castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 85

    (60) expression -> castexpression PLUS castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    LPAREN          reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    SEMICOLON       reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    COMMA           reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    RPAREN          reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    RBRACKET        reduce using rule 60 (expression -> castexpression PLUS castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 86

    (61) expression -> castexpression MINUS castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    LPAREN          reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    SEMICOLON       reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    COMMA           reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    RPAREN          reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    RBRACKET        reduce using rule 61 (expression -> castexpression MINUS castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 87

    (59) expression -> castexpression LOGICOR castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    LPAREN          reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    SEMICOLON       reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    COMMA           reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    RPAREN          reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    RBRACKET        reduce using rule 59 (expression -> castexpression LOGICOR castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 88

    (63) expression -> castexpression DIVIDE castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    LBRACKET        reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    LPAREN          reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    SEMICOLON       reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    COMMA           reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    RPAREN          reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    RBRACKET        reduce using rule 63 (expression -> castexpression DIVIDE castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 89

    (51) castexpression -> LPAREN IDENTIFIER RPAREN . castexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 111
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 90

    (43) primaryexpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LOGICAND        reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LOGICOR         reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 43 (primaryexpression -> LPAREN expression RPAREN .)


state 91

    (45) postfixexpression -> expression LBRACKET expression . RBRACKET
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    RBRACKET        shift and go to state 112
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 92

    (47) postfixexpression -> expression LPAREN arglist . RPAREN

    RPAREN          shift and go to state 113


state 93

    (46) postfixexpression -> expression LPAREN RPAREN .

    DOT             reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    ISEQUAL         reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LESSTHAN        reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    GREATERTHAN     reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LOGICAND        reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LOGICOR         reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    PLUS            reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    MINUS           reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    TIMES           reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    LPAREN          reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    RPAREN          reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    COMMA           reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 46 (postfixexpression -> expression LPAREN RPAREN .)


state 94

    (18) arglist -> empty .

    RPAREN          reduce using rule 18 (arglist -> empty .)


state 95

    (19) arglist -> expression .
    (20) arglist -> expression . COMMA arglist
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    RPAREN          reduce using rule 19 (arglist -> expression .)
    COMMA           shift and go to state 114
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 96

    (23) memberdecl -> type IDENTIFIER SEMICOLON .

    INT             reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 23 (memberdecl -> type IDENTIFIER SEMICOLON .)


state 97

    (32) statement -> RETURN . castexpression SEMICOLON
    (33) statement -> RETURN . SEMICOLON
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    SEMICOLON       shift and go to state 116
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 115
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 98

    (7) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 117


state 99

    (39) statement -> WHILE . LPAREN expression RPAREN LBRACE statementlist RBRACE

    LPAREN          shift and go to state 118


state 100

    (36) statement -> CONST . type IDENTIFIER ASSIGN expression SEMICOLON
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 5

    type                           shift and go to state 119

state 101

    (31) statement -> ifelse .

    RETURN          reduce using rule 31 (statement -> ifelse .)
    CONST           reduce using rule 31 (statement -> ifelse .)
    LOOP            reduce using rule 31 (statement -> ifelse .)
    BREAK           reduce using rule 31 (statement -> ifelse .)
    WHILE           reduce using rule 31 (statement -> ifelse .)
    MINUS           reduce using rule 31 (statement -> ifelse .)
    IF              reduce using rule 31 (statement -> ifelse .)
    INT             reduce using rule 31 (statement -> ifelse .)
    FLOAT           reduce using rule 31 (statement -> ifelse .)
    STRING          reduce using rule 31 (statement -> ifelse .)
    VOID            reduce using rule 31 (statement -> ifelse .)
    IDENTIFIER      reduce using rule 31 (statement -> ifelse .)
    LPAREN          reduce using rule 31 (statement -> ifelse .)
    NUMBER          reduce using rule 31 (statement -> ifelse .)
    RBRACE          reduce using rule 31 (statement -> ifelse .)


state 102

    (29) statementlist -> statement . statementlist
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 120
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 103

    (12) type -> IDENTIFIER .
    (41) primaryexpression -> IDENTIFIER .

    IDENTIFIER      reduce using rule 12 (type -> IDENTIFIER .)
    ASSIGN          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICAND        reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    LOGICOR         reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    PLUS            reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    MINUS           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    TIMES           reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    DIVIDE          reduce using rule 41 (primaryexpression -> IDENTIFIER .)
    DOT             reduce using rule 41 (primaryexpression -> IDENTIFIER .)


state 104

    (34) statement -> type . IDENTIFIER SEMICOLON
    (35) statement -> type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 121


state 105

    (28) statementlist -> empty .

    RBRACE          reduce using rule 28 (statementlist -> empty .)


state 106

    (40) statement -> unaryexpression . ASSIGN castexpression SEMICOLON
    (50) castexpression -> unaryexpression .

    ASSIGN          shift and go to state 122
    ISEQUAL         reduce using rule 50 (castexpression -> unaryexpression .)
    NOTEQUAL        reduce using rule 50 (castexpression -> unaryexpression .)
    LESSTHAN        reduce using rule 50 (castexpression -> unaryexpression .)
    GREATERTHAN     reduce using rule 50 (castexpression -> unaryexpression .)
    LESSEQUAL       reduce using rule 50 (castexpression -> unaryexpression .)
    GREATEREQUAL    reduce using rule 50 (castexpression -> unaryexpression .)
    LOGICAND        reduce using rule 50 (castexpression -> unaryexpression .)
    LOGICOR         reduce using rule 50 (castexpression -> unaryexpression .)
    PLUS            reduce using rule 50 (castexpression -> unaryexpression .)
    MINUS           reduce using rule 50 (castexpression -> unaryexpression .)
    TIMES           reduce using rule 50 (castexpression -> unaryexpression .)
    DIVIDE          reduce using rule 50 (castexpression -> unaryexpression .)
    DOT             reduce using rule 50 (castexpression -> unaryexpression .)


state 107

    (69) ifelse -> IF . LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    LPAREN          shift and go to state 123


state 108

    (38) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 124


state 109

    (30) statement -> expression . SEMICOLON
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    SEMICOLON       shift and go to state 125
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 110

    (37) statement -> LOOP . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 126


state 111

    (51) castexpression -> LPAREN IDENTIFIER RPAREN castexpression .
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    LBRACKET        reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    LPAREN          reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    RPAREN          reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    RBRACKET        reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    COMMA           reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .)
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61

  ! DOT             [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! ISEQUAL         [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! NOTEQUAL        [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! LESSTHAN        [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! GREATERTHAN     [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! LESSEQUAL       [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! GREATEREQUAL    [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! LOGICAND        [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! LOGICOR         [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! PLUS            [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! MINUS           [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! TIMES           [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]
  ! DIVIDE          [ reduce using rule 51 (castexpression -> LPAREN IDENTIFIER RPAREN castexpression .) ]


state 112

    (45) postfixexpression -> expression LBRACKET expression RBRACKET .

    DOT             reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LOGICAND        reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LOGICOR         reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 45 (postfixexpression -> expression LBRACKET expression RBRACKET .)


state 113

    (47) postfixexpression -> expression LPAREN arglist RPAREN .

    DOT             reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    ISEQUAL         reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    NOTEQUAL        reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LESSTHAN        reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    GREATERTHAN     reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LESSEQUAL       reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    GREATEREQUAL    reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LOGICAND        reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LOGICOR         reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    PLUS            reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    MINUS           reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    TIMES           reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    SEMICOLON       reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LBRACKET        reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    LPAREN          reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    RBRACKET        reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    COMMA           reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)
    ASSIGN          reduce using rule 47 (postfixexpression -> expression LPAREN arglist RPAREN .)


state 114

    (20) arglist -> expression COMMA . arglist
    (18) arglist -> . empty
    (19) arglist -> . expression
    (20) arglist -> . expression COMMA arglist
    (17) empty -> .
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 17 (empty -> .)
    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    arglist                        shift and go to state 127
    expression                     shift and go to state 95
    empty                          shift and go to state 94
    primaryexpression              shift and go to state 36

state 115

    (32) statement -> RETURN castexpression . SEMICOLON
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    SEMICOLON       shift and go to state 128
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 116

    (33) statement -> RETURN SEMICOLON .

    RETURN          reduce using rule 33 (statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 33 (statement -> RETURN SEMICOLON .)
    LOOP            reduce using rule 33 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 33 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 33 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 33 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 33 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 33 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 33 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 33 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 33 (statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 33 (statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 33 (statement -> RETURN SEMICOLON .)


state 117

    (7) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .

    CONST           reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    CLASS           reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    INT             reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    STRING          reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    VOID            reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    $end            reduce using rule 7 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)


state 118

    (39) statement -> WHILE LPAREN . expression RPAREN LBRACE statementlist RBRACE
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    expression                     shift and go to state 129
    primaryexpression              shift and go to state 36

state 119

    (36) statement -> CONST type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 130


state 120

    (29) statementlist -> statement statementlist .

    RBRACE          reduce using rule 29 (statementlist -> statement statementlist .)


state 121

    (34) statement -> type IDENTIFIER . SEMICOLON
    (35) statement -> type IDENTIFIER . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 132
    ASSIGN          shift and go to state 131


state 122

    (40) statement -> unaryexpression ASSIGN . castexpression SEMICOLON
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 133
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 123

    (69) ifelse -> IF LPAREN . castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34
    MINUS           shift and go to state 35

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 134
    expression                     shift and go to state 76
    primaryexpression              shift and go to state 36

state 124

    (38) statement -> BREAK SEMICOLON .

    RETURN          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    LOOP            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 38 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 38 (statement -> BREAK SEMICOLON .)


state 125

    (30) statement -> expression SEMICOLON .

    RETURN          reduce using rule 30 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 30 (statement -> expression SEMICOLON .)
    LOOP            reduce using rule 30 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 30 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 30 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 30 (statement -> expression SEMICOLON .)
    IF              reduce using rule 30 (statement -> expression SEMICOLON .)
    INT             reduce using rule 30 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 30 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 30 (statement -> expression SEMICOLON .)
    VOID            reduce using rule 30 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 30 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 30 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 30 (statement -> expression SEMICOLON .)


state 126

    (37) statement -> LOOP LBRACE . statementlist RBRACE
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 135
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 127

    (20) arglist -> expression COMMA arglist .

    RPAREN          reduce using rule 20 (arglist -> expression COMMA arglist .)


state 128

    (32) statement -> RETURN castexpression SEMICOLON .

    RETURN          reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    CONST           reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    LOOP            reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    BREAK           reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    MINUS           reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    IF              reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    INT             reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    FLOAT           reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    STRING          reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    VOID            reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    LPAREN          reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    NUMBER          reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)
    RBRACE          reduce using rule 32 (statement -> RETURN castexpression SEMICOLON .)


state 129

    (39) statement -> WHILE LPAREN expression . RPAREN LBRACE statementlist RBRACE
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    RPAREN          shift and go to state 136
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 130

    (36) statement -> CONST type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 137


state 131

    (35) statement -> type IDENTIFIER ASSIGN . expression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    primaryexpression              shift and go to state 36
    expression                     shift and go to state 138
    castexpression                 shift and go to state 33

state 132

    (34) statement -> type IDENTIFIER SEMICOLON .

    RETURN          reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    LOOP            reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 34 (statement -> type IDENTIFIER SEMICOLON .)


state 133

    (40) statement -> unaryexpression ASSIGN castexpression . SEMICOLON
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    SEMICOLON       shift and go to state 139
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 134

    (69) ifelse -> IF LPAREN castexpression . RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (48) postfixexpression -> castexpression . DOT IDENTIFIER
    (52) expression -> castexpression . ISEQUAL castexpression
    (53) expression -> castexpression . NOTEQUAL castexpression
    (54) expression -> castexpression . LESSTHAN castexpression
    (55) expression -> castexpression . GREATERTHAN castexpression
    (56) expression -> castexpression . LESSEQUAL castexpression
    (57) expression -> castexpression . GREATEREQUAL castexpression
    (58) expression -> castexpression . LOGICAND castexpression
    (59) expression -> castexpression . LOGICOR castexpression
    (60) expression -> castexpression . PLUS castexpression
    (61) expression -> castexpression . MINUS castexpression
    (62) expression -> castexpression . TIMES castexpression
    (63) expression -> castexpression . DIVIDE castexpression

    RPAREN          shift and go to state 140
    DOT             shift and go to state 55
    ISEQUAL         shift and go to state 56
    NOTEQUAL        shift and go to state 49
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 57
    GREATEREQUAL    shift and go to state 50
    LOGICAND        shift and go to state 51
    LOGICOR         shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 61


state 135

    (37) statement -> LOOP LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 141


state 136

    (39) statement -> WHILE LPAREN expression RPAREN . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 142


state 137

    (36) statement -> CONST type IDENTIFIER ASSIGN . expression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    primaryexpression              shift and go to state 36
    expression                     shift and go to state 143
    castexpression                 shift and go to state 33

state 138

    (35) statement -> type IDENTIFIER ASSIGN expression . SEMICOLON
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    SEMICOLON       shift and go to state 144
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 139

    (40) statement -> unaryexpression ASSIGN castexpression SEMICOLON .

    RETURN          reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    CONST           reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    LOOP            reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    MINUS           reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    IF              reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    INT             reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    STRING          reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    VOID            reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    LPAREN          reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    NUMBER          reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)
    RBRACE          reduce using rule 40 (statement -> unaryexpression ASSIGN castexpression SEMICOLON .)


state 140

    (69) ifelse -> IF LPAREN castexpression RPAREN . LBRACE statementlist RBRACE elifgroup optelse

    LBRACE          shift and go to state 145


state 141

    (37) statement -> LOOP LBRACE statementlist RBRACE .

    RETURN          reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    CONST           reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    IF              reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    INT             reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    STRING          reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    VOID            reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 37 (statement -> LOOP LBRACE statementlist RBRACE .)


state 142

    (39) statement -> WHILE LPAREN expression RPAREN LBRACE . statementlist RBRACE
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 146
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 143

    (36) statement -> CONST type IDENTIFIER ASSIGN expression . SEMICOLON
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    SEMICOLON       shift and go to state 147
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 144

    (35) statement -> type IDENTIFIER ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 35 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)


state 145

    (69) ifelse -> IF LPAREN castexpression RPAREN LBRACE . statementlist RBRACE elifgroup optelse
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 148
    ifelse                         shift and go to state 101
    empty                          shift and go to state 105
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    primaryexpression              shift and go to state 36

state 146

    (39) statement -> WHILE LPAREN expression RPAREN LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 149


state 147

    (36) statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 36 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)


state 148

    (69) ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist . RBRACE elifgroup optelse

    RBRACE          shift and go to state 150


state 149

    (39) statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .

    RETURN          reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    CONST           reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    IF              reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    INT             reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    STRING          reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    VOID            reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 39 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)


state 150

    (69) ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE . elifgroup optelse
    (65) elifgroup -> . empty
    (66) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (17) empty -> .

    ELIF            shift and go to state 151
    ELSE            reduce using rule 17 (empty -> .)
    RETURN          reduce using rule 17 (empty -> .)
    CONST           reduce using rule 17 (empty -> .)
    LOOP            reduce using rule 17 (empty -> .)
    BREAK           reduce using rule 17 (empty -> .)
    WHILE           reduce using rule 17 (empty -> .)
    MINUS           reduce using rule 17 (empty -> .)
    IF              reduce using rule 17 (empty -> .)
    INT             reduce using rule 17 (empty -> .)
    FLOAT           reduce using rule 17 (empty -> .)
    STRING          reduce using rule 17 (empty -> .)
    VOID            reduce using rule 17 (empty -> .)
    IDENTIFIER      reduce using rule 17 (empty -> .)
    LPAREN          reduce using rule 17 (empty -> .)
    NUMBER          reduce using rule 17 (empty -> .)
    RBRACE          reduce using rule 17 (empty -> .)

    empty                          shift and go to state 152
    elifgroup                      shift and go to state 153

state 151

    (66) elifgroup -> ELIF . LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup

    LPAREN          shift and go to state 154


state 152

    (65) elifgroup -> empty .

    ELSE            reduce using rule 65 (elifgroup -> empty .)
    RETURN          reduce using rule 65 (elifgroup -> empty .)
    CONST           reduce using rule 65 (elifgroup -> empty .)
    LOOP            reduce using rule 65 (elifgroup -> empty .)
    BREAK           reduce using rule 65 (elifgroup -> empty .)
    WHILE           reduce using rule 65 (elifgroup -> empty .)
    MINUS           reduce using rule 65 (elifgroup -> empty .)
    IF              reduce using rule 65 (elifgroup -> empty .)
    INT             reduce using rule 65 (elifgroup -> empty .)
    FLOAT           reduce using rule 65 (elifgroup -> empty .)
    STRING          reduce using rule 65 (elifgroup -> empty .)
    VOID            reduce using rule 65 (elifgroup -> empty .)
    IDENTIFIER      reduce using rule 65 (elifgroup -> empty .)
    LPAREN          reduce using rule 65 (elifgroup -> empty .)
    NUMBER          reduce using rule 65 (elifgroup -> empty .)
    RBRACE          reduce using rule 65 (elifgroup -> empty .)


state 153

    (69) ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup . optelse
    (67) optelse -> . empty
    (68) optelse -> . ELSE LBRACE statementlist RBRACE
    (17) empty -> .

    ELSE            shift and go to state 155
    RETURN          reduce using rule 17 (empty -> .)
    CONST           reduce using rule 17 (empty -> .)
    LOOP            reduce using rule 17 (empty -> .)
    BREAK           reduce using rule 17 (empty -> .)
    WHILE           reduce using rule 17 (empty -> .)
    MINUS           reduce using rule 17 (empty -> .)
    IF              reduce using rule 17 (empty -> .)
    INT             reduce using rule 17 (empty -> .)
    FLOAT           reduce using rule 17 (empty -> .)
    STRING          reduce using rule 17 (empty -> .)
    VOID            reduce using rule 17 (empty -> .)
    IDENTIFIER      reduce using rule 17 (empty -> .)
    LPAREN          reduce using rule 17 (empty -> .)
    NUMBER          reduce using rule 17 (empty -> .)
    RBRACE          reduce using rule 17 (empty -> .)

    empty                          shift and go to state 157
    optelse                        shift and go to state 156

state 154

    (66) elifgroup -> ELIF LPAREN . expression RPAREN LBRACE statementlist RBRACE elifgroup
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (49) unaryexpression -> . postfixexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 35
    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 38
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 37
    castexpression                 shift and go to state 33
    expression                     shift and go to state 158
    primaryexpression              shift and go to state 36

state 155

    (68) optelse -> ELSE . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 159


state 156

    (69) ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .

    RETURN          reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    CONST           reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    LOOP            reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    BREAK           reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    WHILE           reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    MINUS           reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IF              reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    INT             reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    FLOAT           reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    STRING          reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    VOID            reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IDENTIFIER      reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    LPAREN          reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    NUMBER          reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    RBRACE          reduce using rule 69 (ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)


state 157

    (67) optelse -> empty .

    RETURN          reduce using rule 67 (optelse -> empty .)
    CONST           reduce using rule 67 (optelse -> empty .)
    LOOP            reduce using rule 67 (optelse -> empty .)
    BREAK           reduce using rule 67 (optelse -> empty .)
    WHILE           reduce using rule 67 (optelse -> empty .)
    MINUS           reduce using rule 67 (optelse -> empty .)
    IF              reduce using rule 67 (optelse -> empty .)
    INT             reduce using rule 67 (optelse -> empty .)
    FLOAT           reduce using rule 67 (optelse -> empty .)
    STRING          reduce using rule 67 (optelse -> empty .)
    VOID            reduce using rule 67 (optelse -> empty .)
    IDENTIFIER      reduce using rule 67 (optelse -> empty .)
    LPAREN          reduce using rule 67 (optelse -> empty .)
    NUMBER          reduce using rule 67 (optelse -> empty .)
    RBRACE          reduce using rule 67 (optelse -> empty .)


state 158

    (66) elifgroup -> ELIF LPAREN expression . RPAREN LBRACE statementlist RBRACE elifgroup
    (45) postfixexpression -> expression . LBRACKET expression RBRACKET
    (46) postfixexpression -> expression . LPAREN RPAREN
    (47) postfixexpression -> expression . LPAREN arglist RPAREN

    RPAREN          shift and go to state 160
    LBRACKET        shift and go to state 66
    LPAREN          shift and go to state 67


state 159

    (68) optelse -> ELSE LBRACE . statementlist RBRACE
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 161
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 160

    (66) elifgroup -> ELIF LPAREN expression RPAREN . LBRACE statementlist RBRACE elifgroup

    LBRACE          shift and go to state 162


state 161

    (68) optelse -> ELSE LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 163


state 162

    (66) elifgroup -> ELIF LPAREN expression RPAREN LBRACE . statementlist RBRACE elifgroup
    (28) statementlist -> . empty
    (29) statementlist -> . statement statementlist
    (17) empty -> .
    (30) statement -> . expression SEMICOLON
    (31) statement -> . ifelse
    (32) statement -> . RETURN castexpression SEMICOLON
    (33) statement -> . RETURN SEMICOLON
    (34) statement -> . type IDENTIFIER SEMICOLON
    (35) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (36) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (37) statement -> . LOOP LBRACE statementlist RBRACE
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (40) statement -> . unaryexpression ASSIGN castexpression SEMICOLON
    (52) expression -> . castexpression ISEQUAL castexpression
    (53) expression -> . castexpression NOTEQUAL castexpression
    (54) expression -> . castexpression LESSTHAN castexpression
    (55) expression -> . castexpression GREATERTHAN castexpression
    (56) expression -> . castexpression LESSEQUAL castexpression
    (57) expression -> . castexpression GREATEREQUAL castexpression
    (58) expression -> . castexpression LOGICAND castexpression
    (59) expression -> . castexpression LOGICOR castexpression
    (60) expression -> . castexpression PLUS castexpression
    (61) expression -> . castexpression MINUS castexpression
    (62) expression -> . castexpression TIMES castexpression
    (63) expression -> . castexpression DIVIDE castexpression
    (64) expression -> . MINUS expression
    (69) ifelse -> . IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . STRING
    (11) type -> . VOID
    (12) type -> . IDENTIFIER
    (49) unaryexpression -> . postfixexpression
    (50) castexpression -> . unaryexpression
    (51) castexpression -> . LPAREN IDENTIFIER RPAREN castexpression
    (44) postfixexpression -> . primaryexpression
    (45) postfixexpression -> . expression LBRACKET expression RBRACKET
    (46) postfixexpression -> . expression LPAREN RPAREN
    (47) postfixexpression -> . expression LPAREN arglist RPAREN
    (48) postfixexpression -> . castexpression DOT IDENTIFIER
    (41) primaryexpression -> . IDENTIFIER
    (42) primaryexpression -> . NUMBER
    (43) primaryexpression -> . LPAREN expression RPAREN

    RBRACE          reduce using rule 17 (empty -> .)
    RETURN          shift and go to state 97
    CONST           shift and go to state 100
    LOOP            shift and go to state 110
    BREAK           shift and go to state 108
    WHILE           shift and go to state 99
    MINUS           shift and go to state 35
    IF              shift and go to state 107
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 3
    VOID            shift and go to state 2
    IDENTIFIER      shift and go to state 103
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 34

    postfixexpression              shift and go to state 32
    unaryexpression                shift and go to state 106
    castexpression                 shift and go to state 33
    type                           shift and go to state 104
    statementlist                  shift and go to state 164
    ifelse                         shift and go to state 101
    statement                      shift and go to state 102
    expression                     shift and go to state 109
    empty                          shift and go to state 105
    primaryexpression              shift and go to state 36

state 163

    (68) optelse -> ELSE LBRACE statementlist RBRACE .

    RETURN          reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    CONST           reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IF              reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    INT             reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    STRING          reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    VOID            reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 68 (optelse -> ELSE LBRACE statementlist RBRACE .)


state 164

    (66) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist . RBRACE elifgroup

    RBRACE          shift and go to state 165


state 165

    (66) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE . elifgroup
    (65) elifgroup -> . empty
    (66) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (17) empty -> .

    ELIF            shift and go to state 151
    ELSE            reduce using rule 17 (empty -> .)
    RETURN          reduce using rule 17 (empty -> .)
    CONST           reduce using rule 17 (empty -> .)
    LOOP            reduce using rule 17 (empty -> .)
    BREAK           reduce using rule 17 (empty -> .)
    WHILE           reduce using rule 17 (empty -> .)
    MINUS           reduce using rule 17 (empty -> .)
    IF              reduce using rule 17 (empty -> .)
    INT             reduce using rule 17 (empty -> .)
    FLOAT           reduce using rule 17 (empty -> .)
    STRING          reduce using rule 17 (empty -> .)
    VOID            reduce using rule 17 (empty -> .)
    IDENTIFIER      reduce using rule 17 (empty -> .)
    LPAREN          reduce using rule 17 (empty -> .)
    NUMBER          reduce using rule 17 (empty -> .)
    RBRACE          reduce using rule 17 (empty -> .)

    empty                          shift and go to state 152
    elifgroup                      shift and go to state 166

state 166

    (66) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .

    ELSE            reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RETURN          reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    CONST           reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    LOOP            reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    BREAK           reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    WHILE           reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    MINUS           reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IF              reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    INT             reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    FLOAT           reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    STRING          reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    VOID            reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IDENTIFIER      reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    LPAREN          reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    NUMBER          reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RBRACE          reduce using rule 66 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for DOT in state 111 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
