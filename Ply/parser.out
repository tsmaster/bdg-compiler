Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    STATIC

Grammar

Rule 0     S' -> toplevelgroup
Rule 1     toplevelgroup -> funcdecl toplevelgroup
Rule 2     toplevelgroup -> funcdef toplevelgroup
Rule 3     toplevelgroup -> globalvardecl toplevelgroup
Rule 4     toplevelgroup -> empty
Rule 5     funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
Rule 6     funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> STRING
Rule 10    type -> VOID
Rule 11    type -> IDENTIFIER
Rule 12    argdecllist -> empty
Rule 13    argdecllist -> argdecl
Rule 14    argdecllist -> argdecl COMMA argdecllist
Rule 15    argdecl -> type IDENTIFIER
Rule 16    empty -> <empty>
Rule 17    arglist -> empty
Rule 18    arglist -> expression
Rule 19    arglist -> expression COMMA arglist
Rule 20    globalvardecl -> type IDENTIFIER SEMICOLON
Rule 21    globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON
Rule 22    globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON
Rule 23    statementlist -> empty
Rule 24    statementlist -> statement statementlist
Rule 25    statement -> expression SEMICOLON
Rule 26    statement -> ifelse
Rule 27    statement -> RETURN expression SEMICOLON
Rule 28    statement -> type IDENTIFIER SEMICOLON
Rule 29    statement -> type IDENTIFIER ASSIGN expression SEMICOLON
Rule 30    statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON
Rule 31    statement -> LOOP LBRACE statementlist RBRACE
Rule 32    statement -> BREAK SEMICOLON
Rule 33    statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
Rule 34    statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 35    expression -> LPAREN expression RPAREN
Rule 36    expression -> IDENTIFIER LPAREN arglist RPAREN
Rule 37    expression -> expression ISEQUAL expression
Rule 38    expression -> expression NOTEQUAL expression
Rule 39    expression -> expression LESSTHAN expression
Rule 40    expression -> expression GREATERTHAN expression
Rule 41    expression -> expression LESSEQUAL expression
Rule 42    expression -> expression GREATEREQUAL expression
Rule 43    expression -> expression LOGICAND expression
Rule 44    expression -> expression LOGICOR expression
Rule 45    expression -> expression PLUS expression
Rule 46    expression -> expression MINUS expression
Rule 47    expression -> expression TIMES expression
Rule 48    expression -> expression DIVIDE expression
Rule 49    expression -> IDENTIFIER
Rule 50    expression -> MINUS expression
Rule 51    expression -> NUMBER
Rule 52    elifgroup -> empty
Rule 53    elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
Rule 54    optelse -> empty
Rule 55    optelse -> ELSE LBRACE statementlist RBRACE
Rule 56    ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

Terminals, with rules where they appear

ASSIGN               : 21 22 29 30 34
BREAK                : 32
COMMA                : 14 19
CONST                : 21 30
DIVIDE               : 48
ELIF                 : 53
ELSE                 : 55
FLOAT                : 8
GREATEREQUAL         : 42
GREATERTHAN          : 40
IDENTIFIER           : 5 6 11 15 20 21 22 28 29 30 34 36 49
IF                   : 56
INT                  : 7
ISEQUAL              : 37
LBRACE               : 6 31 33 53 55 56
LESSEQUAL            : 41
LESSTHAN             : 39
LOGICAND             : 43
LOGICOR              : 44
LOOP                 : 31
LPAREN               : 5 6 33 35 36 53 56
MINUS                : 46 50
NOTEQUAL             : 38
NUMBER               : 51
PLUS                 : 45
RBRACE               : 6 31 33 53 55 56
RETURN               : 27
RPAREN               : 5 6 33 35 36 53 56
SEMICOLON            : 5 20 21 22 25 27 28 29 30 32 34
STATIC               : 
STRING               : 9
TIMES                : 47
VOID                 : 10
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

argdecl              : 13 14
argdecllist          : 5 6 14
arglist              : 19 36
elifgroup            : 53 56
empty                : 4 12 17 23 52 54
expression           : 18 19 21 22 25 27 29 30 33 34 35 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 50 53 56
funcdecl             : 1
funcdef              : 2
globalvardecl        : 3
ifelse               : 26
optelse              : 56
statement            : 24
statementlist        : 6 24 31 33 53 55 56
toplevelgroup        : 1 2 3 0
type                 : 5 6 15 20 21 22 28 29 30

Parsing method: LALR

state 0

    (0) S' -> . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . empty
    (5) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> . type IDENTIFIER SEMICOLON
    (21) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (22) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (16) empty -> .
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    CONST           shift and go to state 7
    $end            reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    funcdecl                       shift and go to state 3
    toplevelgroup                  shift and go to state 4
    funcdef                        shift and go to state 6
    type                           shift and go to state 9
    globalvardecl                  shift and go to state 10
    empty                          shift and go to state 11

state 1

    (8) type -> FLOAT .

    IDENTIFIER      reduce using rule 8 (type -> FLOAT .)


state 2

    (7) type -> INT .

    IDENTIFIER      reduce using rule 7 (type -> INT .)


state 3

    (1) toplevelgroup -> funcdecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . empty
    (5) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> . type IDENTIFIER SEMICOLON
    (21) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (22) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (16) empty -> .
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    CONST           shift and go to state 7
    $end            reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    funcdecl                       shift and go to state 3
    toplevelgroup                  shift and go to state 13
    funcdef                        shift and go to state 6
    type                           shift and go to state 9
    globalvardecl                  shift and go to state 10
    empty                          shift and go to state 11

state 4

    (0) S' -> toplevelgroup .



state 5

    (10) type -> VOID .

    IDENTIFIER      reduce using rule 10 (type -> VOID .)


state 6

    (2) toplevelgroup -> funcdef . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . empty
    (5) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> . type IDENTIFIER SEMICOLON
    (21) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (22) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (16) empty -> .
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    CONST           shift and go to state 7
    $end            reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    funcdecl                       shift and go to state 3
    toplevelgroup                  shift and go to state 14
    funcdef                        shift and go to state 6
    type                           shift and go to state 9
    globalvardecl                  shift and go to state 10
    empty                          shift and go to state 11

state 7

    (21) globalvardecl -> CONST . type IDENTIFIER ASSIGN expression SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    type                           shift and go to state 15

state 8

    (11) type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 11 (type -> IDENTIFIER .)


state 9

    (5) funcdecl -> type . IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> type . IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> type . IDENTIFIER SEMICOLON
    (22) globalvardecl -> type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 16


state 10

    (3) toplevelgroup -> globalvardecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . globalvardecl toplevelgroup
    (4) toplevelgroup -> . empty
    (5) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> . type IDENTIFIER SEMICOLON
    (21) globalvardecl -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (22) globalvardecl -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (16) empty -> .
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    CONST           shift and go to state 7
    $end            reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    funcdecl                       shift and go to state 3
    toplevelgroup                  shift and go to state 17
    funcdef                        shift and go to state 6
    type                           shift and go to state 9
    globalvardecl                  shift and go to state 10
    empty                          shift and go to state 11

state 11

    (4) toplevelgroup -> empty .

    $end            reduce using rule 4 (toplevelgroup -> empty .)


state 12

    (9) type -> STRING .

    IDENTIFIER      reduce using rule 9 (type -> STRING .)


state 13

    (1) toplevelgroup -> funcdecl toplevelgroup .

    $end            reduce using rule 1 (toplevelgroup -> funcdecl toplevelgroup .)


state 14

    (2) toplevelgroup -> funcdef toplevelgroup .

    $end            reduce using rule 2 (toplevelgroup -> funcdef toplevelgroup .)


state 15

    (21) globalvardecl -> CONST type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 18


state 16

    (5) funcdecl -> type IDENTIFIER . LPAREN argdecllist RPAREN SEMICOLON
    (6) funcdef -> type IDENTIFIER . LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (20) globalvardecl -> type IDENTIFIER . SEMICOLON
    (22) globalvardecl -> type IDENTIFIER . ASSIGN expression SEMICOLON

    LPAREN          shift and go to state 20
    SEMICOLON       shift and go to state 19
    ASSIGN          shift and go to state 21


state 17

    (3) toplevelgroup -> globalvardecl toplevelgroup .

    $end            reduce using rule 3 (toplevelgroup -> globalvardecl toplevelgroup .)


state 18

    (21) globalvardecl -> CONST type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 22


state 19

    (20) globalvardecl -> type IDENTIFIER SEMICOLON .

    CONST           reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)
    $end            reduce using rule 20 (globalvardecl -> type IDENTIFIER SEMICOLON .)


state 20

    (5) funcdecl -> type IDENTIFIER LPAREN . argdecllist RPAREN SEMICOLON
    (6) funcdef -> type IDENTIFIER LPAREN . argdecllist RPAREN LBRACE statementlist RBRACE
    (12) argdecllist -> . empty
    (13) argdecllist -> . argdecl
    (14) argdecllist -> . argdecl COMMA argdecllist
    (16) empty -> .
    (15) argdecl -> . type IDENTIFIER
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RPAREN          reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    argdecllist                    shift and go to state 23
    type                           shift and go to state 25
    empty                          shift and go to state 26
    argdecl                        shift and go to state 24

state 21

    (22) globalvardecl -> type IDENTIFIER ASSIGN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 31

state 22

    (21) globalvardecl -> CONST type IDENTIFIER ASSIGN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 32

state 23

    (5) funcdecl -> type IDENTIFIER LPAREN argdecllist . RPAREN SEMICOLON
    (6) funcdef -> type IDENTIFIER LPAREN argdecllist . RPAREN LBRACE statementlist RBRACE

    RPAREN          shift and go to state 33


state 24

    (13) argdecllist -> argdecl .
    (14) argdecllist -> argdecl . COMMA argdecllist

    RPAREN          reduce using rule 13 (argdecllist -> argdecl .)
    COMMA           shift and go to state 34


state 25

    (15) argdecl -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 35


state 26

    (12) argdecllist -> empty .

    RPAREN          reduce using rule 12 (argdecllist -> empty .)


state 27

    (51) expression -> NUMBER .

    SEMICOLON       reduce using rule 51 (expression -> NUMBER .)
    ISEQUAL         reduce using rule 51 (expression -> NUMBER .)
    NOTEQUAL        reduce using rule 51 (expression -> NUMBER .)
    LESSTHAN        reduce using rule 51 (expression -> NUMBER .)
    GREATERTHAN     reduce using rule 51 (expression -> NUMBER .)
    LESSEQUAL       reduce using rule 51 (expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 51 (expression -> NUMBER .)
    LOGICAND        reduce using rule 51 (expression -> NUMBER .)
    LOGICOR         reduce using rule 51 (expression -> NUMBER .)
    PLUS            reduce using rule 51 (expression -> NUMBER .)
    MINUS           reduce using rule 51 (expression -> NUMBER .)
    TIMES           reduce using rule 51 (expression -> NUMBER .)
    DIVIDE          reduce using rule 51 (expression -> NUMBER .)
    RPAREN          reduce using rule 51 (expression -> NUMBER .)
    COMMA           reduce using rule 51 (expression -> NUMBER .)


state 28

    (50) expression -> MINUS . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 36

state 29

    (35) expression -> LPAREN . expression RPAREN
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 37

state 30

    (36) expression -> IDENTIFIER . LPAREN arglist RPAREN
    (49) expression -> IDENTIFIER .

    LPAREN          shift and go to state 38
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 49 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 49 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 49 (expression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 49 (expression -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 49 (expression -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 49 (expression -> IDENTIFIER .)
    LOGICAND        reduce using rule 49 (expression -> IDENTIFIER .)
    LOGICOR         reduce using rule 49 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 49 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 49 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 49 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER .)


state 31

    (22) globalvardecl -> type IDENTIFIER ASSIGN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 42
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 32

    (21) globalvardecl -> CONST type IDENTIFIER ASSIGN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 52
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 33

    (5) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN . SEMICOLON
    (6) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN . LBRACE statementlist RBRACE

    SEMICOLON       shift and go to state 53
    LBRACE          shift and go to state 54


state 34

    (14) argdecllist -> argdecl COMMA . argdecllist
    (12) argdecllist -> . empty
    (13) argdecllist -> . argdecl
    (14) argdecllist -> . argdecl COMMA argdecllist
    (16) empty -> .
    (15) argdecl -> . type IDENTIFIER
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RPAREN          reduce using rule 16 (empty -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    argdecllist                    shift and go to state 55
    type                           shift and go to state 25
    empty                          shift and go to state 26
    argdecl                        shift and go to state 24

state 35

    (15) argdecl -> type IDENTIFIER .

    COMMA           reduce using rule 15 (argdecl -> type IDENTIFIER .)
    RPAREN          reduce using rule 15 (argdecl -> type IDENTIFIER .)


state 36

    (50) expression -> MINUS expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 50 (expression -> MINUS expression .)
    ISEQUAL         reduce using rule 50 (expression -> MINUS expression .)
    NOTEQUAL        reduce using rule 50 (expression -> MINUS expression .)
    LESSTHAN        reduce using rule 50 (expression -> MINUS expression .)
    GREATERTHAN     reduce using rule 50 (expression -> MINUS expression .)
    LESSEQUAL       reduce using rule 50 (expression -> MINUS expression .)
    GREATEREQUAL    reduce using rule 50 (expression -> MINUS expression .)
    LOGICAND        reduce using rule 50 (expression -> MINUS expression .)
    LOGICOR         reduce using rule 50 (expression -> MINUS expression .)
    PLUS            reduce using rule 50 (expression -> MINUS expression .)
    MINUS           reduce using rule 50 (expression -> MINUS expression .)
    TIMES           reduce using rule 50 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 50 (expression -> MINUS expression .)
    RPAREN          reduce using rule 50 (expression -> MINUS expression .)
    COMMA           reduce using rule 50 (expression -> MINUS expression .)

  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 44 ]
  ! TIMES           [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 41 ]


state 37

    (35) expression -> LPAREN expression . RPAREN
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 56
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 38

    (36) expression -> IDENTIFIER LPAREN . arglist RPAREN
    (17) arglist -> . empty
    (18) arglist -> . expression
    (19) arglist -> . expression COMMA arglist
    (16) empty -> .
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    RPAREN          reduce using rule 16 (empty -> .)
    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    arglist                        shift and go to state 57
    expression                     shift and go to state 58
    empty                          shift and go to state 59

state 39

    (38) expression -> expression NOTEQUAL . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 60

state 40

    (42) expression -> expression GREATEREQUAL . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 61

state 41

    (48) expression -> expression DIVIDE . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 62

state 42

    (22) globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .

    CONST           reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 22 (globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON .)


state 43

    (43) expression -> expression LOGICAND . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 63

state 44

    (46) expression -> expression MINUS . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 64

state 45

    (47) expression -> expression TIMES . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 65

state 46

    (39) expression -> expression LESSTHAN . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 66

state 47

    (40) expression -> expression GREATERTHAN . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 67

state 48

    (37) expression -> expression ISEQUAL . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 68

state 49

    (41) expression -> expression LESSEQUAL . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 69

state 50

    (45) expression -> expression PLUS . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 70

state 51

    (44) expression -> expression LOGICOR . expression
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 71

state 52

    (21) globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .

    CONST           reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 21 (globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)


state 53

    (5) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .

    CONST           reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    INT             reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    FLOAT           reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    STRING          reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    VOID            reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    $end            reduce using rule 5 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)


state 54

    (6) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE . statementlist RBRACE
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    expression                     shift and go to state 83
    statementlist                  shift and go to state 73
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    type                           shift and go to state 79
    empty                          shift and go to state 80

state 55

    (14) argdecllist -> argdecl COMMA argdecllist .

    RPAREN          reduce using rule 14 (argdecllist -> argdecl COMMA argdecllist .)


state 56

    (35) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LOGICAND        reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LOGICOR         reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 35 (expression -> LPAREN expression RPAREN .)


state 57

    (36) expression -> IDENTIFIER LPAREN arglist . RPAREN

    RPAREN          shift and go to state 85


state 58

    (18) arglist -> expression .
    (19) arglist -> expression . COMMA arglist
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 18 (arglist -> expression .)
    COMMA           shift and go to state 86
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 59

    (17) arglist -> empty .

    RPAREN          reduce using rule 17 (arglist -> empty .)


state 60

    (38) expression -> expression NOTEQUAL expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    ISEQUAL         reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    LESSTHAN        reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    GREATERTHAN     reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    LESSEQUAL       reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    GREATEREQUAL    reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    LOGICAND        reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    LOGICOR         reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 38 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 38 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression NOTEQUAL expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression NOTEQUAL expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 61

    (42) expression -> expression GREATEREQUAL expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    ISEQUAL         reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    NOTEQUAL        reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    LESSTHAN        reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    GREATERTHAN     reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    LESSEQUAL       reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    GREATEREQUAL    reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    LOGICAND        reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    LOGICOR         reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    RPAREN          reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    COMMA           reduce using rule 42 (expression -> expression GREATEREQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 42 (expression -> expression GREATEREQUAL expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression GREATEREQUAL expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression GREATEREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression GREATEREQUAL expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 62

    (48) expression -> expression DIVIDE expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 48 (expression -> expression DIVIDE expression .)
    ISEQUAL         reduce using rule 48 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 48 (expression -> expression DIVIDE expression .)
    LESSTHAN        reduce using rule 48 (expression -> expression DIVIDE expression .)
    GREATERTHAN     reduce using rule 48 (expression -> expression DIVIDE expression .)
    LESSEQUAL       reduce using rule 48 (expression -> expression DIVIDE expression .)
    GREATEREQUAL    reduce using rule 48 (expression -> expression DIVIDE expression .)
    LOGICAND        reduce using rule 48 (expression -> expression DIVIDE expression .)
    LOGICOR         reduce using rule 48 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 48 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 48 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 48 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 48 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 48 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 48 (expression -> expression DIVIDE expression .)

  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 44 ]
  ! TIMES           [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 41 ]


state 63

    (43) expression -> expression LOGICAND expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 43 (expression -> expression LOGICAND expression .)
    RPAREN          reduce using rule 43 (expression -> expression LOGICAND expression .)
    COMMA           reduce using rule 43 (expression -> expression LOGICAND expression .)
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! ISEQUAL         [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! LESSEQUAL       [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! LOGICAND        [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! LOGICOR         [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression LOGICAND expression .) ]


state 64

    (46) expression -> expression MINUS expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 46 (expression -> expression MINUS expression .)
    ISEQUAL         reduce using rule 46 (expression -> expression MINUS expression .)
    NOTEQUAL        reduce using rule 46 (expression -> expression MINUS expression .)
    LESSTHAN        reduce using rule 46 (expression -> expression MINUS expression .)
    GREATERTHAN     reduce using rule 46 (expression -> expression MINUS expression .)
    LESSEQUAL       reduce using rule 46 (expression -> expression MINUS expression .)
    GREATEREQUAL    reduce using rule 46 (expression -> expression MINUS expression .)
    LOGICAND        reduce using rule 46 (expression -> expression MINUS expression .)
    LOGICOR         reduce using rule 46 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 46 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 46 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 46 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 46 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! TIMES           [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 44 ]


state 65

    (47) expression -> expression TIMES expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 47 (expression -> expression TIMES expression .)
    ISEQUAL         reduce using rule 47 (expression -> expression TIMES expression .)
    NOTEQUAL        reduce using rule 47 (expression -> expression TIMES expression .)
    LESSTHAN        reduce using rule 47 (expression -> expression TIMES expression .)
    GREATERTHAN     reduce using rule 47 (expression -> expression TIMES expression .)
    LESSEQUAL       reduce using rule 47 (expression -> expression TIMES expression .)
    GREATEREQUAL    reduce using rule 47 (expression -> expression TIMES expression .)
    LOGICAND        reduce using rule 47 (expression -> expression TIMES expression .)
    LOGICOR         reduce using rule 47 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 47 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 47 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 47 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 47 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 47 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 47 (expression -> expression TIMES expression .)

  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 44 ]
  ! TIMES           [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 41 ]


state 66

    (39) expression -> expression LESSTHAN expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 39 (expression -> expression LESSTHAN expression .)
    ISEQUAL         reduce using rule 39 (expression -> expression LESSTHAN expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression LESSTHAN expression .)
    LESSTHAN        reduce using rule 39 (expression -> expression LESSTHAN expression .)
    GREATERTHAN     reduce using rule 39 (expression -> expression LESSTHAN expression .)
    LESSEQUAL       reduce using rule 39 (expression -> expression LESSTHAN expression .)
    GREATEREQUAL    reduce using rule 39 (expression -> expression LESSTHAN expression .)
    LOGICAND        reduce using rule 39 (expression -> expression LESSTHAN expression .)
    LOGICOR         reduce using rule 39 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 39 (expression -> expression LESSTHAN expression .)
    COMMA           reduce using rule 39 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 39 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LESSTHAN expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LESSTHAN expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 67

    (40) expression -> expression GREATERTHAN expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    ISEQUAL         reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    NOTEQUAL        reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    LESSTHAN        reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    GREATERTHAN     reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    LESSEQUAL       reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    GREATEREQUAL    reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    LOGICAND        reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    LOGICOR         reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    COMMA           reduce using rule 40 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression GREATERTHAN expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 68

    (37) expression -> expression ISEQUAL expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 37 (expression -> expression ISEQUAL expression .)
    ISEQUAL         reduce using rule 37 (expression -> expression ISEQUAL expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression ISEQUAL expression .)
    LESSTHAN        reduce using rule 37 (expression -> expression ISEQUAL expression .)
    GREATERTHAN     reduce using rule 37 (expression -> expression ISEQUAL expression .)
    LESSEQUAL       reduce using rule 37 (expression -> expression ISEQUAL expression .)
    GREATEREQUAL    reduce using rule 37 (expression -> expression ISEQUAL expression .)
    LOGICAND        reduce using rule 37 (expression -> expression ISEQUAL expression .)
    LOGICOR         reduce using rule 37 (expression -> expression ISEQUAL expression .)
    RPAREN          reduce using rule 37 (expression -> expression ISEQUAL expression .)
    COMMA           reduce using rule 37 (expression -> expression ISEQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 37 (expression -> expression ISEQUAL expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression ISEQUAL expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression ISEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression ISEQUAL expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 69

    (41) expression -> expression LESSEQUAL expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    ISEQUAL         reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    NOTEQUAL        reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    LESSTHAN        reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    GREATERTHAN     reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    LESSEQUAL       reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    GREATEREQUAL    reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    LOGICAND        reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    LOGICOR         reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    RPAREN          reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    COMMA           reduce using rule 41 (expression -> expression LESSEQUAL expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 41 (expression -> expression LESSEQUAL expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression LESSEQUAL expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression LESSEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression LESSEQUAL expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]


state 70

    (45) expression -> expression PLUS expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 45 (expression -> expression PLUS expression .)
    ISEQUAL         reduce using rule 45 (expression -> expression PLUS expression .)
    NOTEQUAL        reduce using rule 45 (expression -> expression PLUS expression .)
    LESSTHAN        reduce using rule 45 (expression -> expression PLUS expression .)
    GREATERTHAN     reduce using rule 45 (expression -> expression PLUS expression .)
    LESSEQUAL       reduce using rule 45 (expression -> expression PLUS expression .)
    GREATEREQUAL    reduce using rule 45 (expression -> expression PLUS expression .)
    LOGICAND        reduce using rule 45 (expression -> expression PLUS expression .)
    LOGICOR         reduce using rule 45 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 45 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 45 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 45 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 45 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! TIMES           [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! ISEQUAL         [ shift and go to state 48 ]
  ! NOTEQUAL        [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 46 ]
  ! GREATERTHAN     [ shift and go to state 47 ]
  ! LESSEQUAL       [ shift and go to state 49 ]
  ! GREATEREQUAL    [ shift and go to state 40 ]
  ! LOGICAND        [ shift and go to state 43 ]
  ! LOGICOR         [ shift and go to state 51 ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 44 ]


state 71

    (44) expression -> expression LOGICOR expression .
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> expression LOGICOR expression .)
    RPAREN          reduce using rule 44 (expression -> expression LOGICOR expression .)
    COMMA           reduce using rule 44 (expression -> expression LOGICOR expression .)
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41

  ! ISEQUAL         [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! LESSEQUAL       [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! LOGICAND        [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! LOGICOR         [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression LOGICOR expression .) ]


state 72

    (27) statement -> RETURN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 87

state 73

    (6) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 88


state 74

    (33) statement -> WHILE . LPAREN expression RPAREN LBRACE statementlist RBRACE

    LPAREN          shift and go to state 89


state 75

    (30) statement -> CONST . type IDENTIFIER ASSIGN expression SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5
    IDENTIFIER      shift and go to state 8

    type                           shift and go to state 90

state 76

    (26) statement -> ifelse .

    RETURN          reduce using rule 26 (statement -> ifelse .)
    CONST           reduce using rule 26 (statement -> ifelse .)
    LOOP            reduce using rule 26 (statement -> ifelse .)
    BREAK           reduce using rule 26 (statement -> ifelse .)
    WHILE           reduce using rule 26 (statement -> ifelse .)
    IDENTIFIER      reduce using rule 26 (statement -> ifelse .)
    LPAREN          reduce using rule 26 (statement -> ifelse .)
    MINUS           reduce using rule 26 (statement -> ifelse .)
    NUMBER          reduce using rule 26 (statement -> ifelse .)
    IF              reduce using rule 26 (statement -> ifelse .)
    INT             reduce using rule 26 (statement -> ifelse .)
    FLOAT           reduce using rule 26 (statement -> ifelse .)
    STRING          reduce using rule 26 (statement -> ifelse .)
    VOID            reduce using rule 26 (statement -> ifelse .)
    RBRACE          reduce using rule 26 (statement -> ifelse .)


state 77

    (24) statementlist -> statement . statementlist
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 91
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 78

    (34) statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (36) expression -> IDENTIFIER . LPAREN arglist RPAREN
    (49) expression -> IDENTIFIER .
    (11) type -> IDENTIFIER .

    ASSIGN          shift and go to state 92
    LPAREN          shift and go to state 38
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 49 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 49 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 49 (expression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 49 (expression -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 49 (expression -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 49 (expression -> IDENTIFIER .)
    LOGICAND        reduce using rule 49 (expression -> IDENTIFIER .)
    LOGICOR         reduce using rule 49 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 49 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 49 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 49 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 11 (type -> IDENTIFIER .)


state 79

    (28) statement -> type . IDENTIFIER SEMICOLON
    (29) statement -> type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 93


state 80

    (23) statementlist -> empty .

    RBRACE          reduce using rule 23 (statementlist -> empty .)


state 81

    (56) ifelse -> IF . LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    LPAREN          shift and go to state 94


state 82

    (32) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 95


state 83

    (25) statement -> expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 96
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 84

    (31) statement -> LOOP . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 97


state 85

    (36) expression -> IDENTIFIER LPAREN arglist RPAREN .

    SEMICOLON       reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    ISEQUAL         reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    NOTEQUAL        reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    LESSTHAN        reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    GREATERTHAN     reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    LESSEQUAL       reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    GREATEREQUAL    reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    LOGICAND        reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    LOGICOR         reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    PLUS            reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    MINUS           reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    TIMES           reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    COMMA           reduce using rule 36 (expression -> IDENTIFIER LPAREN arglist RPAREN .)


state 86

    (19) arglist -> expression COMMA . arglist
    (17) arglist -> . empty
    (18) arglist -> . expression
    (19) arglist -> . expression COMMA arglist
    (16) empty -> .
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    RPAREN          reduce using rule 16 (empty -> .)
    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    arglist                        shift and go to state 98
    expression                     shift and go to state 58
    empty                          shift and go to state 59

state 87

    (27) statement -> RETURN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 99
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 88

    (6) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .

    CONST           reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    INT             reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    STRING          reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    VOID            reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    $end            reduce using rule 6 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)


state 89

    (33) statement -> WHILE LPAREN . expression RPAREN LBRACE statementlist RBRACE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 100

state 90

    (30) statement -> CONST type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 101


state 91

    (24) statementlist -> statement statementlist .

    RBRACE          reduce using rule 24 (statementlist -> statement statementlist .)


state 92

    (34) statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 102

state 93

    (28) statement -> type IDENTIFIER . SEMICOLON
    (29) statement -> type IDENTIFIER . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 104
    ASSIGN          shift and go to state 103


state 94

    (56) ifelse -> IF LPAREN . expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 105

state 95

    (32) statement -> BREAK SEMICOLON .

    RETURN          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    LOOP            reduce using rule 32 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 32 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 32 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 32 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 32 (statement -> BREAK SEMICOLON .)


state 96

    (25) statement -> expression SEMICOLON .

    RETURN          reduce using rule 25 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 25 (statement -> expression SEMICOLON .)
    LOOP            reduce using rule 25 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 25 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 25 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 25 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 25 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 25 (statement -> expression SEMICOLON .)
    IF              reduce using rule 25 (statement -> expression SEMICOLON .)
    INT             reduce using rule 25 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 25 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 25 (statement -> expression SEMICOLON .)
    VOID            reduce using rule 25 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 25 (statement -> expression SEMICOLON .)


state 97

    (31) statement -> LOOP LBRACE . statementlist RBRACE
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 106
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 98

    (19) arglist -> expression COMMA arglist .

    RPAREN          reduce using rule 19 (arglist -> expression COMMA arglist .)


state 99

    (27) statement -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    LOOP            reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 27 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 27 (statement -> RETURN expression SEMICOLON .)


state 100

    (33) statement -> WHILE LPAREN expression . RPAREN LBRACE statementlist RBRACE
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 107
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 101

    (30) statement -> CONST type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 108


state 102

    (34) statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 109
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 103

    (29) statement -> type IDENTIFIER ASSIGN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 110

state 104

    (28) statement -> type IDENTIFIER SEMICOLON .

    RETURN          reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    LOOP            reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 28 (statement -> type IDENTIFIER SEMICOLON .)


state 105

    (56) ifelse -> IF LPAREN expression . RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 111
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 106

    (31) statement -> LOOP LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 112


state 107

    (33) statement -> WHILE LPAREN expression RPAREN . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 113


state 108

    (30) statement -> CONST type IDENTIFIER ASSIGN . expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 114

state 109

    (34) statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 34 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 110

    (29) statement -> type IDENTIFIER ASSIGN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 115
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 111

    (56) ifelse -> IF LPAREN expression RPAREN . LBRACE statementlist RBRACE elifgroup optelse

    LBRACE          shift and go to state 116


state 112

    (31) statement -> LOOP LBRACE statementlist RBRACE .

    RETURN          reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    CONST           reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    IF              reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    INT             reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    STRING          reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    VOID            reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 31 (statement -> LOOP LBRACE statementlist RBRACE .)


state 113

    (33) statement -> WHILE LPAREN expression RPAREN LBRACE . statementlist RBRACE
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 117
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 114

    (30) statement -> CONST type IDENTIFIER ASSIGN expression . SEMICOLON
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 118
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 115

    (29) statement -> type IDENTIFIER ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 29 (statement -> type IDENTIFIER ASSIGN expression SEMICOLON .)


state 116

    (56) ifelse -> IF LPAREN expression RPAREN LBRACE . statementlist RBRACE elifgroup optelse
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 119
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 117

    (33) statement -> WHILE LPAREN expression RPAREN LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 120


state 118

    (30) statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    VOID            reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 30 (statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON .)


state 119

    (56) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist . RBRACE elifgroup optelse

    RBRACE          shift and go to state 121


state 120

    (33) statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .

    RETURN          reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    CONST           reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    IF              reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    INT             reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    STRING          reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    VOID            reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 33 (statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE .)


state 121

    (56) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE . elifgroup optelse
    (52) elifgroup -> . empty
    (53) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (16) empty -> .

    ELIF            shift and go to state 122
    ELSE            reduce using rule 16 (empty -> .)
    RETURN          reduce using rule 16 (empty -> .)
    CONST           reduce using rule 16 (empty -> .)
    LOOP            reduce using rule 16 (empty -> .)
    BREAK           reduce using rule 16 (empty -> .)
    WHILE           reduce using rule 16 (empty -> .)
    IDENTIFIER      reduce using rule 16 (empty -> .)
    LPAREN          reduce using rule 16 (empty -> .)
    MINUS           reduce using rule 16 (empty -> .)
    NUMBER          reduce using rule 16 (empty -> .)
    IF              reduce using rule 16 (empty -> .)
    INT             reduce using rule 16 (empty -> .)
    FLOAT           reduce using rule 16 (empty -> .)
    STRING          reduce using rule 16 (empty -> .)
    VOID            reduce using rule 16 (empty -> .)
    RBRACE          reduce using rule 16 (empty -> .)

    empty                          shift and go to state 123
    elifgroup                      shift and go to state 124

state 122

    (53) elifgroup -> ELIF . LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup

    LPAREN          shift and go to state 125


state 123

    (52) elifgroup -> empty .

    ELSE            reduce using rule 52 (elifgroup -> empty .)
    RETURN          reduce using rule 52 (elifgroup -> empty .)
    CONST           reduce using rule 52 (elifgroup -> empty .)
    LOOP            reduce using rule 52 (elifgroup -> empty .)
    BREAK           reduce using rule 52 (elifgroup -> empty .)
    WHILE           reduce using rule 52 (elifgroup -> empty .)
    IDENTIFIER      reduce using rule 52 (elifgroup -> empty .)
    LPAREN          reduce using rule 52 (elifgroup -> empty .)
    MINUS           reduce using rule 52 (elifgroup -> empty .)
    NUMBER          reduce using rule 52 (elifgroup -> empty .)
    IF              reduce using rule 52 (elifgroup -> empty .)
    INT             reduce using rule 52 (elifgroup -> empty .)
    FLOAT           reduce using rule 52 (elifgroup -> empty .)
    STRING          reduce using rule 52 (elifgroup -> empty .)
    VOID            reduce using rule 52 (elifgroup -> empty .)
    RBRACE          reduce using rule 52 (elifgroup -> empty .)


state 124

    (56) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup . optelse
    (54) optelse -> . empty
    (55) optelse -> . ELSE LBRACE statementlist RBRACE
    (16) empty -> .

    ELSE            shift and go to state 126
    RETURN          reduce using rule 16 (empty -> .)
    CONST           reduce using rule 16 (empty -> .)
    LOOP            reduce using rule 16 (empty -> .)
    BREAK           reduce using rule 16 (empty -> .)
    WHILE           reduce using rule 16 (empty -> .)
    IDENTIFIER      reduce using rule 16 (empty -> .)
    LPAREN          reduce using rule 16 (empty -> .)
    MINUS           reduce using rule 16 (empty -> .)
    NUMBER          reduce using rule 16 (empty -> .)
    IF              reduce using rule 16 (empty -> .)
    INT             reduce using rule 16 (empty -> .)
    FLOAT           reduce using rule 16 (empty -> .)
    STRING          reduce using rule 16 (empty -> .)
    VOID            reduce using rule 16 (empty -> .)
    RBRACE          reduce using rule 16 (empty -> .)

    empty                          shift and go to state 128
    optelse                        shift and go to state 127

state 125

    (53) elifgroup -> ELIF LPAREN . expression RPAREN LBRACE statementlist RBRACE elifgroup
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER

    LPAREN          shift and go to state 29
    IDENTIFIER      shift and go to state 30
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27

    expression                     shift and go to state 129

state 126

    (55) optelse -> ELSE . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 130


state 127

    (56) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .

    RETURN          reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    CONST           reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    LOOP            reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    BREAK           reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    WHILE           reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IDENTIFIER      reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    LPAREN          reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    MINUS           reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    NUMBER          reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IF              reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    INT             reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    FLOAT           reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    STRING          reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    VOID            reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    RBRACE          reduce using rule 56 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)


state 128

    (54) optelse -> empty .

    RETURN          reduce using rule 54 (optelse -> empty .)
    CONST           reduce using rule 54 (optelse -> empty .)
    LOOP            reduce using rule 54 (optelse -> empty .)
    BREAK           reduce using rule 54 (optelse -> empty .)
    WHILE           reduce using rule 54 (optelse -> empty .)
    IDENTIFIER      reduce using rule 54 (optelse -> empty .)
    LPAREN          reduce using rule 54 (optelse -> empty .)
    MINUS           reduce using rule 54 (optelse -> empty .)
    NUMBER          reduce using rule 54 (optelse -> empty .)
    IF              reduce using rule 54 (optelse -> empty .)
    INT             reduce using rule 54 (optelse -> empty .)
    FLOAT           reduce using rule 54 (optelse -> empty .)
    STRING          reduce using rule 54 (optelse -> empty .)
    VOID            reduce using rule 54 (optelse -> empty .)
    RBRACE          reduce using rule 54 (optelse -> empty .)


state 129

    (53) elifgroup -> ELIF LPAREN expression . RPAREN LBRACE statementlist RBRACE elifgroup
    (37) expression -> expression . ISEQUAL expression
    (38) expression -> expression . NOTEQUAL expression
    (39) expression -> expression . LESSTHAN expression
    (40) expression -> expression . GREATERTHAN expression
    (41) expression -> expression . LESSEQUAL expression
    (42) expression -> expression . GREATEREQUAL expression
    (43) expression -> expression . LOGICAND expression
    (44) expression -> expression . LOGICOR expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 131
    ISEQUAL         shift and go to state 48
    NOTEQUAL        shift and go to state 39
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    LESSEQUAL       shift and go to state 49
    GREATEREQUAL    shift and go to state 40
    LOGICAND        shift and go to state 43
    LOGICOR         shift and go to state 51
    PLUS            shift and go to state 50
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 41


state 130

    (55) optelse -> ELSE LBRACE . statementlist RBRACE
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 132
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 131

    (53) elifgroup -> ELIF LPAREN expression RPAREN . LBRACE statementlist RBRACE elifgroup

    LBRACE          shift and go to state 133


state 132

    (55) optelse -> ELSE LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 134


state 133

    (53) elifgroup -> ELIF LPAREN expression RPAREN LBRACE . statementlist RBRACE elifgroup
    (23) statementlist -> . empty
    (24) statementlist -> . statement statementlist
    (16) empty -> .
    (25) statement -> . expression SEMICOLON
    (26) statement -> . ifelse
    (27) statement -> . RETURN expression SEMICOLON
    (28) statement -> . type IDENTIFIER SEMICOLON
    (29) statement -> . type IDENTIFIER ASSIGN expression SEMICOLON
    (30) statement -> . CONST type IDENTIFIER ASSIGN expression SEMICOLON
    (31) statement -> . LOOP LBRACE statementlist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE
    (34) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (37) expression -> . expression ISEQUAL expression
    (38) expression -> . expression NOTEQUAL expression
    (39) expression -> . expression LESSTHAN expression
    (40) expression -> . expression GREATERTHAN expression
    (41) expression -> . expression LESSEQUAL expression
    (42) expression -> . expression GREATEREQUAL expression
    (43) expression -> . expression LOGICAND expression
    (44) expression -> . expression LOGICOR expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIVIDE expression
    (49) expression -> . IDENTIFIER
    (50) expression -> . MINUS expression
    (51) expression -> . NUMBER
    (56) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . VOID
    (11) type -> . IDENTIFIER

    RBRACE          reduce using rule 16 (empty -> .)
    RETURN          shift and go to state 72
    CONST           shift and go to state 75
    LOOP            shift and go to state 84
    BREAK           shift and go to state 82
    WHILE           shift and go to state 74
    IDENTIFIER      shift and go to state 78
    LPAREN          shift and go to state 29
    MINUS           shift and go to state 28
    NUMBER          shift and go to state 27
    IF              shift and go to state 81
    INT             shift and go to state 2
    FLOAT           shift and go to state 1
    STRING          shift and go to state 12
    VOID            shift and go to state 5

    type                           shift and go to state 79
    statementlist                  shift and go to state 135
    ifelse                         shift and go to state 76
    statement                      shift and go to state 77
    expression                     shift and go to state 83
    empty                          shift and go to state 80

state 134

    (55) optelse -> ELSE LBRACE statementlist RBRACE .

    RETURN          reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    CONST           reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    LOOP            reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    BREAK           reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    WHILE           reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    LPAREN          reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    MINUS           reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IF              reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    INT             reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    STRING          reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    VOID            reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 55 (optelse -> ELSE LBRACE statementlist RBRACE .)


state 135

    (53) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist . RBRACE elifgroup

    RBRACE          shift and go to state 136


state 136

    (53) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE . elifgroup
    (52) elifgroup -> . empty
    (53) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (16) empty -> .

    ELIF            shift and go to state 122
    ELSE            reduce using rule 16 (empty -> .)
    RETURN          reduce using rule 16 (empty -> .)
    CONST           reduce using rule 16 (empty -> .)
    LOOP            reduce using rule 16 (empty -> .)
    BREAK           reduce using rule 16 (empty -> .)
    WHILE           reduce using rule 16 (empty -> .)
    IDENTIFIER      reduce using rule 16 (empty -> .)
    LPAREN          reduce using rule 16 (empty -> .)
    MINUS           reduce using rule 16 (empty -> .)
    NUMBER          reduce using rule 16 (empty -> .)
    IF              reduce using rule 16 (empty -> .)
    INT             reduce using rule 16 (empty -> .)
    FLOAT           reduce using rule 16 (empty -> .)
    STRING          reduce using rule 16 (empty -> .)
    VOID            reduce using rule 16 (empty -> .)
    RBRACE          reduce using rule 16 (empty -> .)

    empty                          shift and go to state 123
    elifgroup                      shift and go to state 137

state 137

    (53) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .

    ELSE            reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RETURN          reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    CONST           reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    LOOP            reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    BREAK           reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    WHILE           reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IDENTIFIER      reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    LPAREN          reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    MINUS           reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    NUMBER          reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IF              reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    INT             reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    FLOAT           reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    STRING          reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    VOID            reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RBRACE          reduce using rule 53 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ISEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 71 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 71 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
