Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> toplevelgroup
Rule 1     toplevelgroup -> funcdecl toplevelgroup
Rule 2     toplevelgroup -> funcdef toplevelgroup
Rule 3     toplevelgroup -> empty
Rule 4     funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
Rule 5     funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> STRING
Rule 9     type -> VOID
Rule 10    type -> IDENTIFIER
Rule 11    argdecllist -> empty
Rule 12    argdecllist -> argdecl
Rule 13    argdecllist -> argdecl COMMA argdecllist
Rule 14    argdecl -> type IDENTIFIER
Rule 15    empty -> <empty>
Rule 16    arglist -> empty
Rule 17    arglist -> expression
Rule 18    arglist -> expression COMMA arglist
Rule 19    statementlist -> empty
Rule 20    statementlist -> statement statementlist
Rule 21    statement -> expression SEMICOLON
Rule 22    statement -> ifelse
Rule 23    statement -> RETURN expression SEMICOLON
Rule 24    statement -> IDENTIFIER ASSIGN expression
Rule 25    expression -> IDENTIFIER LPAREN arglist RPAREN
Rule 26    expression -> expression compare expression
Rule 27    expression -> expression arithop expression
Rule 28    expression -> IDENTIFIER
Rule 29    expression -> NUMBER
Rule 30    compare -> ISEQUAL
Rule 31    compare -> LESSTHAN
Rule 32    compare -> MORETHAN
Rule 33    arithop -> PLUS
Rule 34    arithop -> MINUS
Rule 35    arithop -> TIMES
Rule 36    arithop -> DIVIDE
Rule 37    elifgroup -> empty
Rule 38    elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
Rule 39    optelse -> empty
Rule 40    optelse -> ELSE LBRACE statementlist RBRACE
Rule 41    ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

Terminals, with rules where they appear

ASSIGN               : 24
COMMA                : 13 18
DIVIDE               : 36
ELIF                 : 38
ELSE                 : 40
FLOAT                : 7
IDENTIFIER           : 4 5 10 14 24 25 28
IF                   : 41
INT                  : 6
ISEQUAL              : 30
LBRACE               : 5 38 40 41
LESSTHAN             : 31
LPAREN               : 4 5 25 38 41
MINUS                : 34
MORETHAN             : 32
NUMBER               : 29
PLUS                 : 33
RBRACE               : 5 38 40 41
RETURN               : 23
RPAREN               : 4 5 25 38 41
SEMICOLON            : 4 21 23
STRING               : 8
TIMES                : 35
VOID                 : 9
error                : 

Nonterminals, with rules where they appear

argdecl              : 12 13
argdecllist          : 4 5 13
arglist              : 18 25
arithop              : 27
compare              : 26
elifgroup            : 38 41
empty                : 3 11 16 19 37 39
expression           : 17 18 21 23 24 26 26 27 27 38 41
funcdecl             : 1
funcdef              : 2
ifelse               : 22
optelse              : 41
statement            : 20
statementlist        : 5 20 38 40 41
toplevelgroup        : 1 2 0
type                 : 4 5 14

Parsing method: LALR

state 0

    (0) S' -> . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . empty
    (4) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (5) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (15) empty -> .
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING
    (9) type -> . VOID
    (10) type -> . IDENTIFIER

    $end            reduce using rule 15 (empty -> .)
    INT             shift and go to state 1
    FLOAT           shift and go to state 4
    STRING          shift and go to state 10
    VOID            shift and go to state 8
    IDENTIFIER      shift and go to state 6

    funcdecl                       shift and go to state 2
    toplevelgroup                  shift and go to state 3
    funcdef                        shift and go to state 5
    type                           shift and go to state 7
    empty                          shift and go to state 9

state 1

    (6) type -> INT .

    IDENTIFIER      reduce using rule 6 (type -> INT .)


state 2

    (1) toplevelgroup -> funcdecl . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . empty
    (4) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (5) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (15) empty -> .
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING
    (9) type -> . VOID
    (10) type -> . IDENTIFIER

    $end            reduce using rule 15 (empty -> .)
    INT             shift and go to state 1
    FLOAT           shift and go to state 4
    STRING          shift and go to state 10
    VOID            shift and go to state 8
    IDENTIFIER      shift and go to state 6

    funcdecl                       shift and go to state 2
    toplevelgroup                  shift and go to state 11
    funcdef                        shift and go to state 5
    type                           shift and go to state 7
    empty                          shift and go to state 9

state 3

    (0) S' -> toplevelgroup .



state 4

    (7) type -> FLOAT .

    IDENTIFIER      reduce using rule 7 (type -> FLOAT .)


state 5

    (2) toplevelgroup -> funcdef . toplevelgroup
    (1) toplevelgroup -> . funcdecl toplevelgroup
    (2) toplevelgroup -> . funcdef toplevelgroup
    (3) toplevelgroup -> . empty
    (4) funcdecl -> . type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (5) funcdef -> . type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE
    (15) empty -> .
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING
    (9) type -> . VOID
    (10) type -> . IDENTIFIER

    $end            reduce using rule 15 (empty -> .)
    INT             shift and go to state 1
    FLOAT           shift and go to state 4
    STRING          shift and go to state 10
    VOID            shift and go to state 8
    IDENTIFIER      shift and go to state 6

    funcdecl                       shift and go to state 2
    toplevelgroup                  shift and go to state 12
    funcdef                        shift and go to state 5
    type                           shift and go to state 7
    empty                          shift and go to state 9

state 6

    (10) type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 10 (type -> IDENTIFIER .)


state 7

    (4) funcdecl -> type . IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON
    (5) funcdef -> type . IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE

    IDENTIFIER      shift and go to state 13


state 8

    (9) type -> VOID .

    IDENTIFIER      reduce using rule 9 (type -> VOID .)


state 9

    (3) toplevelgroup -> empty .

    $end            reduce using rule 3 (toplevelgroup -> empty .)


state 10

    (8) type -> STRING .

    IDENTIFIER      reduce using rule 8 (type -> STRING .)


state 11

    (1) toplevelgroup -> funcdecl toplevelgroup .

    $end            reduce using rule 1 (toplevelgroup -> funcdecl toplevelgroup .)


state 12

    (2) toplevelgroup -> funcdef toplevelgroup .

    $end            reduce using rule 2 (toplevelgroup -> funcdef toplevelgroup .)


state 13

    (4) funcdecl -> type IDENTIFIER . LPAREN argdecllist RPAREN SEMICOLON
    (5) funcdef -> type IDENTIFIER . LPAREN argdecllist RPAREN LBRACE statementlist RBRACE

    LPAREN          shift and go to state 14


state 14

    (4) funcdecl -> type IDENTIFIER LPAREN . argdecllist RPAREN SEMICOLON
    (5) funcdef -> type IDENTIFIER LPAREN . argdecllist RPAREN LBRACE statementlist RBRACE
    (11) argdecllist -> . empty
    (12) argdecllist -> . argdecl
    (13) argdecllist -> . argdecl COMMA argdecllist
    (15) empty -> .
    (14) argdecl -> . type IDENTIFIER
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING
    (9) type -> . VOID
    (10) type -> . IDENTIFIER

    RPAREN          reduce using rule 15 (empty -> .)
    INT             shift and go to state 1
    FLOAT           shift and go to state 4
    STRING          shift and go to state 10
    VOID            shift and go to state 8
    IDENTIFIER      shift and go to state 6

    argdecllist                    shift and go to state 15
    type                           shift and go to state 17
    empty                          shift and go to state 18
    argdecl                        shift and go to state 16

state 15

    (4) funcdecl -> type IDENTIFIER LPAREN argdecllist . RPAREN SEMICOLON
    (5) funcdef -> type IDENTIFIER LPAREN argdecllist . RPAREN LBRACE statementlist RBRACE

    RPAREN          shift and go to state 19


state 16

    (12) argdecllist -> argdecl .
    (13) argdecllist -> argdecl . COMMA argdecllist

    RPAREN          reduce using rule 12 (argdecllist -> argdecl .)
    COMMA           shift and go to state 20


state 17

    (14) argdecl -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 21


state 18

    (11) argdecllist -> empty .

    RPAREN          reduce using rule 11 (argdecllist -> empty .)


state 19

    (4) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN . SEMICOLON
    (5) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN . LBRACE statementlist RBRACE

    SEMICOLON       shift and go to state 22
    LBRACE          shift and go to state 23


state 20

    (13) argdecllist -> argdecl COMMA . argdecllist
    (11) argdecllist -> . empty
    (12) argdecllist -> . argdecl
    (13) argdecllist -> . argdecl COMMA argdecllist
    (15) empty -> .
    (14) argdecl -> . type IDENTIFIER
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING
    (9) type -> . VOID
    (10) type -> . IDENTIFIER

    RPAREN          reduce using rule 15 (empty -> .)
    INT             shift and go to state 1
    FLOAT           shift and go to state 4
    STRING          shift and go to state 10
    VOID            shift and go to state 8
    IDENTIFIER      shift and go to state 6

    argdecllist                    shift and go to state 24
    type                           shift and go to state 17
    empty                          shift and go to state 18
    argdecl                        shift and go to state 16

state 21

    (14) argdecl -> type IDENTIFIER .

    COMMA           reduce using rule 14 (argdecl -> type IDENTIFIER .)
    RPAREN          reduce using rule 14 (argdecl -> type IDENTIFIER .)


state 22

    (4) funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .

    INT             reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    FLOAT           reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    STRING          reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    VOID            reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)
    $end            reduce using rule 4 (funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON .)


state 23

    (5) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE . statementlist RBRACE
    (19) statementlist -> . empty
    (20) statementlist -> . statement statementlist
    (15) empty -> .
    (21) statement -> . expression SEMICOLON
    (22) statement -> . ifelse
    (23) statement -> . RETURN expression SEMICOLON
    (24) statement -> . IDENTIFIER ASSIGN expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER
    (41) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    RBRACE          reduce using rule 15 (empty -> .)
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 26
    IF              shift and go to state 32

    expression                     shift and go to state 33
    statementlist                  shift and go to state 27
    ifelse                         shift and go to state 28
    statement                      shift and go to state 29
    empty                          shift and go to state 31

state 24

    (13) argdecllist -> argdecl COMMA argdecllist .

    RPAREN          reduce using rule 13 (argdecllist -> argdecl COMMA argdecllist .)


state 25

    (23) statement -> RETURN . expression SEMICOLON
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 35

state 26

    (29) expression -> NUMBER .

    COMMA           reduce using rule 29 (expression -> NUMBER .)
    ISEQUAL         reduce using rule 29 (expression -> NUMBER .)
    LESSTHAN        reduce using rule 29 (expression -> NUMBER .)
    MORETHAN        reduce using rule 29 (expression -> NUMBER .)
    PLUS            reduce using rule 29 (expression -> NUMBER .)
    MINUS           reduce using rule 29 (expression -> NUMBER .)
    TIMES           reduce using rule 29 (expression -> NUMBER .)
    DIVIDE          reduce using rule 29 (expression -> NUMBER .)
    RPAREN          reduce using rule 29 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 29 (expression -> NUMBER .)
    RETURN          reduce using rule 29 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 29 (expression -> NUMBER .)
    NUMBER          reduce using rule 29 (expression -> NUMBER .)
    IF              reduce using rule 29 (expression -> NUMBER .)
    RBRACE          reduce using rule 29 (expression -> NUMBER .)


state 27

    (5) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 36


state 28

    (22) statement -> ifelse .

    RETURN          reduce using rule 22 (statement -> ifelse .)
    IDENTIFIER      reduce using rule 22 (statement -> ifelse .)
    NUMBER          reduce using rule 22 (statement -> ifelse .)
    IF              reduce using rule 22 (statement -> ifelse .)
    RBRACE          reduce using rule 22 (statement -> ifelse .)


state 29

    (20) statementlist -> statement . statementlist
    (19) statementlist -> . empty
    (20) statementlist -> . statement statementlist
    (15) empty -> .
    (21) statement -> . expression SEMICOLON
    (22) statement -> . ifelse
    (23) statement -> . RETURN expression SEMICOLON
    (24) statement -> . IDENTIFIER ASSIGN expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER
    (41) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    RBRACE          reduce using rule 15 (empty -> .)
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 26
    IF              shift and go to state 32

    statementlist                  shift and go to state 37
    ifelse                         shift and go to state 28
    statement                      shift and go to state 29
    expression                     shift and go to state 33
    empty                          shift and go to state 31

state 30

    (24) statement -> IDENTIFIER . ASSIGN expression
    (25) expression -> IDENTIFIER . LPAREN arglist RPAREN
    (28) expression -> IDENTIFIER .

    ASSIGN          shift and go to state 39
    LPAREN          shift and go to state 38
    SEMICOLON       reduce using rule 28 (expression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 28 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 28 (expression -> IDENTIFIER .)
    MORETHAN        reduce using rule 28 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 28 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 28 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 28 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 28 (expression -> IDENTIFIER .)


state 31

    (19) statementlist -> empty .

    RBRACE          reduce using rule 19 (statementlist -> empty .)


state 32

    (41) ifelse -> IF . LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    LPAREN          shift and go to state 40


state 33

    (21) statement -> expression . SEMICOLON
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    SEMICOLON       shift and go to state 44
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 34

    (25) expression -> IDENTIFIER . LPAREN arglist RPAREN
    (28) expression -> IDENTIFIER .

    LPAREN          shift and go to state 38
    COMMA           reduce using rule 28 (expression -> IDENTIFIER .)
    ISEQUAL         reduce using rule 28 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 28 (expression -> IDENTIFIER .)
    MORETHAN        reduce using rule 28 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 28 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 28 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 28 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 28 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 28 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 28 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 28 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 28 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 28 (expression -> IDENTIFIER .)
    IF              reduce using rule 28 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 28 (expression -> IDENTIFIER .)


state 35

    (23) statement -> RETURN expression . SEMICOLON
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    SEMICOLON       shift and go to state 51
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 36

    (5) funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .

    INT             reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    FLOAT           reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    STRING          reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    VOID            reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)
    $end            reduce using rule 5 (funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE .)


state 37

    (20) statementlist -> statement statementlist .

    RBRACE          reduce using rule 20 (statementlist -> statement statementlist .)


state 38

    (25) expression -> IDENTIFIER LPAREN . arglist RPAREN
    (16) arglist -> . empty
    (17) arglist -> . expression
    (18) arglist -> . expression COMMA arglist
    (15) empty -> .
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    RPAREN          reduce using rule 15 (empty -> .)
    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    arglist                        shift and go to state 52
    expression                     shift and go to state 53
    empty                          shift and go to state 54

state 39

    (24) statement -> IDENTIFIER ASSIGN . expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 55

state 40

    (41) ifelse -> IF LPAREN . expression RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 56

state 41

    (27) expression -> expression arithop . expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 57

state 42

    (26) expression -> expression compare . expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 58

state 43

    (36) arithop -> DIVIDE .

    IDENTIFIER      reduce using rule 36 (arithop -> DIVIDE .)
    NUMBER          reduce using rule 36 (arithop -> DIVIDE .)


state 44

    (21) statement -> expression SEMICOLON .

    RETURN          reduce using rule 21 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 21 (statement -> expression SEMICOLON .)
    IF              reduce using rule 21 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 21 (statement -> expression SEMICOLON .)


state 45

    (35) arithop -> TIMES .

    IDENTIFIER      reduce using rule 35 (arithop -> TIMES .)
    NUMBER          reduce using rule 35 (arithop -> TIMES .)


state 46

    (31) compare -> LESSTHAN .

    IDENTIFIER      reduce using rule 31 (compare -> LESSTHAN .)
    NUMBER          reduce using rule 31 (compare -> LESSTHAN .)


state 47

    (33) arithop -> PLUS .

    IDENTIFIER      reduce using rule 33 (arithop -> PLUS .)
    NUMBER          reduce using rule 33 (arithop -> PLUS .)


state 48

    (30) compare -> ISEQUAL .

    IDENTIFIER      reduce using rule 30 (compare -> ISEQUAL .)
    NUMBER          reduce using rule 30 (compare -> ISEQUAL .)


state 49

    (32) compare -> MORETHAN .

    IDENTIFIER      reduce using rule 32 (compare -> MORETHAN .)
    NUMBER          reduce using rule 32 (compare -> MORETHAN .)


state 50

    (34) arithop -> MINUS .

    IDENTIFIER      reduce using rule 34 (arithop -> MINUS .)
    NUMBER          reduce using rule 34 (arithop -> MINUS .)


state 51

    (23) statement -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 23 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 23 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 23 (statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 23 (statement -> RETURN expression SEMICOLON .)


state 52

    (25) expression -> IDENTIFIER LPAREN arglist . RPAREN

    RPAREN          shift and go to state 59


state 53

    (17) arglist -> expression .
    (18) arglist -> expression . COMMA arglist
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    RPAREN          reduce using rule 17 (arglist -> expression .)
    COMMA           shift and go to state 60
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 54

    (16) arglist -> empty .

    RPAREN          reduce using rule 16 (arglist -> empty .)


state 55

    (24) statement -> IDENTIFIER ASSIGN expression .
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    RETURN          reduce using rule 24 (statement -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 24 (statement -> IDENTIFIER ASSIGN expression .)
    NUMBER          reduce using rule 24 (statement -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 24 (statement -> IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 24 (statement -> IDENTIFIER ASSIGN expression .)
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 56

    (41) ifelse -> IF LPAREN expression . RPAREN LBRACE statementlist RBRACE elifgroup optelse
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    RPAREN          shift and go to state 61
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 57

    (27) expression -> expression arithop expression .
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for MORETHAN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    COMMA           reduce using rule 27 (expression -> expression arithop expression .)
    RPAREN          reduce using rule 27 (expression -> expression arithop expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression arithop expression .)
    RETURN          reduce using rule 27 (expression -> expression arithop expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression arithop expression .)
    NUMBER          reduce using rule 27 (expression -> expression arithop expression .)
    IF              reduce using rule 27 (expression -> expression arithop expression .)
    RBRACE          reduce using rule 27 (expression -> expression arithop expression .)
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

  ! ISEQUAL         [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! LESSTHAN        [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! MORETHAN        [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! PLUS            [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression arithop expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression arithop expression .) ]

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 58

    (26) expression -> expression compare expression .
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

  ! shift/reduce conflict for ISEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for MORETHAN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    COMMA           reduce using rule 26 (expression -> expression compare expression .)
    RPAREN          reduce using rule 26 (expression -> expression compare expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression compare expression .)
    RETURN          reduce using rule 26 (expression -> expression compare expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression compare expression .)
    NUMBER          reduce using rule 26 (expression -> expression compare expression .)
    IF              reduce using rule 26 (expression -> expression compare expression .)
    RBRACE          reduce using rule 26 (expression -> expression compare expression .)
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

  ! ISEQUAL         [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! LESSTHAN        [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! MORETHAN        [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! PLUS            [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression compare expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression compare expression .) ]

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 59

    (25) expression -> IDENTIFIER LPAREN arglist RPAREN .

    COMMA           reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    ISEQUAL         reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    LESSTHAN        reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    MORETHAN        reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    PLUS            reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    MINUS           reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    TIMES           reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    DIVIDE          reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    SEMICOLON       reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    RETURN          reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    IDENTIFIER      reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    NUMBER          reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    IF              reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)
    RBRACE          reduce using rule 25 (expression -> IDENTIFIER LPAREN arglist RPAREN .)


state 60

    (18) arglist -> expression COMMA . arglist
    (16) arglist -> . empty
    (17) arglist -> . expression
    (18) arglist -> . expression COMMA arglist
    (15) empty -> .
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    RPAREN          reduce using rule 15 (empty -> .)
    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    arglist                        shift and go to state 62
    expression                     shift and go to state 53
    empty                          shift and go to state 54

state 61

    (41) ifelse -> IF LPAREN expression RPAREN . LBRACE statementlist RBRACE elifgroup optelse

    LBRACE          shift and go to state 63


state 62

    (18) arglist -> expression COMMA arglist .

    RPAREN          reduce using rule 18 (arglist -> expression COMMA arglist .)


state 63

    (41) ifelse -> IF LPAREN expression RPAREN LBRACE . statementlist RBRACE elifgroup optelse
    (19) statementlist -> . empty
    (20) statementlist -> . statement statementlist
    (15) empty -> .
    (21) statement -> . expression SEMICOLON
    (22) statement -> . ifelse
    (23) statement -> . RETURN expression SEMICOLON
    (24) statement -> . IDENTIFIER ASSIGN expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER
    (41) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    RBRACE          reduce using rule 15 (empty -> .)
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 26
    IF              shift and go to state 32

    statementlist                  shift and go to state 64
    ifelse                         shift and go to state 28
    statement                      shift and go to state 29
    expression                     shift and go to state 33
    empty                          shift and go to state 31

state 64

    (41) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist . RBRACE elifgroup optelse

    RBRACE          shift and go to state 65


state 65

    (41) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE . elifgroup optelse
    (37) elifgroup -> . empty
    (38) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (15) empty -> .

    ELIF            shift and go to state 66
    ELSE            reduce using rule 15 (empty -> .)
    RETURN          reduce using rule 15 (empty -> .)
    IDENTIFIER      reduce using rule 15 (empty -> .)
    NUMBER          reduce using rule 15 (empty -> .)
    IF              reduce using rule 15 (empty -> .)
    RBRACE          reduce using rule 15 (empty -> .)

    empty                          shift and go to state 67
    elifgroup                      shift and go to state 68

state 66

    (38) elifgroup -> ELIF . LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup

    LPAREN          shift and go to state 69


state 67

    (37) elifgroup -> empty .

    ELSE            reduce using rule 37 (elifgroup -> empty .)
    RETURN          reduce using rule 37 (elifgroup -> empty .)
    IDENTIFIER      reduce using rule 37 (elifgroup -> empty .)
    NUMBER          reduce using rule 37 (elifgroup -> empty .)
    IF              reduce using rule 37 (elifgroup -> empty .)
    RBRACE          reduce using rule 37 (elifgroup -> empty .)


state 68

    (41) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup . optelse
    (39) optelse -> . empty
    (40) optelse -> . ELSE LBRACE statementlist RBRACE
    (15) empty -> .

    ELSE            shift and go to state 70
    RETURN          reduce using rule 15 (empty -> .)
    IDENTIFIER      reduce using rule 15 (empty -> .)
    NUMBER          reduce using rule 15 (empty -> .)
    IF              reduce using rule 15 (empty -> .)
    RBRACE          reduce using rule 15 (empty -> .)

    empty                          shift and go to state 72
    optelse                        shift and go to state 71

state 69

    (38) elifgroup -> ELIF LPAREN . expression RPAREN LBRACE statementlist RBRACE elifgroup
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER

    IDENTIFIER      shift and go to state 34
    NUMBER          shift and go to state 26

    expression                     shift and go to state 73

state 70

    (40) optelse -> ELSE . LBRACE statementlist RBRACE

    LBRACE          shift and go to state 74


state 71

    (41) ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .

    RETURN          reduce using rule 41 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IDENTIFIER      reduce using rule 41 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    NUMBER          reduce using rule 41 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    IF              reduce using rule 41 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)
    RBRACE          reduce using rule 41 (ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse .)


state 72

    (39) optelse -> empty .

    RETURN          reduce using rule 39 (optelse -> empty .)
    IDENTIFIER      reduce using rule 39 (optelse -> empty .)
    NUMBER          reduce using rule 39 (optelse -> empty .)
    IF              reduce using rule 39 (optelse -> empty .)
    RBRACE          reduce using rule 39 (optelse -> empty .)


state 73

    (38) elifgroup -> ELIF LPAREN expression . RPAREN LBRACE statementlist RBRACE elifgroup
    (26) expression -> expression . compare expression
    (27) expression -> expression . arithop expression
    (30) compare -> . ISEQUAL
    (31) compare -> . LESSTHAN
    (32) compare -> . MORETHAN
    (33) arithop -> . PLUS
    (34) arithop -> . MINUS
    (35) arithop -> . TIMES
    (36) arithop -> . DIVIDE

    RPAREN          shift and go to state 75
    ISEQUAL         shift and go to state 48
    LESSTHAN        shift and go to state 46
    MORETHAN        shift and go to state 49
    PLUS            shift and go to state 47
    MINUS           shift and go to state 50
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 43

    arithop                        shift and go to state 41
    compare                        shift and go to state 42

state 74

    (40) optelse -> ELSE LBRACE . statementlist RBRACE
    (19) statementlist -> . empty
    (20) statementlist -> . statement statementlist
    (15) empty -> .
    (21) statement -> . expression SEMICOLON
    (22) statement -> . ifelse
    (23) statement -> . RETURN expression SEMICOLON
    (24) statement -> . IDENTIFIER ASSIGN expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER
    (41) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    RBRACE          reduce using rule 15 (empty -> .)
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 26
    IF              shift and go to state 32

    statementlist                  shift and go to state 76
    ifelse                         shift and go to state 28
    statement                      shift and go to state 29
    expression                     shift and go to state 33
    empty                          shift and go to state 31

state 75

    (38) elifgroup -> ELIF LPAREN expression RPAREN . LBRACE statementlist RBRACE elifgroup

    LBRACE          shift and go to state 77


state 76

    (40) optelse -> ELSE LBRACE statementlist . RBRACE

    RBRACE          shift and go to state 78


state 77

    (38) elifgroup -> ELIF LPAREN expression RPAREN LBRACE . statementlist RBRACE elifgroup
    (19) statementlist -> . empty
    (20) statementlist -> . statement statementlist
    (15) empty -> .
    (21) statement -> . expression SEMICOLON
    (22) statement -> . ifelse
    (23) statement -> . RETURN expression SEMICOLON
    (24) statement -> . IDENTIFIER ASSIGN expression
    (25) expression -> . IDENTIFIER LPAREN arglist RPAREN
    (26) expression -> . expression compare expression
    (27) expression -> . expression arithop expression
    (28) expression -> . IDENTIFIER
    (29) expression -> . NUMBER
    (41) ifelse -> . IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse

    RBRACE          reduce using rule 15 (empty -> .)
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    NUMBER          shift and go to state 26
    IF              shift and go to state 32

    statementlist                  shift and go to state 79
    ifelse                         shift and go to state 28
    statement                      shift and go to state 29
    expression                     shift and go to state 33
    empty                          shift and go to state 31

state 78

    (40) optelse -> ELSE LBRACE statementlist RBRACE .

    RETURN          reduce using rule 40 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IDENTIFIER      reduce using rule 40 (optelse -> ELSE LBRACE statementlist RBRACE .)
    NUMBER          reduce using rule 40 (optelse -> ELSE LBRACE statementlist RBRACE .)
    IF              reduce using rule 40 (optelse -> ELSE LBRACE statementlist RBRACE .)
    RBRACE          reduce using rule 40 (optelse -> ELSE LBRACE statementlist RBRACE .)


state 79

    (38) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist . RBRACE elifgroup

    RBRACE          shift and go to state 80


state 80

    (38) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE . elifgroup
    (37) elifgroup -> . empty
    (38) elifgroup -> . ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup
    (15) empty -> .

    ELIF            shift and go to state 66
    ELSE            reduce using rule 15 (empty -> .)
    RETURN          reduce using rule 15 (empty -> .)
    IDENTIFIER      reduce using rule 15 (empty -> .)
    NUMBER          reduce using rule 15 (empty -> .)
    IF              reduce using rule 15 (empty -> .)
    RBRACE          reduce using rule 15 (empty -> .)

    empty                          shift and go to state 67
    elifgroup                      shift and go to state 81

state 81

    (38) elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .

    ELSE            reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RETURN          reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IDENTIFIER      reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    NUMBER          reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    IF              reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)
    RBRACE          reduce using rule 38 (elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ISEQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for MORETHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for ISEQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for MORETHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
