
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'N\xf7\xa1\x8dG(\xa7FuQRFC\xf3\xd7\xdc'
    
_lr_action_items = {'NOTEQUAL':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,34,-48,34,-33,34,-36,-40,-46,34,-44,-45,-37,-38,-35,-39,-43,34,-47,34,-34,34,34,34,34,34,34,]),'ELIF':([108,124,],[110,110,]),'RETURN':([48,68,69,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[66,-25,66,-30,-24,66,-26,-27,-32,-29,-28,66,66,-16,-31,-50,-16,-54,-52,66,66,-53,-16,-51,]),'VOID':([0,3,6,9,16,17,29,37,47,48,68,69,81,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[5,5,5,5,-20,5,5,-21,-5,5,-25,5,-6,-30,-24,5,-26,-27,-32,-29,-28,5,5,-16,-31,-50,-16,-54,-52,5,5,-53,-16,-51,]),'NUMBER':([18,24,25,33,34,35,36,38,39,40,41,42,43,44,45,46,48,66,68,69,79,83,85,86,87,88,89,91,93,94,98,102,103,104,105,108,109,111,112,113,115,116,118,121,122,124,125,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-25,23,23,23,23,23,-30,-24,23,-26,23,-27,-32,-29,-28,23,23,-16,-31,-50,-16,23,-54,-52,23,23,-53,-16,-51,]),'LESSTHAN':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,41,-48,41,-33,41,-36,-40,-46,41,-44,-45,-37,-38,-35,-39,-43,41,-47,41,-34,41,41,41,41,41,41,]),'MINUS':([18,23,24,25,26,27,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,48,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,76,78,79,80,83,85,86,87,88,89,91,92,93,94,95,96,98,99,102,103,104,105,108,109,111,112,113,115,116,117,118,121,122,124,125,],[24,-49,24,24,-47,39,-48,39,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-33,39,39,39,-46,39,-44,-45,39,39,39,39,-43,39,24,-25,24,-47,39,-34,24,39,24,24,24,-30,-24,24,-26,39,24,-27,39,39,-32,39,-29,-28,24,24,-16,-31,-50,-16,24,-54,-52,39,24,24,-53,-16,-51,]),'DIVIDE':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,36,-48,36,-33,36,36,36,-46,36,36,-45,36,36,36,36,36,36,-47,36,-34,36,36,36,36,36,36,]),'GREATEREQUAL':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,35,-48,35,-33,35,-36,-40,-46,35,-44,-45,-37,-38,-35,-39,-43,35,-47,35,-34,35,35,35,35,35,35,]),'RPAREN':([17,19,20,22,23,26,29,30,31,32,33,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,78,79,90,95,96,117,],[-16,28,-13,-12,-49,-47,-16,-15,-48,50,-16,-14,-33,78,-18,-17,-36,-40,-46,-41,-44,-45,-37,-38,-35,-39,-43,-42,-34,-16,-19,100,101,119,]),'SEMICOLON':([14,23,26,27,28,31,50,54,55,56,57,58,59,60,61,62,63,64,65,70,75,76,78,80,84,92,99,],[16,-49,-47,37,47,-48,-33,-36,-40,-46,-41,-44,-45,-37,-38,-35,-39,-43,-42,-47,87,88,-34,91,94,98,103,]),'COMMA':([20,23,26,30,31,50,52,54,55,56,57,58,59,60,61,62,63,64,65,78,],[29,-49,-47,-15,-48,-33,79,-36,-40,-46,-41,-44,-45,-37,-38,-35,-39,-43,-42,-34,]),'PLUS':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,45,-48,45,-33,45,45,45,-46,45,-44,-45,45,45,45,45,-43,45,-47,45,-34,45,45,45,45,45,45,]),'IDENTIFIER':([0,1,2,3,5,6,7,8,9,11,16,17,18,21,24,25,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,66,68,69,70,71,79,81,83,85,86,87,88,89,91,93,94,98,102,103,104,105,108,109,111,112,113,115,116,118,121,122,124,125,],[7,-8,-7,7,-10,7,-11,14,7,-9,-20,7,26,30,26,26,7,26,26,26,26,-21,26,26,26,26,26,26,26,26,26,-5,70,26,-25,70,-11,84,26,-6,26,26,26,-30,-24,70,-26,26,-27,-32,-29,-28,70,70,-16,-31,-50,-16,26,-54,-52,70,70,-53,-16,-51,]),'ASSIGN':([14,70,84,],[18,83,93,]),'$end':([0,3,4,6,9,10,12,13,15,16,37,47,81,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-21,-5,-6,]),'STRING':([0,3,6,9,16,17,29,37,47,48,68,69,81,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[11,11,11,11,-20,11,11,-21,-5,11,-25,11,-6,-30,-24,11,-26,-27,-32,-29,-28,11,11,-16,-31,-50,-16,-54,-52,11,11,-53,-16,-51,]),'LOGICAND':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,38,-48,38,-33,38,-36,-40,-46,38,-44,-45,-37,-38,-35,-39,-43,38,-47,38,-34,38,38,38,38,38,38,]),'RBRACE':([48,67,68,69,72,82,87,88,89,91,94,97,98,102,103,104,105,106,107,108,109,111,112,115,116,118,120,121,122,123,124,125,],[-16,81,-25,-16,-22,-23,-30,-24,-16,-26,-27,102,-32,-29,-28,-16,-16,108,109,-16,-31,-50,-16,-54,-52,-16,122,-16,-53,124,-16,-51,]),'TIMES':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,40,-48,40,-33,40,40,40,-46,40,40,-45,40,40,40,40,40,40,-47,40,-34,40,40,40,40,40,40,]),'GREATERTHAN':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,42,-48,42,-33,42,-36,-40,-46,42,-44,-45,-37,-38,-35,-39,-43,42,-47,42,-34,42,42,42,42,42,42,]),'LPAREN':([14,18,24,25,26,33,34,35,36,38,39,40,41,42,43,44,45,46,48,66,68,69,70,73,74,79,83,85,86,87,88,89,91,93,94,98,102,103,104,105,108,109,110,111,112,113,115,116,118,121,122,124,125,],[17,25,25,25,33,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-25,25,33,85,86,25,25,25,25,-30,-24,25,-26,25,-27,-32,-29,-28,25,25,-16,-31,113,-50,-16,25,-54,-52,25,25,-53,-16,-51,]),'LESSEQUAL':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,44,-48,44,-33,44,-36,-40,-46,44,-44,-45,-37,-38,-35,-39,-43,44,-47,44,-34,44,44,44,44,44,44,]),'ELSE':([108,111,112,124,125,],[-16,-50,114,-16,-51,]),'IF':([48,68,69,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[73,-25,73,-30,-24,73,-26,-27,-32,-29,-28,73,73,-16,-31,-50,-16,-54,-52,73,73,-53,-16,-51,]),'LBRACE':([28,77,100,101,114,119,],[48,89,104,105,118,121,]),'INT':([0,3,6,9,16,17,29,37,47,48,68,69,81,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[2,2,2,2,-20,2,2,-21,-5,2,-25,2,-6,-30,-24,2,-26,-27,-32,-29,-28,2,2,-16,-31,-50,-16,-54,-52,2,2,-53,-16,-51,]),'FLOAT':([0,3,6,9,16,17,29,37,47,48,68,69,81,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[1,1,1,1,-20,1,1,-21,-5,1,-25,1,-6,-30,-24,1,-26,-27,-32,-29,-28,1,1,-16,-31,-50,-16,-54,-52,1,1,-53,-16,-51,]),'WHILE':([48,68,69,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[74,-25,74,-30,-24,74,-26,-27,-32,-29,-28,74,74,-16,-31,-50,-16,-54,-52,74,74,-53,-16,-51,]),'BREAK':([48,68,69,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[75,-25,75,-30,-24,75,-26,-27,-32,-29,-28,75,75,-16,-31,-50,-16,-54,-52,75,75,-53,-16,-51,]),'LOOP':([48,68,69,87,88,89,91,94,98,102,103,104,105,108,109,111,112,115,116,118,121,122,124,125,],[77,-25,77,-30,-24,77,-26,-27,-32,-29,-28,77,77,-16,-31,-50,-16,-54,-52,77,77,-53,-16,-51,]),'ISEQUAL':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,43,-48,43,-33,43,-36,-40,-46,43,-44,-45,-37,-38,-35,-39,-43,43,-47,43,-34,43,43,43,43,43,43,]),'LOGICOR':([23,26,27,31,32,50,52,54,55,56,57,58,59,60,61,62,63,64,65,70,76,78,80,92,95,96,99,117,],[-49,-47,46,-48,46,-33,46,-36,-40,-46,46,-44,-45,-37,-38,-35,-39,-43,46,-47,46,-34,46,46,46,46,46,46,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([17,29,],[19,49,]),'argdecl':([17,29,],[20,20,]),'expression':([18,24,25,33,34,35,36,38,39,40,41,42,43,44,45,46,48,66,69,79,83,85,86,89,93,104,105,113,118,121,],[27,31,32,52,54,55,56,57,58,59,60,61,62,63,64,65,76,80,76,52,92,95,96,76,99,76,76,117,76,76,]),'funcdecl':([0,3,6,9,],[3,3,3,3,]),'toplevelgroup':([0,3,6,9,],[4,12,13,15,]),'statementlist':([48,69,89,104,105,118,121,],[67,82,97,106,107,120,123,]),'optelse':([112,],[115,]),'ifelse':([48,69,89,104,105,118,121,],[68,68,68,68,68,68,68,]),'elifgroup':([108,124,],[112,125,]),'statement':([48,69,89,104,105,118,121,],[69,69,69,69,69,69,69,]),'funcdef':([0,3,6,9,],[6,6,6,6,]),'arglist':([33,79,],[51,90,]),'type':([0,3,6,9,17,29,48,69,89,104,105,118,121,],[8,8,8,8,21,21,71,71,71,71,71,71,71,]),'globalvardecl':([0,3,6,9,],[9,9,9,9,]),'empty':([0,3,6,9,17,29,33,48,69,79,89,104,105,108,112,118,121,124,],[10,10,10,10,22,22,53,72,72,53,72,72,72,111,116,72,72,111,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',122),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',126),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',130),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',134),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',138),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',155),
  ('type -> INT','type',1,'p_type','compiler.py',166),
  ('type -> FLOAT','type',1,'p_type','compiler.py',167),
  ('type -> STRING','type',1,'p_type','compiler.py',168),
  ('type -> VOID','type',1,'p_type','compiler.py',169),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',170),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',175),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',179),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',183),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',187),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',191),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',195),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',199),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',203),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',207),
  ('globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',5,'p_globalvardecl_initialized','compiler.py',211),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',215),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',219),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',226),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',230),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',234),
  ('statement -> type IDENTIFIER SEMICOLON','statement',3,'p_statement_localvardecl','compiler.py',238),
  ('statement -> type IDENTIFIER ASSIGN expression SEMICOLON','statement',5,'p_statement_localvardecl_initialized','compiler.py',242),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',246),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',250),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',254),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',258),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',262),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',266),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',270),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',271),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',272),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',273),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',274),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',275),
  ('expression -> expression LOGICAND expression','expression',3,'p_expression_binaryop','compiler.py',276),
  ('expression -> expression LOGICOR expression','expression',3,'p_expression_binaryop','compiler.py',277),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',278),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',279),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',280),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',281),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',286),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',291),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',295),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',299),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',303),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',307),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',311),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',315),
]
