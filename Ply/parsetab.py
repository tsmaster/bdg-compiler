
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x12\x01)\xc7yY\xb0\xb8\x0c\x99\xb0I\x9fAZ\xea'
    
_lr_action_items = {'NOTEQUAL':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,55,-45,55,-46,55,55,55,-31,55,55,-34,-38,-44,55,-43,-35,-36,-33,-37,-41,-42,55,-32,55,]),'DIVIDE':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,57,-45,57,-46,57,57,57,-31,57,57,57,57,-44,57,-43,57,57,57,57,57,57,57,-32,57,]),'RETURN':([26,32,33,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[28,-24,28,-28,-23,28,-25,-26,-30,-27,28,28,-16,-29,-48,-16,-52,-50,28,28,-51,-16,-49,]),'VOID':([0,2,6,9,16,17,23,25,26,32,33,45,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[5,5,5,5,-20,5,5,-5,5,-24,5,-6,-28,-23,5,-25,-26,-30,-27,5,5,-16,-29,-48,-16,-52,-50,5,5,-51,-16,-49,]),'NUMBER':([26,28,31,32,33,37,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,92,93,96,98,99,102,103,105,106,107,109,110,112,115,116,118,119,],[29,29,29,-24,29,29,29,29,29,29,-28,29,29,29,-23,29,29,29,29,29,29,29,29,29,29,-25,-26,29,-30,-27,29,29,-16,-29,-48,-16,29,-52,-50,29,29,-51,-16,-49,]),'WHILE':([26,32,33,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[39,-24,39,-28,-23,39,-25,-26,-30,-27,39,39,-16,-29,-48,-16,-52,-50,39,39,-51,-16,-49,]),'MINUS':([26,28,29,31,32,33,34,37,41,43,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,96,98,99,102,103,105,106,107,109,110,111,112,115,116,118,119,],[31,31,-47,31,-24,31,-45,31,66,-45,66,-46,31,31,66,31,31,-28,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,-25,66,66,-26,-31,66,66,66,66,-44,66,-43,66,66,66,66,-41,-42,66,-32,31,-30,-27,31,31,-16,-29,-48,-16,31,-52,-50,66,31,31,-51,-16,-49,]),'RBRACE':([26,30,32,33,36,47,54,58,68,69,74,90,93,96,98,99,100,101,102,103,105,106,109,110,112,114,115,116,117,118,119,],[-16,45,-24,-16,-21,-22,-28,-23,-16,-25,-26,96,-30,-27,-16,-16,102,103,-16,-29,-48,-16,-52,-50,-16,116,-16,-51,118,-16,-49,]),'GREATEREQUAL':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,56,-45,56,-46,56,56,56,-31,56,56,-34,-38,-44,56,-43,-35,-36,-33,-37,-41,-42,56,-32,56,]),'RPAREN':([17,18,19,21,23,24,27,29,43,46,48,51,70,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,97,111,],[-16,22,-13,-12,-16,-15,-14,-47,-45,-46,-16,75,91,-18,-17,-31,94,95,-34,-38,-44,-39,-43,-35,-36,-33,-37,-41,-42,-40,-32,-16,-19,113,]),'SEMICOLON':([14,22,29,34,40,41,43,44,46,50,73,75,78,79,80,81,82,83,84,85,86,87,88,89,91,],[16,25,-47,-45,54,58,-45,69,-46,74,93,-31,-34,-38,-44,-39,-43,-35,-36,-33,-37,-41,-42,-40,-32,]),'ELIF':([102,118,],[104,104,]),'COMMA':([19,24,29,43,46,71,75,78,79,80,81,82,83,84,85,86,87,88,89,91,],[23,-15,-47,-45,-46,92,-31,-34,-38,-44,-39,-43,-35,-36,-33,-37,-41,-42,-40,-32,]),'PLUS':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,65,-45,65,-46,65,65,65,-31,65,65,65,65,-44,65,-43,65,65,65,65,-41,-42,65,-32,65,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,31,32,33,34,35,37,45,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,92,93,96,98,99,102,103,105,106,107,109,110,112,115,116,118,119,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,34,43,43,-24,34,-11,50,43,-6,43,43,43,43,-28,43,43,43,-23,43,43,43,43,43,43,43,43,43,34,-25,-26,43,-30,-27,34,34,-16,-29,-48,-16,43,-52,-50,34,34,-51,-16,-49,]),'ASSIGN':([34,],[49,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,45,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'STRING':([0,2,6,9,16,17,23,25,26,32,33,45,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[11,11,11,11,-20,11,11,-5,11,-24,11,-6,-28,-23,11,-25,-26,-30,-27,11,11,-16,-29,-48,-16,-52,-50,11,11,-51,-16,-49,]),'LOGICAND':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,59,-45,59,-46,59,59,59,-31,59,59,-34,-38,-44,59,-43,-35,-36,-33,-37,-41,-42,59,-32,59,]),'TIMES':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,60,-45,60,-46,60,60,60,-31,60,60,60,60,-44,60,-43,60,60,60,60,60,60,60,-32,60,]),'GREATERTHAN':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,62,-45,62,-46,62,62,62,-31,62,62,-34,-38,-44,62,-43,-35,-36,-33,-37,-41,-42,62,-32,62,]),'LPAREN':([14,26,28,31,32,33,34,37,38,39,43,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,92,93,96,98,99,102,103,104,105,106,107,109,110,112,115,116,118,119,],[17,37,37,37,-24,37,48,37,52,53,48,37,37,37,37,-28,37,37,37,-23,37,37,37,37,37,37,37,37,37,37,-25,-26,37,-30,-27,37,37,-16,-29,107,-48,-16,37,-52,-50,37,37,-51,-16,-49,]),'LESSEQUAL':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,64,-45,64,-46,64,64,64,-31,64,64,-34,-38,-44,64,-43,-35,-36,-33,-37,-41,-42,64,-32,64,]),'ELSE':([102,105,106,118,119,],[-16,-48,108,-16,-49,]),'IF':([26,32,33,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[38,-24,38,-28,-23,38,-25,-26,-30,-27,38,38,-16,-29,-48,-16,-52,-50,38,38,-51,-16,-49,]),'LBRACE':([22,42,94,95,108,113,],[26,68,98,99,112,115,]),'INT':([0,2,6,9,16,17,23,25,26,32,33,45,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[1,1,1,1,-20,1,1,-5,1,-24,1,-6,-28,-23,1,-25,-26,-30,-27,1,1,-16,-29,-48,-16,-52,-50,1,1,-51,-16,-49,]),'FLOAT':([0,2,6,9,16,17,23,25,26,32,33,45,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[4,4,4,4,-20,4,4,-5,4,-24,4,-6,-28,-23,4,-25,-26,-30,-27,4,4,-16,-29,-48,-16,-52,-50,4,4,-51,-16,-49,]),'LESSTHAN':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,61,-45,61,-46,61,61,61,-31,61,61,-34,-38,-44,61,-43,-35,-36,-33,-37,-41,-42,61,-32,61,]),'BREAK':([26,32,33,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[40,-24,40,-28,-23,40,-25,-26,-30,-27,40,40,-16,-29,-48,-16,-52,-50,40,40,-51,-16,-49,]),'LOGICOR':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,67,-45,67,-46,67,67,67,-31,67,67,-34,-38,-44,67,-43,-35,-36,-33,-37,-41,-42,67,-32,67,]),'ISEQUAL':([29,34,41,43,44,46,51,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,],[-47,-45,63,-45,63,-46,63,63,63,-31,63,63,-34,-38,-44,63,-43,-35,-36,-33,-37,-41,-42,63,-32,63,]),'LOOP':([26,32,33,54,58,68,69,74,93,96,98,99,102,103,105,106,109,110,112,115,116,118,119,],[42,-24,42,-28,-23,42,-25,-26,-30,-27,42,42,-16,-29,-48,-16,-52,-50,42,42,-51,-16,-49,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,31,33,37,48,49,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,92,98,99,107,112,115,],[41,44,46,41,51,71,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,41,71,41,41,111,41,41,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,33,68,98,99,112,115,],[30,47,90,100,101,114,117,]),'optelse':([106,],[109,]),'ifelse':([26,33,68,98,99,112,115,],[32,32,32,32,32,32,32,]),'elifgroup':([102,118,],[106,119,]),'statement':([26,33,68,98,99,112,115,],[33,33,33,33,33,33,33,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([48,92,],[70,97,]),'type':([0,2,6,9,17,23,26,33,68,98,99,112,115,],[8,8,8,8,20,20,35,35,35,35,35,35,35,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,33,48,68,92,98,99,102,106,112,115,118,],[10,10,10,10,21,21,36,36,72,36,72,36,36,105,110,36,36,105,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',122),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',126),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',130),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',134),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',138),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',164),
  ('type -> INT','type',1,'p_type','compiler.py',175),
  ('type -> FLOAT','type',1,'p_type','compiler.py',176),
  ('type -> STRING','type',1,'p_type','compiler.py',177),
  ('type -> VOID','type',1,'p_type','compiler.py',178),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',179),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',184),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',188),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',192),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',196),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',200),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',204),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',208),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',212),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',216),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',220),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',224),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',231),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',235),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',239),
  ('statement -> type IDENTIFIER SEMICOLON','statement',3,'p_statement_localvardecl','compiler.py',243),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',247),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',251),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',255),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',259),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',263),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',267),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',271),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',272),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',273),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',274),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',275),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',276),
  ('expression -> expression LOGICAND expression','expression',3,'p_expression_binaryop','compiler.py',277),
  ('expression -> expression LOGICOR expression','expression',3,'p_expression_binaryop','compiler.py',278),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',279),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',280),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',281),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',282),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',287),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',292),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',296),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',300),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',304),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',308),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',312),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',316),
]
