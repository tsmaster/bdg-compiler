
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xc2\xa2\xbe-\x86\xcfm:-Yj\xcd\xd9\xc2X\x8b'
    
_lr_action_items = {'ELIF':([82,97,],[83,83,]),'RETURN':([26,32,33,48,52,59,60,73,75,76,78,81,82,84,85,88,89,91,94,95,97,98,],[28,-24,28,-27,-23,28,-25,-29,-26,28,28,-28,-16,-42,-16,-46,-44,28,28,-45,-16,-43,]),'VOID':([0,2,6,9,16,17,23,25,42,],[5,5,5,5,-20,5,5,-5,-6,]),'NUMBER':([26,28,32,33,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,72,73,75,76,78,81,82,84,85,86,88,89,91,94,95,97,98,],[29,29,-24,29,29,29,29,29,-27,29,29,-41,-23,-40,-36,-38,-35,-37,-39,29,-25,29,-29,-26,29,29,-28,-16,-42,-16,29,-46,-44,29,29,-45,-16,-43,]),'LESSTHAN':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,54,-33,54,54,54,54,54,54,54,-30,54,]),'MORETHAN':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,57,-33,57,57,57,57,57,57,57,-30,57,]),'MINUS':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,58,-33,58,58,58,58,58,58,58,-30,58,]),'STRING':([0,2,6,9,16,17,23,25,42,],[11,11,11,11,-20,11,11,-5,-6,]),'RPAREN':([17,18,19,21,23,24,27,29,40,45,61,62,63,64,66,67,68,71,72,77,90,],[-16,22,-13,-12,-16,-15,-14,-34,-33,-16,70,71,-18,-17,74,-32,-31,-30,-16,-19,92,]),'SEMICOLON':([14,22,29,34,37,38,40,41,65,67,68,71,],[16,25,-34,-33,48,52,-33,60,73,-32,-31,-30,]),'PLUS':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,55,-33,55,55,55,55,55,55,55,-30,55,]),'COMMA':([19,24,29,40,63,67,68,71,],[23,-15,-34,-33,72,-32,-31,-30,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,32,33,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,72,73,75,76,78,81,82,84,85,86,88,89,91,94,95,97,98,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,34,40,-24,34,-6,40,40,40,40,-27,40,40,-41,-23,-40,-36,-38,-35,-37,-39,34,-25,40,-29,-26,34,34,-28,-16,-42,-16,40,-46,-44,34,34,-45,-16,-43,]),'ASSIGN':([34,],[46,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,42,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'DIVIDE':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,51,-33,51,51,51,51,51,51,51,-30,51,]),'RBRACE':([26,30,32,33,35,44,48,52,59,60,69,73,75,76,78,79,80,81,82,84,85,88,89,91,93,94,95,96,97,98,],[-16,42,-24,-16,-21,-22,-27,-23,-16,-25,75,-29,-26,-16,-16,81,82,-28,-16,-42,-16,-46,-44,-16,95,-16,-45,97,-16,-43,]),'TIMES':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,53,-33,53,53,53,53,53,53,53,-30,53,]),'LPAREN':([14,31,34,36,40,83,],[17,43,45,47,45,86,]),'ELSE':([82,84,85,97,98,],[-16,-42,87,-16,-43,]),'IF':([26,32,33,48,52,59,60,73,75,76,78,81,82,84,85,88,89,91,94,95,97,98,],[36,-24,36,-27,-23,36,-25,-29,-26,36,36,-28,-16,-42,-16,-46,-44,36,36,-45,-16,-43,]),'LBRACE':([22,39,70,74,87,92,],[26,59,76,78,91,94,]),'INT':([0,2,6,9,16,17,23,25,42,],[1,1,1,1,-20,1,1,-5,-6,]),'FLOAT':([0,2,6,9,16,17,23,25,42,],[4,4,4,4,-20,4,4,-5,-6,]),'WHILE':([26,32,33,48,52,59,60,73,75,76,78,81,82,84,85,88,89,91,94,95,97,98,],[31,-24,31,-27,-23,31,-25,-29,-26,31,31,-28,-16,-42,-16,-46,-44,31,31,-45,-16,-43,]),'BREAK':([26,32,33,48,52,59,60,73,75,76,78,81,82,84,85,88,89,91,94,95,97,98,],[37,-24,37,-27,-23,37,-25,-29,-26,37,37,-28,-16,-42,-16,-46,-44,37,37,-45,-16,-43,]),'ISEQUAL':([29,34,38,40,41,61,63,65,66,67,68,71,90,],[-34,-33,56,-33,56,56,56,56,56,56,56,-30,56,]),'LOOP':([26,32,33,48,52,59,60,73,75,76,78,81,82,84,85,88,89,91,94,95,97,98,],[39,-24,39,-27,-23,39,-25,-29,-26,39,39,-28,-16,-42,-16,-46,-44,39,39,-45,-16,-43,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithop':([38,41,61,63,65,66,67,68,90,],[49,49,49,49,49,49,49,49,49,]),'compare':([38,41,61,63,65,66,67,68,90,],[50,50,50,50,50,50,50,50,50,]),'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,33,43,45,46,47,49,50,59,72,76,78,86,91,94,],[38,41,38,61,63,65,66,67,68,38,63,38,38,90,38,38,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,33,59,76,78,91,94,],[30,44,69,79,80,93,96,]),'optelse':([85,],[88,]),'ifelse':([26,33,59,76,78,91,94,],[32,32,32,32,32,32,32,]),'elifgroup':([82,97,],[85,98,]),'statement':([26,33,59,76,78,91,94,],[33,33,33,33,33,33,33,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([45,72,],[62,77,]),'type':([0,2,6,9,17,23,],[8,8,8,8,20,20,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,33,45,59,72,76,78,82,85,91,94,97,],[10,10,10,10,21,21,35,35,64,35,64,35,35,84,89,35,35,84,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',95),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',99),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',103),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',107),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',111),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',136),
  ('type -> INT','type',1,'p_type','compiler.py',147),
  ('type -> FLOAT','type',1,'p_type','compiler.py',148),
  ('type -> STRING','type',1,'p_type','compiler.py',149),
  ('type -> VOID','type',1,'p_type','compiler.py',150),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',151),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',156),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',160),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',164),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',168),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',172),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',176),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',180),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',184),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',188),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',192),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',196),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',203),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',207),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',211),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',215),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',219),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',223),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',227),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',231),
  ('expression -> expression compare expression','expression',3,'p_expression_binaryop','compiler.py',235),
  ('expression -> expression arithop expression','expression',3,'p_expression_binaryop','compiler.py',236),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',241),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',246),
  ('compare -> ISEQUAL','compare',1,'p_compare','compiler.py',250),
  ('compare -> LESSTHAN','compare',1,'p_compare','compiler.py',251),
  ('compare -> MORETHAN','compare',1,'p_compare','compiler.py',252),
  ('arithop -> PLUS','arithop',1,'p_arithop','compiler.py',256),
  ('arithop -> MINUS','arithop',1,'p_arithop','compiler.py',257),
  ('arithop -> TIMES','arithop',1,'p_arithop','compiler.py',258),
  ('arithop -> DIVIDE','arithop',1,'p_arithop','compiler.py',259),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',264),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',268),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',272),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',276),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',280),
]
