
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xe4;,\x12hw"\x14j\xc1\x9f\xbb\xe7\x80\xd5\x01'
    
_lr_action_items = {'NOTEQUAL':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,49,-42,-44,-50,-41,-41,49,49,49,49,49,49,-48,49,49,49,49,49,49,-43,-46,-41,-50,49,-45,-47,49,49,49,]),'DIVIDE':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,61,-42,-44,-50,-41,-41,61,61,61,61,61,61,-48,61,61,61,61,61,61,-43,-46,-41,-50,61,-45,-47,61,61,61,]),'CONST':([0,4,9,10,12,23,65,68,71,72,73,101,102,116,117,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[1,1,1,1,1,-25,-27,-24,-26,-6,100,-31,100,-33,-7,-38,-30,100,-32,-34,-40,-37,100,-35,100,-36,-39,-17,-65,-17,-69,-67,100,100,-68,-17,-66,]),'VOID':([0,1,4,9,10,12,23,24,26,42,47,65,68,71,72,73,96,100,101,102,116,117,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[2,2,2,2,2,2,-25,2,2,2,2,-27,-24,-26,-6,2,-23,2,-31,2,-33,-7,-38,-30,2,-32,-34,-40,-37,2,-35,2,-36,-39,-17,-65,-17,-69,-67,2,2,-68,-17,-66,]),'NUMBER':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,101,102,114,116,118,122,123,124,125,126,128,131,132,137,139,141,142,144,145,147,149,150,152,153,154,156,157,159,162,163,165,166,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-31,34,34,-33,34,34,34,-38,-30,34,-32,34,-34,34,-40,-37,34,-35,34,-36,-39,-17,-65,-17,34,-69,-67,34,34,-68,-17,-66,]),'LBRACKET':([32,34,36,37,38,40,45,62,64,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,93,95,109,111,112,113,129,138,143,158,],[-49,-42,-44,-50,-41,66,66,-64,66,-53,66,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,-43,66,-46,66,66,-51,-45,-47,66,66,66,66,]),'LESSTHAN':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,53,-42,-44,-50,-41,-41,53,53,53,53,53,53,-48,53,53,53,53,53,53,-43,-46,-41,-50,53,-45,-47,53,53,53,]),'RETURN':([73,101,102,116,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[97,-31,97,-33,-38,-30,97,-32,-34,-40,-37,97,-35,97,-36,-39,-17,-65,-17,-69,-67,97,97,-68,-17,-66,]),'MINUS':([25,27,32,33,34,35,36,37,38,39,49,50,51,52,53,54,56,57,58,59,60,61,63,66,67,73,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,97,101,102,103,106,111,112,113,114,115,116,118,122,123,124,125,126,128,131,132,133,134,137,139,141,142,144,145,147,149,150,152,153,154,156,157,159,162,163,165,166,],[35,35,-49,59,-42,35,-44,-50,-41,35,35,35,35,35,35,35,35,35,35,35,35,35,-41,35,35,35,59,59,59,59,59,59,-48,59,59,59,59,59,59,35,-43,-46,35,-31,35,-41,-50,59,-45,-47,35,59,-33,35,35,35,-38,-30,35,-32,35,-34,59,59,35,-40,-37,35,-35,35,-36,-39,-17,-65,-17,35,-69,-67,35,35,-68,-17,-66,]),'DOT':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,55,-42,-44,-50,-41,-41,55,55,55,55,55,55,-48,55,55,55,55,55,55,-43,-46,-41,-50,55,-45,-47,55,55,55,]),'RBRACE':([26,41,42,44,69,73,96,98,101,102,105,116,120,124,125,126,128,132,135,139,141,142,144,145,146,147,148,149,150,152,153,156,157,159,161,162,163,164,165,166,],[-17,68,-17,-22,-21,-17,-23,117,-31,-17,-28,-33,-29,-38,-30,-17,-32,-34,141,-40,-37,-17,-35,-17,149,-36,150,-39,-17,-65,-17,-69,-67,-17,163,-17,-68,165,-17,-66,]),'GREATEREQUAL':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,50,-42,-44,-50,-41,-41,50,50,50,50,50,50,-48,50,50,50,50,50,50,-43,-46,-41,-50,50,-45,-47,50,50,50,]),'RPAREN':([24,28,29,31,32,34,36,37,38,47,48,62,63,64,67,74,75,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,94,95,111,112,113,114,127,129,134,158,],[-17,46,-14,-13,-49,-42,-44,-50,-41,-17,-16,-64,89,90,93,-15,-53,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,-43,113,-46,-18,-19,-51,-45,-47,-17,-20,136,140,160,]),'SEMICOLON':([17,32,34,36,37,38,40,45,46,62,70,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,97,108,109,111,112,113,115,121,133,138,143,],[23,-49,-42,-44,-50,-41,65,71,72,-64,96,-53,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,-43,-46,116,124,125,-51,-45,-47,128,132,139,144,147,]),'ELIF':([150,165,],[151,151,]),'COMMA':([29,32,34,36,37,38,48,62,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,95,111,112,113,],[47,-49,-42,-44,-50,-41,-16,-64,-53,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,-43,-46,114,-51,-45,-47,]),'PLUS':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,58,-42,-44,-50,-41,-41,58,58,58,58,58,58,-48,58,58,58,58,58,58,-43,-46,-41,-50,58,-45,-47,58,58,58,]),'IDENTIFIER':([0,1,2,3,4,5,6,9,10,11,12,13,14,15,23,24,25,26,27,30,35,39,42,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,71,72,73,89,96,97,100,101,102,103,104,114,116,117,118,119,122,123,124,125,126,128,131,132,137,139,141,142,144,145,147,149,150,152,153,154,156,157,159,162,163,165,166,],[5,5,-11,-10,5,-12,17,5,5,-8,5,-9,21,22,-25,5,38,5,38,48,38,63,5,70,5,38,38,38,38,38,38,82,38,38,38,38,38,38,-27,38,38,-24,-26,-6,103,38,-23,38,5,-31,103,-12,121,38,-33,-7,38,130,38,38,-38,-30,103,-32,38,-34,38,-40,-37,103,-35,103,-36,-39,-17,-65,-17,38,-69,-67,103,103,-68,-17,-66,]),'ASSIGN':([17,22,32,34,36,82,90,93,103,106,112,113,121,130,],[25,27,-49,-42,-44,-48,-43,-46,-41,122,-45,-47,131,137,]),'$end':([0,4,7,8,9,10,12,16,18,19,20,23,65,68,71,72,117,],[-17,-17,-5,0,-17,-17,-17,-4,-3,-2,-1,-25,-27,-24,-26,-6,-7,]),'STRING':([0,1,4,9,10,12,23,24,26,42,47,65,68,71,72,73,96,100,101,102,116,117,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[3,3,3,3,3,3,-25,3,3,3,3,-27,-24,-26,-6,3,-23,3,-31,3,-33,-7,-38,-30,3,-32,-34,-40,-37,3,-35,3,-36,-39,-17,-65,-17,-69,-67,3,3,-68,-17,-66,]),'LOGICAND':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,51,-42,-44,-50,-41,-41,51,51,51,51,51,51,-48,51,51,51,51,51,51,-43,-46,-41,-50,51,-45,-47,51,51,51,]),'TIMES':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,52,-42,-44,-50,-41,-41,52,52,52,52,52,52,-48,52,52,52,52,52,52,-43,-46,-41,-50,52,-45,-47,52,52,52,]),'GREATERTHAN':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,54,-42,-44,-50,-41,-41,54,54,54,54,54,54,-48,54,54,54,54,54,54,-43,-46,-41,-50,54,-45,-47,54,54,54,]),'LPAREN':([17,25,27,32,34,35,36,37,38,39,40,45,49,50,51,52,53,54,56,57,58,59,60,61,62,64,66,67,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,95,97,99,101,102,107,109,111,112,113,114,116,118,122,123,124,125,126,128,129,131,132,137,138,139,141,142,143,144,145,147,149,150,151,152,153,154,156,157,158,159,162,163,165,166,],[24,39,39,-49,-42,39,-44,-50,-41,39,67,67,39,39,39,39,39,39,39,39,39,39,39,39,-64,67,39,39,39,-53,67,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,39,-43,67,-46,67,39,118,-31,39,123,67,-51,-45,-47,39,-33,39,39,39,-38,-30,39,-32,67,39,-34,39,67,-40,-37,39,67,-35,39,-36,-39,-17,154,-65,-17,39,-69,-67,67,39,39,-68,-17,-66,]),'LESSEQUAL':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,57,-42,-44,-50,-41,-41,57,57,57,57,57,57,-48,57,57,57,57,57,57,-43,-46,-41,-50,57,-45,-47,57,57,57,]),'ELSE':([150,152,153,165,166,],[-17,-65,155,-17,-66,]),'IF':([73,101,102,116,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[107,-31,107,-33,-38,-30,107,-32,-34,-40,-37,107,-35,107,-36,-39,-17,-65,-17,-69,-67,107,107,-68,-17,-66,]),'LBRACE':([21,46,110,136,140,155,160,],[26,73,126,142,145,159,162,]),'INT':([0,1,4,9,10,12,23,24,26,42,47,65,68,71,72,73,96,100,101,102,116,117,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[11,11,11,11,11,11,-25,11,11,11,11,-27,-24,-26,-6,11,-23,11,-31,11,-33,-7,-38,-30,11,-32,-34,-40,-37,11,-35,11,-36,-39,-17,-65,-17,-69,-67,11,11,-68,-17,-66,]),'FLOAT':([0,1,4,9,10,12,23,24,26,42,47,65,68,71,72,73,96,100,101,102,116,117,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[13,13,13,13,13,13,-25,13,13,13,13,-27,-24,-26,-6,13,-23,13,-31,13,-33,-7,-38,-30,13,-32,-34,-40,-37,13,-35,13,-36,-39,-17,-65,-17,-69,-67,13,13,-68,-17,-66,]),'WHILE':([73,101,102,116,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[99,-31,99,-33,-38,-30,99,-32,-34,-40,-37,99,-35,99,-36,-39,-17,-65,-17,-69,-67,99,99,-68,-17,-66,]),'CLASS':([0,4,9,10,12,23,65,68,71,72,117,],[14,14,14,14,14,-25,-27,-24,-26,-6,-7,]),'BREAK':([73,101,102,116,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[108,-31,108,-33,-38,-30,108,-32,-34,-40,-37,108,-35,108,-36,-39,-17,-65,-17,-69,-67,108,108,-68,-17,-66,]),'LOOP':([73,101,102,116,124,125,126,128,132,139,141,142,144,145,147,149,150,152,153,156,157,159,162,163,165,166,],[110,-31,110,-33,-38,-30,110,-32,-34,-40,-37,110,-35,110,-36,-39,-17,-65,-17,-69,-67,110,110,-68,-17,-66,]),'ISEQUAL':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,56,-42,-44,-50,-41,-41,56,56,56,56,56,56,-48,56,56,56,56,56,56,-43,-46,-41,-50,56,-45,-47,56,56,56,]),'RBRACKET':([32,34,36,37,38,62,75,77,78,79,80,81,82,83,84,85,86,87,88,90,91,93,111,112,113,],[-49,-42,-44,-50,-41,-64,-53,-57,-58,-62,-54,-55,-48,-52,-56,-60,-61,-59,-63,-43,112,-46,-51,-45,-47,]),'LOGICOR':([32,33,34,36,37,38,63,75,77,78,79,80,81,82,83,84,85,86,87,88,90,93,103,106,111,112,113,115,133,134,],[-49,60,-42,-44,-50,-41,-41,60,60,60,60,60,60,-48,60,60,60,60,60,60,-43,-46,-41,-50,60,-45,-47,60,60,60,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'postfixexpression':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,102,114,118,122,123,126,131,137,142,145,154,159,162,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'optelse':([153,],[156,]),'castexpression':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,102,114,118,122,123,126,131,137,142,145,154,159,162,],[33,33,33,33,75,77,78,79,80,81,83,84,85,86,87,88,33,33,33,111,115,33,33,33,133,134,33,33,33,33,33,33,33,33,]),'statementlist':([73,102,126,142,145,159,162,],[98,120,135,146,148,161,164,]),'arglist':([67,114,],[92,127,]),'primaryexpression':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,102,114,118,122,123,126,131,137,142,145,154,159,162,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'argdecllist':([24,47,],[28,74,]),'unaryexpression':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,102,114,118,122,123,126,131,137,142,145,154,159,162,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,106,37,37,106,37,37,37,37,106,37,37,106,106,37,106,106,]),'classdecl':([0,4,9,10,12,],[4,4,4,4,4,]),'ifelse':([73,102,126,142,145,159,162,],[101,101,101,101,101,101,101,]),'statement':([73,102,126,142,145,159,162,],[102,102,102,102,102,102,102,]),'type':([0,1,4,9,10,12,24,26,42,47,73,100,102,126,142,145,159,162,],[6,15,6,6,6,6,30,43,43,30,104,119,104,104,104,104,104,104,]),'globalvardecl':([0,4,9,10,12,],[9,9,9,9,9,]),'empty':([0,4,9,10,12,24,26,42,47,67,73,102,114,126,142,145,150,153,159,162,165,],[7,7,7,7,7,31,44,44,31,94,105,105,94,105,105,105,152,157,105,105,152,]),'argdecl':([24,47,],[29,29,]),'toplevelgroup':([0,4,9,10,12,],[8,16,18,19,20,]),'memberlist':([26,42,],[41,69,]),'funcdef':([0,4,9,10,12,],[10,10,10,10,10,]),'elifgroup':([150,165,],[153,166,]),'funcdecl':([0,4,9,10,12,],[12,12,12,12,12,]),'memberdecl':([26,42,],[42,42,]),'expression':([25,27,35,39,49,50,51,52,53,54,56,57,58,59,60,61,66,67,73,89,97,102,114,118,122,123,126,131,137,142,145,154,159,162,],[40,45,62,64,76,76,76,76,76,76,76,76,76,76,76,76,91,95,109,76,76,109,95,129,76,76,109,138,143,109,109,158,109,109,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',136),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',140),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',144),
  ('toplevelgroup -> classdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_classdecl','compiler.py',148),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',152),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',156),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',173),
  ('type -> INT','type',1,'p_type','compiler.py',184),
  ('type -> FLOAT','type',1,'p_type','compiler.py',185),
  ('type -> STRING','type',1,'p_type','compiler.py',186),
  ('type -> VOID','type',1,'p_type','compiler.py',187),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',188),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',193),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',197),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',201),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',205),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',209),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',213),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',217),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',221),
  ('memberlist -> memberdecl memberlist','memberlist',2,'p_memberlist_decl','compiler.py',225),
  ('memberlist -> empty','memberlist',1,'p_memberlist_empty','compiler.py',229),
  ('memberdecl -> type IDENTIFIER SEMICOLON','memberdecl',3,'p_memberdecl','compiler.py',233),
  ('classdecl -> CLASS IDENTIFIER LBRACE memberlist RBRACE','classdecl',5,'p_classdecl','compiler.py',237),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl_var','compiler.py',241),
  ('globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',6,'p_globalvardecl_constinitialized','compiler.py',245),
  ('globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',5,'p_globalvardecl_varinitialized','compiler.py',249),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',253),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',257),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',264),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',268),
  ('statement -> RETURN castexpression SEMICOLON','statement',3,'p_statement_return','compiler.py',272),
  ('statement -> RETURN SEMICOLON','statement',2,'p_statement_emptyreturn','compiler.py',276),
  ('statement -> type IDENTIFIER SEMICOLON','statement',3,'p_statement_localvardecl','compiler.py',280),
  ('statement -> type IDENTIFIER ASSIGN expression SEMICOLON','statement',5,'p_statement_localvardecl_initialized','compiler.py',284),
  ('statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','statement',6,'p_statement_localvardecl_constinitialized','compiler.py',288),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',292),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',296),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',300),
  ('statement -> unaryexpression ASSIGN castexpression SEMICOLON','statement',4,'p_statement_assign','compiler.py',304),
  ('primaryexpression -> IDENTIFIER','primaryexpression',1,'p_primaryexpression_variable','compiler.py',308),
  ('primaryexpression -> NUMBER','primaryexpression',1,'p_primaryexpression_number','compiler.py',312),
  ('primaryexpression -> LPAREN expression RPAREN','primaryexpression',3,'p_primaryexpression_parens','compiler.py',316),
  ('postfixexpression -> primaryexpression','postfixexpression',1,'p_postfixexpression_primaryexpression','compiler.py',320),
  ('postfixexpression -> expression LBRACKET expression RBRACKET','postfixexpression',4,'p_postfixexpression_arrayref','compiler.py',324),
  ('postfixexpression -> expression LPAREN RPAREN','postfixexpression',3,'p_postfixexpression_emptyfunctioncall','compiler.py',328),
  ('postfixexpression -> expression LPAREN arglist RPAREN','postfixexpression',4,'p_postfixexpression_functioncall','compiler.py',332),
  ('postfixexpression -> castexpression DOT IDENTIFIER','postfixexpression',3,'p_postfixexpression_memberref','compiler.py',336),
  ('unaryexpression -> postfixexpression','unaryexpression',1,'p_unaryexpression_postfix','compiler.py',340),
  ('castexpression -> unaryexpression','castexpression',1,'p_castexpression_unary','compiler.py',344),
  ('castexpression -> LPAREN IDENTIFIER RPAREN castexpression','castexpression',4,'p_castexpression_cast','compiler.py',348),
  ('expression -> castexpression ISEQUAL castexpression','expression',3,'p_expression_binaryop','compiler.py',352),
  ('expression -> castexpression NOTEQUAL castexpression','expression',3,'p_expression_binaryop','compiler.py',353),
  ('expression -> castexpression LESSTHAN castexpression','expression',3,'p_expression_binaryop','compiler.py',354),
  ('expression -> castexpression GREATERTHAN castexpression','expression',3,'p_expression_binaryop','compiler.py',355),
  ('expression -> castexpression LESSEQUAL castexpression','expression',3,'p_expression_binaryop','compiler.py',356),
  ('expression -> castexpression GREATEREQUAL castexpression','expression',3,'p_expression_binaryop','compiler.py',357),
  ('expression -> castexpression LOGICAND castexpression','expression',3,'p_expression_binaryop','compiler.py',358),
  ('expression -> castexpression LOGICOR castexpression','expression',3,'p_expression_binaryop','compiler.py',359),
  ('expression -> castexpression PLUS castexpression','expression',3,'p_expression_binaryop','compiler.py',360),
  ('expression -> castexpression MINUS castexpression','expression',3,'p_expression_binaryop','compiler.py',361),
  ('expression -> castexpression TIMES castexpression','expression',3,'p_expression_binaryop','compiler.py',362),
  ('expression -> castexpression DIVIDE castexpression','expression',3,'p_expression_binaryop','compiler.py',363),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',368),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',372),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',376),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',380),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',384),
  ('ifelse -> IF LPAREN castexpression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',388),
]
