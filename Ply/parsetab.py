
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '"2\x7f\x06\xcd\xf3%\xb4\x90-[\xcf\x7f-\x93R'
    
_lr_action_items = {'NOTEQUAL':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,53,-42,53,-43,53,53,53,-30,53,53,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,53,]),'DIVIDE':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,55,-42,55,-43,55,55,55,-30,55,55,55,55,-41,-40,55,55,55,55,55,55,-31,55,]),'RETURN':([26,32,33,52,56,64,65,86,89,91,92,95,96,98,99,102,103,105,108,109,111,112,],[28,-24,28,-27,-23,28,-25,-29,-26,28,28,-16,-28,-45,-16,-49,-47,28,28,-48,-16,-46,]),'VOID':([0,2,6,9,16,17,23,25,44,],[5,5,5,5,-20,5,5,-5,-6,]),'NUMBER':([26,28,31,32,33,36,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,85,86,89,91,92,95,96,98,99,100,102,103,105,108,109,111,112,],[29,29,29,-24,29,29,29,29,29,29,-27,29,29,29,-23,29,29,29,29,29,29,29,29,-25,29,-29,-26,29,29,-16,-28,-45,-16,29,-49,-47,29,29,-48,-16,-46,]),'WHILE':([26,32,33,52,56,64,65,86,89,91,92,95,96,98,99,102,103,105,108,109,111,112,],[38,-24,38,-27,-23,38,-25,-29,-26,38,38,-16,-28,-45,-16,-49,-47,38,38,-48,-16,-46,]),'MINUS':([26,28,29,31,32,33,34,36,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,89,91,92,95,96,98,99,100,102,103,104,105,108,109,111,112,],[31,31,-44,31,-24,31,-42,31,63,-42,63,-43,31,31,63,31,31,-27,31,31,31,-23,31,31,31,31,31,31,31,31,-25,63,63,-30,63,63,63,63,-41,-40,63,63,63,63,-38,-39,-31,31,-29,-26,31,31,-16,-28,-45,-16,31,-49,-47,63,31,31,-48,-16,-46,]),'RBRACE':([26,30,32,33,35,46,52,56,64,65,83,86,89,91,92,93,94,95,96,98,99,102,103,105,107,108,109,110,111,112,],[-16,44,-24,-16,-21,-22,-27,-23,-16,-25,89,-29,-26,-16,-16,95,96,-16,-28,-45,-16,-49,-47,-16,109,-16,-48,111,-16,-46,]),'GREATEREQUAL':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,54,-42,54,-43,54,54,54,-30,54,54,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,54,]),'RPAREN':([17,18,19,21,23,24,27,29,42,45,47,49,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,90,104,],[-16,22,-13,-12,-16,-15,-14,-44,-42,-43,-16,70,84,-18,-17,-30,87,88,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,-16,-19,106,]),'SEMICOLON':([14,22,29,34,39,40,42,43,45,69,70,73,74,75,76,77,78,79,80,81,82,84,],[16,25,-44,-42,52,56,-42,65,-43,86,-30,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,]),'ELIF':([95,111,],[97,97,]),'COMMA':([19,24,29,42,45,67,70,73,74,75,76,77,78,79,80,81,82,84,],[23,-15,-44,-42,-43,85,-30,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,]),'PLUS':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,62,-42,62,-43,62,62,62,-30,62,62,62,62,-41,-40,62,62,62,62,-38,-39,-31,62,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,31,32,33,36,44,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,85,86,89,91,92,95,96,98,99,100,102,103,105,108,109,111,112,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,34,42,42,-24,34,42,-6,42,42,42,42,-27,42,42,42,-23,42,42,42,42,42,42,42,34,-25,42,-29,-26,34,34,-16,-28,-45,-16,42,-49,-47,34,34,-48,-16,-46,]),'ASSIGN':([34,],[48,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,44,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'STRING':([0,2,6,9,16,17,23,25,44,],[11,11,11,11,-20,11,11,-5,-6,]),'TIMES':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,57,-42,57,-43,57,57,57,-30,57,57,57,57,-41,-40,57,57,57,57,57,57,-31,57,]),'GREATERTHAN':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,59,-42,59,-43,59,59,59,-30,59,59,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,59,]),'LPAREN':([14,26,28,31,32,33,34,36,37,38,42,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,85,86,89,91,92,95,96,97,98,99,100,102,103,105,108,109,111,112,],[17,36,36,36,-24,36,47,36,50,51,47,36,36,36,36,-27,36,36,36,-23,36,36,36,36,36,36,36,36,-25,36,-29,-26,36,36,-16,-28,100,-45,-16,36,-49,-47,36,36,-48,-16,-46,]),'LESSEQUAL':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,61,-42,61,-43,61,61,61,-30,61,61,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,61,]),'ELSE':([95,98,99,111,112,],[-16,-45,101,-16,-46,]),'IF':([26,32,33,52,56,64,65,86,89,91,92,95,96,98,99,102,103,105,108,109,111,112,],[37,-24,37,-27,-23,37,-25,-29,-26,37,37,-16,-28,-45,-16,-49,-47,37,37,-48,-16,-46,]),'LBRACE':([22,41,87,88,101,106,],[26,64,91,92,105,108,]),'INT':([0,2,6,9,16,17,23,25,44,],[1,1,1,1,-20,1,1,-5,-6,]),'FLOAT':([0,2,6,9,16,17,23,25,44,],[4,4,4,4,-20,4,4,-5,-6,]),'LESSTHAN':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,58,-42,58,-43,58,58,58,-30,58,58,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,58,]),'BREAK':([26,32,33,52,56,64,65,86,89,91,92,95,96,98,99,102,103,105,108,109,111,112,],[39,-24,39,-27,-23,39,-25,-29,-26,39,39,-16,-28,-45,-16,-49,-47,39,39,-48,-16,-46,]),'ISEQUAL':([29,34,40,42,43,45,49,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,104,],[-44,-42,60,-42,60,-43,60,60,60,-30,60,60,-33,-37,-41,-40,-34,-35,-32,-36,-38,-39,-31,60,]),'LOOP':([26,32,33,52,56,64,65,86,89,91,92,95,96,98,99,102,103,105,108,109,111,112,],[41,-24,41,-27,-23,41,-25,-29,-26,41,41,-16,-28,-45,-16,-49,-47,41,41,-48,-16,-46,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,31,33,36,47,48,50,51,53,54,55,57,58,59,60,61,62,63,64,85,91,92,100,105,108,],[40,43,45,40,49,67,69,71,72,73,74,75,76,77,78,79,80,81,82,40,67,40,40,104,40,40,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,33,64,91,92,105,108,],[30,46,83,93,94,107,110,]),'optelse':([99,],[102,]),'ifelse':([26,33,64,91,92,105,108,],[32,32,32,32,32,32,32,]),'elifgroup':([95,111,],[99,112,]),'statement':([26,33,64,91,92,105,108,],[33,33,33,33,33,33,33,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([47,85,],[66,90,]),'type':([0,2,6,9,17,23,],[8,8,8,8,20,20,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,33,47,64,85,91,92,95,99,105,108,111,],[10,10,10,10,21,21,35,35,68,35,68,35,35,98,103,35,35,98,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',113),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',117),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',121),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',125),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',129),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',154),
  ('type -> INT','type',1,'p_type','compiler.py',165),
  ('type -> FLOAT','type',1,'p_type','compiler.py',166),
  ('type -> STRING','type',1,'p_type','compiler.py',167),
  ('type -> VOID','type',1,'p_type','compiler.py',168),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',169),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',174),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',178),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',182),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',186),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',190),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',194),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',198),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',202),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',206),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',210),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',214),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',221),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',225),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',229),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',233),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',237),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',241),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',245),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',249),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',253),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',257),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',258),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',259),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',260),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',261),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',262),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',263),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',264),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',265),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',266),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',271),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',276),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',280),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',284),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',288),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',292),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',296),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',300),
]
