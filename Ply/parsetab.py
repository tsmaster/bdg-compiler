
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'ovi\xe8go\xdd\x08\x91\xf1\x84\xc9\xa6\x0b\x94\x05'
    
_lr_action_items = {'ELIF':([84,99,],[85,85,]),'RETURN':([26,33,34,50,54,61,62,75,77,78,80,83,84,86,87,90,91,93,96,97,99,100,],[28,-24,28,-27,-23,28,-25,-29,-26,28,28,-28,-16,-43,-16,-47,-45,28,28,-46,-16,-44,]),'VOID':([0,2,6,9,16,17,23,25,43,],[5,5,5,5,-20,5,5,-5,-6,]),'NUMBER':([26,28,32,33,34,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,77,78,80,83,84,86,87,88,90,91,93,96,97,99,100,],[29,29,29,-24,29,29,29,29,29,-27,29,29,-42,-23,-41,-37,-39,-36,-38,-40,29,-25,29,-29,-26,29,29,-28,-16,-43,-16,29,-47,-45,29,29,-46,-16,-44,]),'LESSTHAN':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,56,-33,56,56,56,56,56,56,56,56,-30,56,]),'MORETHAN':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,59,-33,59,59,59,59,59,59,59,59,-30,59,]),'MINUS':([26,28,29,32,33,34,35,39,41,42,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,73,74,75,77,78,80,83,84,86,87,88,90,91,92,93,96,97,99,100,],[32,32,-35,32,-24,32,-33,60,-33,60,32,60,32,32,32,-27,32,32,-42,-23,-41,-37,-39,-36,-38,-40,32,-25,60,60,60,60,60,60,-30,32,-29,-26,32,32,-28,-16,-43,-16,32,-47,-45,60,32,32,-46,-16,-44,]),'STRING':([0,2,6,9,16,17,23,25,43,],[11,11,11,11,-20,11,11,-5,-6,]),'RPAREN':([17,18,19,21,23,24,27,29,41,45,47,63,64,65,66,68,69,70,73,74,79,92,],[-16,22,-13,-12,-16,-15,-14,-35,-33,-34,-16,72,73,-18,-17,76,-32,-31,-30,-16,-19,94,]),'SEMICOLON':([14,22,29,35,38,39,41,42,45,67,69,70,73,],[16,25,-35,-33,50,54,-33,62,-34,75,-32,-31,-30,]),'COMMA':([19,24,29,41,45,65,69,70,73,],[23,-15,-35,-33,-34,74,-32,-31,-30,]),'PLUS':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,57,-33,57,57,57,57,57,57,57,57,-30,57,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,32,33,34,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,77,78,80,83,84,86,87,88,90,91,93,96,97,99,100,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,35,41,41,-24,35,-6,41,41,41,41,-27,41,41,-42,-23,-41,-37,-39,-36,-38,-40,35,-25,41,-29,-26,35,35,-28,-16,-43,-16,41,-47,-45,35,35,-46,-16,-44,]),'ASSIGN':([35,],[48,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,43,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'DIVIDE':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,53,-33,53,53,53,53,53,53,53,53,-30,53,]),'RBRACE':([26,30,33,34,36,46,50,54,61,62,71,75,77,78,80,81,82,83,84,86,87,90,91,93,95,96,97,98,99,100,],[-16,43,-24,-16,-21,-22,-27,-23,-16,-25,77,-29,-26,-16,-16,83,84,-28,-16,-43,-16,-47,-45,-16,97,-16,-46,99,-16,-44,]),'TIMES':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,55,-33,55,55,55,55,55,55,55,55,-30,55,]),'LPAREN':([14,31,35,37,41,85,],[17,44,47,49,47,88,]),'ELSE':([84,86,87,99,100,],[-16,-43,89,-16,-44,]),'IF':([26,33,34,50,54,61,62,75,77,78,80,83,84,86,87,90,91,93,96,97,99,100,],[37,-24,37,-27,-23,37,-25,-29,-26,37,37,-28,-16,-43,-16,-47,-45,37,37,-46,-16,-44,]),'LBRACE':([22,40,72,76,89,94,],[26,61,78,80,93,96,]),'INT':([0,2,6,9,16,17,23,25,43,],[1,1,1,1,-20,1,1,-5,-6,]),'FLOAT':([0,2,6,9,16,17,23,25,43,],[4,4,4,4,-20,4,4,-5,-6,]),'WHILE':([26,33,34,50,54,61,62,75,77,78,80,83,84,86,87,90,91,93,96,97,99,100,],[31,-24,31,-27,-23,31,-25,-29,-26,31,31,-28,-16,-43,-16,-47,-45,31,31,-46,-16,-44,]),'BREAK':([26,33,34,50,54,61,62,75,77,78,80,83,84,86,87,90,91,93,96,97,99,100,],[38,-24,38,-27,-23,38,-25,-29,-26,38,38,-28,-16,-43,-16,-47,-45,38,38,-46,-16,-44,]),'ISEQUAL':([29,35,39,41,42,45,63,65,67,68,69,70,73,92,],[-35,-33,58,-33,58,58,58,58,58,58,58,58,-30,58,]),'LOOP':([26,33,34,50,54,61,62,75,77,78,80,83,84,86,87,90,91,93,96,97,99,100,],[40,-24,40,-27,-23,40,-25,-29,-26,40,40,-28,-16,-43,-16,-47,-45,40,40,-46,-16,-44,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithop':([39,42,45,63,65,67,68,69,70,92,],[51,51,51,51,51,51,51,51,51,51,]),'compare':([39,42,45,63,65,67,68,69,70,92,],[52,52,52,52,52,52,52,52,52,52,]),'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,32,34,44,47,48,49,51,52,61,74,78,80,88,93,96,],[39,42,45,39,63,65,67,68,69,70,39,65,39,39,92,39,39,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,34,61,78,80,93,96,],[30,46,71,81,82,95,98,]),'optelse':([87,],[90,]),'ifelse':([26,34,61,78,80,93,96,],[33,33,33,33,33,33,33,]),'elifgroup':([84,99,],[87,100,]),'statement':([26,34,61,78,80,93,96,],[34,34,34,34,34,34,34,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([47,74,],[64,79,]),'type':([0,2,6,9,17,23,],[8,8,8,8,20,20,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,34,47,61,74,78,80,84,87,93,96,99,],[10,10,10,10,21,21,36,36,66,36,66,36,36,86,91,36,36,86,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',95),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',99),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',103),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',107),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',111),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',136),
  ('type -> INT','type',1,'p_type','compiler.py',147),
  ('type -> FLOAT','type',1,'p_type','compiler.py',148),
  ('type -> STRING','type',1,'p_type','compiler.py',149),
  ('type -> VOID','type',1,'p_type','compiler.py',150),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',151),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',156),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',160),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',164),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',168),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',172),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',176),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',180),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',184),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',188),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',192),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',196),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',203),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',207),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',211),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',215),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',219),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',223),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',227),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',231),
  ('expression -> expression compare expression','expression',3,'p_expression_binaryop','compiler.py',235),
  ('expression -> expression arithop expression','expression',3,'p_expression_binaryop','compiler.py',236),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',241),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',246),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',250),
  ('compare -> ISEQUAL','compare',1,'p_compare','compiler.py',254),
  ('compare -> LESSTHAN','compare',1,'p_compare','compiler.py',255),
  ('compare -> MORETHAN','compare',1,'p_compare','compiler.py',256),
  ('arithop -> PLUS','arithop',1,'p_arithop','compiler.py',260),
  ('arithop -> MINUS','arithop',1,'p_arithop','compiler.py',261),
  ('arithop -> TIMES','arithop',1,'p_arithop','compiler.py',262),
  ('arithop -> DIVIDE','arithop',1,'p_arithop','compiler.py',263),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',268),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',272),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',276),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',280),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',284),
]
