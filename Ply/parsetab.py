
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'q\xcc!C\x93\xe5\xa1l\x1dp\xb2\xc9D\x85\x0e%'
    
_lr_action_items = {'NOTEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,39,39,-51,39,-36,39,-39,-43,-49,39,-47,-48,-40,-41,-38,-42,-46,39,-50,39,-37,39,39,39,39,39,39,39,]),'ELIF':([122,137,],[123,123,]),'CONST':([0,3,6,10,19,42,52,53,54,76,77,87,89,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[7,7,7,7,-20,-22,-21,-5,75,-26,75,-28,-6,-33,-25,75,-27,-29,-35,-32,75,-30,75,-31,-34,-16,-53,-16,-57,-55,75,75,-56,-16,-54,]),'VOID':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,87,89,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[5,5,5,5,5,-20,5,5,-22,-21,-5,5,5,-26,5,-28,-6,-33,-25,5,-27,-29,-35,-32,5,-30,5,-31,-34,-16,-53,-16,-57,-55,5,5,-56,-16,-54,]),'NUMBER':([21,22,28,29,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,76,77,86,87,90,93,95,96,97,98,100,104,105,109,110,113,114,116,117,119,121,122,124,125,126,128,129,131,134,135,137,138,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-26,27,27,-28,27,27,27,-33,-25,27,-27,27,-29,27,-35,-32,27,-30,27,-31,-34,-16,-53,-16,27,-57,-55,27,27,-56,-16,-54,]),'LESSTHAN':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,46,46,-51,46,-36,46,-39,-43,-49,46,-47,-48,-40,-41,-38,-42,-46,46,-50,46,-37,46,46,46,46,46,46,46,]),'RETURN':([54,76,77,87,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[72,-26,72,-28,-33,-25,72,-27,-29,-35,-32,72,-30,72,-31,-34,-16,-53,-16,-57,-55,72,72,-56,-16,-54,]),'MINUS':([21,22,27,28,29,30,31,32,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,54,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,76,77,78,83,85,86,87,88,90,93,95,96,97,98,100,101,103,104,105,106,109,110,111,113,114,115,116,117,119,121,122,124,125,126,128,129,130,131,134,135,137,138,],[28,28,-52,28,28,-50,44,44,-51,44,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-36,44,44,44,-49,44,-47,-48,44,44,44,44,-46,44,28,-26,28,-50,44,-37,28,-28,44,28,28,28,-33,-25,28,-27,44,44,28,-29,44,28,-35,44,-32,28,44,-30,28,-31,-34,-16,-53,-16,28,-57,-55,44,28,28,-56,-16,-54,]),'DIVIDE':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,41,41,-51,41,-36,41,41,41,-49,41,41,-48,41,41,41,41,41,41,-50,41,-37,41,41,41,41,41,41,41,]),'GREATEREQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,40,40,-51,40,-36,40,-39,-43,-49,40,-47,-48,-40,-41,-38,-42,-46,40,-50,40,-37,40,40,40,40,40,40,40,]),'RPAREN':([20,23,24,26,27,30,34,35,36,37,38,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,85,86,99,101,106,130,],[-16,33,-13,-12,-52,-50,-16,-15,-51,56,-16,-14,-36,85,-18,-17,-39,-43,-49,-44,-47,-48,-40,-41,-38,-42,-46,-45,-37,-16,-19,108,112,132,]),'SEMICOLON':([16,27,30,31,32,33,36,56,60,61,62,63,64,65,66,67,68,69,70,71,72,78,82,83,85,88,94,103,111,115,],[19,-52,-50,42,52,53,-51,-36,-39,-43,-49,-44,-47,-48,-40,-41,-38,-42,-46,-45,87,-50,96,97,-37,100,105,110,116,119,]),'COMMA':([24,27,30,35,36,56,58,60,61,62,63,64,65,66,67,68,69,70,71,85,],[34,-52,-50,-15,-51,-36,86,-39,-43,-49,-44,-47,-48,-40,-41,-38,-42,-46,-45,-37,]),'PLUS':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,50,50,-51,50,-36,50,50,50,-49,50,-47,-48,50,50,50,50,-46,50,-50,50,-37,50,50,50,50,50,50,50,]),'IDENTIFIER':([0,1,2,3,5,6,7,8,9,10,12,15,19,20,21,22,25,28,29,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,72,75,76,77,78,79,86,87,89,90,91,93,95,96,97,98,100,104,105,109,110,113,114,116,117,119,121,122,124,125,126,128,129,131,134,135,137,138,],[8,-8,-7,8,-10,8,8,-11,16,8,-9,18,-20,8,30,30,35,30,30,8,30,30,30,30,-22,30,30,30,30,30,30,30,30,30,-21,-5,78,30,8,-26,78,-11,94,30,-28,-6,30,102,30,30,-33,-25,78,-27,30,-29,30,-35,-32,78,-30,78,-31,-34,-16,-53,-16,30,-57,-55,78,78,-56,-16,-54,]),'ASSIGN':([16,18,78,94,102,],[21,22,93,104,109,]),'$end':([0,3,4,6,10,11,13,14,17,19,42,52,53,89,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-22,-21,-5,-6,]),'STRING':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,87,89,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[12,12,12,12,12,-20,12,12,-22,-21,-5,12,12,-26,12,-28,-6,-33,-25,12,-27,-29,-35,-32,12,-30,12,-31,-34,-16,-53,-16,-57,-55,12,12,-56,-16,-54,]),'LOGICAND':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,43,43,-51,43,-36,43,-39,-43,-49,43,-47,-48,-40,-41,-38,-42,-46,43,-50,43,-37,43,43,43,43,43,43,43,]),'RBRACE':([54,73,76,77,80,87,92,96,97,98,100,105,107,110,113,114,116,117,118,119,120,121,122,124,125,128,129,131,133,134,135,136,137,138,],[-16,89,-26,-16,-23,-28,-24,-33,-25,-16,-27,-29,113,-35,-32,-16,-30,-16,121,-31,122,-34,-16,-53,-16,-57,-55,-16,135,-16,-56,137,-16,-54,]),'TIMES':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,45,45,-51,45,-36,45,45,45,-49,45,45,-48,45,45,45,45,45,45,-50,45,-37,45,45,45,45,45,45,45,]),'GREATERTHAN':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,47,47,-51,47,-36,47,-39,-43,-49,47,-47,-48,-40,-41,-38,-42,-46,47,-50,47,-37,47,47,47,47,47,47,47,]),'LPAREN':([16,21,22,28,29,30,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,74,76,77,78,81,86,87,90,93,95,96,97,98,100,104,105,109,110,113,114,116,117,119,121,122,123,124,125,126,128,129,131,134,135,137,138,],[20,29,29,29,29,38,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,90,-26,29,38,95,29,-28,29,29,29,-33,-25,29,-27,29,-29,29,-35,-32,29,-30,29,-31,-34,-16,126,-53,-16,29,-57,-55,29,29,-56,-16,-54,]),'LESSEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,49,49,-51,49,-36,49,-39,-43,-49,49,-47,-48,-40,-41,-38,-42,-46,49,-50,49,-37,49,49,49,49,49,49,49,]),'ELSE':([122,124,125,137,138,],[-16,-53,127,-16,-54,]),'IF':([54,76,77,87,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[81,-26,81,-28,-33,-25,81,-27,-29,-35,-32,81,-30,81,-31,-34,-16,-53,-16,-57,-55,81,81,-56,-16,-54,]),'LBRACE':([33,84,108,112,127,132,],[54,98,114,117,131,134,]),'INT':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,87,89,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[2,2,2,2,2,-20,2,2,-22,-21,-5,2,2,-26,2,-28,-6,-33,-25,2,-27,-29,-35,-32,2,-30,2,-31,-34,-16,-53,-16,-57,-55,2,2,-56,-16,-54,]),'FLOAT':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,87,89,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[1,1,1,1,1,-20,1,1,-22,-21,-5,1,1,-26,1,-28,-6,-33,-25,1,-27,-29,-35,-32,1,-30,1,-31,-34,-16,-53,-16,-57,-55,1,1,-56,-16,-54,]),'WHILE':([54,76,77,87,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[74,-26,74,-28,-33,-25,74,-27,-29,-35,-32,74,-30,74,-31,-34,-16,-53,-16,-57,-55,74,74,-56,-16,-54,]),'BREAK':([54,76,77,87,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[82,-26,82,-28,-33,-25,82,-27,-29,-35,-32,82,-30,82,-31,-34,-16,-53,-16,-57,-55,82,82,-56,-16,-54,]),'LOOP':([54,76,77,87,96,97,98,100,105,110,113,114,116,117,119,121,122,124,125,128,129,131,134,135,137,138,],[84,-26,84,-28,-33,-25,84,-27,-29,-35,-32,84,-30,84,-31,-34,-16,-53,-16,-57,-55,84,84,-56,-16,-54,]),'ISEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,48,48,-51,48,-36,48,-39,-43,-49,48,-47,-48,-40,-41,-38,-42,-46,48,-50,48,-37,48,48,48,48,48,48,48,]),'LOGICOR':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,88,101,103,106,111,115,130,],[-52,-50,51,51,-51,51,-36,51,-39,-43,-49,51,-47,-48,-40,-41,-38,-42,-46,51,-50,51,-37,51,51,51,51,51,51,51,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([20,34,],[23,55,]),'argdecl':([20,34,],[24,24,]),'expression':([21,22,28,29,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,77,86,90,93,95,98,104,109,114,117,126,131,134,],[31,32,36,37,58,60,61,62,63,64,65,66,67,68,69,70,71,83,88,83,58,101,103,106,83,111,115,83,83,130,83,83,]),'funcdecl':([0,3,6,10,],[3,3,3,3,]),'toplevelgroup':([0,3,6,10,],[4,13,14,17,]),'statementlist':([54,77,98,114,117,131,134,],[73,92,107,118,120,133,136,]),'optelse':([125,],[128,]),'ifelse':([54,77,98,114,117,131,134,],[76,76,76,76,76,76,76,]),'elifgroup':([122,137,],[125,138,]),'statement':([54,77,98,114,117,131,134,],[77,77,77,77,77,77,77,]),'funcdef':([0,3,6,10,],[6,6,6,6,]),'arglist':([38,86,],[57,99,]),'type':([0,3,6,7,10,20,34,54,75,77,98,114,117,131,134,],[9,9,9,15,9,25,25,79,91,79,79,79,79,79,79,]),'globalvardecl':([0,3,6,10,],[10,10,10,10,]),'empty':([0,3,6,10,20,34,38,54,77,86,98,114,117,122,125,131,134,137,],[11,11,11,11,26,26,59,80,80,59,80,80,80,124,129,80,80,124,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',126),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',130),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',134),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',138),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',142),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',159),
  ('type -> INT','type',1,'p_type','compiler.py',170),
  ('type -> FLOAT','type',1,'p_type','compiler.py',171),
  ('type -> STRING','type',1,'p_type','compiler.py',172),
  ('type -> VOID','type',1,'p_type','compiler.py',173),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',174),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',179),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',183),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',187),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',191),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',195),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',199),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',203),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',207),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl_var','compiler.py',211),
  ('globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',6,'p_globalvardecl_constinitialized','compiler.py',215),
  ('globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',5,'p_globalvardecl_varinitialized','compiler.py',219),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',223),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',227),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',234),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',238),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',242),
  ('statement -> RETURN SEMICOLON','statement',2,'p_statement_emptyreturn','compiler.py',246),
  ('statement -> type IDENTIFIER SEMICOLON','statement',3,'p_statement_localvardecl','compiler.py',250),
  ('statement -> type IDENTIFIER ASSIGN expression SEMICOLON','statement',5,'p_statement_localvardecl_initialized','compiler.py',254),
  ('statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','statement',6,'p_statement_localvardecl_constinitialized','compiler.py',258),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',262),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',266),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',270),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',274),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',278),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',282),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',286),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',287),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',288),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',289),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',290),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',291),
  ('expression -> expression LOGICAND expression','expression',3,'p_expression_binaryop','compiler.py',292),
  ('expression -> expression LOGICOR expression','expression',3,'p_expression_binaryop','compiler.py',293),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',294),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',295),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',296),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',297),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',302),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',307),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',311),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',315),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',319),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',323),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',327),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',331),
]
