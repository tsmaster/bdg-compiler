
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'n\xb54\xfc^\x7f\x13O\x1e\xf4\xb2R\x9e\xec\x87\xf2'
    
_lr_action_items = {'NOTEQUAL':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,53,-44,53,-45,53,53,53,-30,53,53,-33,-37,-43,53,-42,-34,-35,-32,-36,-40,-41,53,-31,53,]),'DIVIDE':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,55,-44,55,-45,55,55,55,-30,55,55,55,55,-43,55,-42,55,55,55,55,55,55,55,-31,55,]),'RETURN':([26,32,33,52,56,66,67,90,93,95,96,99,100,102,103,106,107,109,112,113,115,116,],[28,-24,28,-27,-23,28,-25,-29,-26,28,28,-16,-28,-47,-16,-51,-49,28,28,-50,-16,-48,]),'VOID':([0,2,6,9,16,17,23,25,44,],[5,5,5,5,-20,5,5,-5,-6,]),'NUMBER':([26,28,31,32,33,36,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,89,90,93,95,96,99,100,102,103,104,106,107,109,112,113,115,116,],[29,29,29,-24,29,29,29,29,29,29,-27,29,29,29,-23,29,29,29,29,29,29,29,29,29,29,-25,29,-29,-26,29,29,-16,-28,-47,-16,29,-51,-49,29,29,-50,-16,-48,]),'WHILE':([26,32,33,52,56,66,67,90,93,95,96,99,100,102,103,106,107,109,112,113,115,116,],[38,-24,38,-27,-23,38,-25,-29,-26,38,38,-16,-28,-47,-16,-51,-49,38,38,-50,-16,-48,]),'MINUS':([26,28,29,31,32,33,34,36,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,93,95,96,99,100,102,103,104,106,107,108,109,112,113,115,116,],[31,31,-46,31,-24,31,-44,31,64,-44,64,-45,31,31,64,31,31,-27,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,-25,64,64,-30,64,64,64,64,-43,64,-42,64,64,64,64,-40,-41,64,-31,31,-29,-26,31,31,-16,-28,-47,-16,31,-51,-49,64,31,31,-50,-16,-48,]),'RBRACE':([26,30,32,33,35,46,52,56,66,67,87,90,93,95,96,97,98,99,100,102,103,106,107,109,111,112,113,114,115,116,],[-16,44,-24,-16,-21,-22,-27,-23,-16,-25,93,-29,-26,-16,-16,99,100,-16,-28,-47,-16,-51,-49,-16,113,-16,-50,115,-16,-48,]),'GREATEREQUAL':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,54,-44,54,-45,54,54,54,-30,54,54,-33,-37,-43,54,-42,-34,-35,-32,-36,-40,-41,54,-31,54,]),'RPAREN':([17,18,19,21,23,24,27,29,42,45,47,49,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,94,108,],[-16,22,-13,-12,-16,-15,-14,-46,-44,-45,-16,72,88,-18,-17,-30,91,92,-33,-37,-43,-38,-42,-34,-35,-32,-36,-40,-41,-39,-31,-16,-19,110,]),'SEMICOLON':([14,22,29,34,39,40,42,43,45,71,72,75,76,77,78,79,80,81,82,83,84,85,86,88,],[16,25,-46,-44,52,56,-44,67,-45,90,-30,-33,-37,-43,-38,-42,-34,-35,-32,-36,-40,-41,-39,-31,]),'ELIF':([99,115,],[101,101,]),'COMMA':([19,24,29,42,45,69,72,75,76,77,78,79,80,81,82,83,84,85,86,88,],[23,-15,-46,-44,-45,89,-30,-33,-37,-43,-38,-42,-34,-35,-32,-36,-40,-41,-39,-31,]),'PLUS':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,63,-44,63,-45,63,63,63,-30,63,63,63,63,-43,63,-42,63,63,63,63,-40,-41,63,-31,63,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,31,32,33,36,44,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,89,90,93,95,96,99,100,102,103,104,106,107,109,112,113,115,116,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,34,42,42,-24,34,42,-6,42,42,42,42,-27,42,42,42,-23,42,42,42,42,42,42,42,42,42,34,-25,42,-29,-26,34,34,-16,-28,-47,-16,42,-51,-49,34,34,-50,-16,-48,]),'ASSIGN':([34,],[48,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,44,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'STRING':([0,2,6,9,16,17,23,25,44,],[11,11,11,11,-20,11,11,-5,-6,]),'LOGICAND':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,57,-44,57,-45,57,57,57,-30,57,57,-33,-37,-43,57,-42,-34,-35,-32,-36,-40,-41,57,-31,57,]),'TIMES':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,58,-44,58,-45,58,58,58,-30,58,58,58,58,-43,58,-42,58,58,58,58,58,58,58,-31,58,]),'GREATERTHAN':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,60,-44,60,-45,60,60,60,-30,60,60,-33,-37,-43,60,-42,-34,-35,-32,-36,-40,-41,60,-31,60,]),'LPAREN':([14,26,28,31,32,33,34,36,37,38,42,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,89,90,93,95,96,99,100,101,102,103,104,106,107,109,112,113,115,116,],[17,36,36,36,-24,36,47,36,50,51,47,36,36,36,36,-27,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,-25,36,-29,-26,36,36,-16,-28,104,-47,-16,36,-51,-49,36,36,-50,-16,-48,]),'LESSEQUAL':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,62,-44,62,-45,62,62,62,-30,62,62,-33,-37,-43,62,-42,-34,-35,-32,-36,-40,-41,62,-31,62,]),'ELSE':([99,102,103,115,116,],[-16,-47,105,-16,-48,]),'IF':([26,32,33,52,56,66,67,90,93,95,96,99,100,102,103,106,107,109,112,113,115,116,],[37,-24,37,-27,-23,37,-25,-29,-26,37,37,-16,-28,-47,-16,-51,-49,37,37,-50,-16,-48,]),'LBRACE':([22,41,91,92,105,110,],[26,66,95,96,109,112,]),'INT':([0,2,6,9,16,17,23,25,44,],[1,1,1,1,-20,1,1,-5,-6,]),'FLOAT':([0,2,6,9,16,17,23,25,44,],[4,4,4,4,-20,4,4,-5,-6,]),'LESSTHAN':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,59,-44,59,-45,59,59,59,-30,59,59,-33,-37,-43,59,-42,-34,-35,-32,-36,-40,-41,59,-31,59,]),'BREAK':([26,32,33,52,56,66,67,90,93,95,96,99,100,102,103,106,107,109,112,113,115,116,],[39,-24,39,-27,-23,39,-25,-29,-26,39,39,-16,-28,-47,-16,-51,-49,39,39,-50,-16,-48,]),'LOGICOR':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,65,-44,65,-45,65,65,65,-30,65,65,-33,-37,-43,65,-42,-34,-35,-32,-36,-40,-41,65,-31,65,]),'ISEQUAL':([29,34,40,42,43,45,49,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,],[-46,-44,61,-44,61,-45,61,61,61,-30,61,61,-33,-37,-43,61,-42,-34,-35,-32,-36,-40,-41,61,-31,61,]),'LOOP':([26,32,33,52,56,66,67,90,93,95,96,99,100,102,103,106,107,109,112,113,115,116,],[41,-24,41,-27,-23,41,-25,-29,-26,41,41,-16,-28,-47,-16,-51,-49,41,41,-50,-16,-48,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,31,33,36,47,48,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,89,95,96,104,109,112,],[40,43,45,40,49,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,40,69,40,40,108,40,40,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,33,66,95,96,109,112,],[30,46,87,97,98,111,114,]),'optelse':([103,],[106,]),'ifelse':([26,33,66,95,96,109,112,],[32,32,32,32,32,32,32,]),'elifgroup':([99,115,],[103,116,]),'statement':([26,33,66,95,96,109,112,],[33,33,33,33,33,33,33,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([47,89,],[68,94,]),'type':([0,2,6,9,17,23,],[8,8,8,8,20,20,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,33,47,66,89,95,96,99,103,109,112,115,],[10,10,10,10,21,21,35,35,70,35,70,35,35,102,107,35,35,102,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',117),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',121),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',125),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',129),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',133),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',158),
  ('type -> INT','type',1,'p_type','compiler.py',169),
  ('type -> FLOAT','type',1,'p_type','compiler.py',170),
  ('type -> STRING','type',1,'p_type','compiler.py',171),
  ('type -> VOID','type',1,'p_type','compiler.py',172),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',173),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',178),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',182),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',186),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',190),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',194),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',198),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',202),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',206),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',210),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',214),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',218),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',225),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',229),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',233),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',237),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',241),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',245),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',249),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',253),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',257),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',261),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',262),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',263),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',264),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',265),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',266),
  ('expression -> expression LOGICAND expression','expression',3,'p_expression_binaryop','compiler.py',267),
  ('expression -> expression LOGICOR expression','expression',3,'p_expression_binaryop','compiler.py',268),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',269),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',270),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',271),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',272),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',277),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',282),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',286),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',290),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',294),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',298),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',302),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',306),
]
