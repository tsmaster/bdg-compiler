
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '>H\x91\xf6#\x83A\xf0\xdc\xd1u\x93\xc5\x9a\x88\x1f'
    
_lr_action_items = {'NOTEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,39,39,-50,39,-35,39,-38,-42,-48,39,-46,-47,-39,-40,-37,-41,-45,39,-49,39,-36,39,39,39,39,39,39,39,]),'ELIF':([121,136,],[122,122,]),'CONST':([0,3,6,10,19,42,52,53,54,76,77,88,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[7,7,7,7,-20,-22,-21,-5,75,-26,75,-6,-32,-25,75,-27,-28,-34,-31,75,-29,75,-30,-33,-16,-52,-16,-56,-54,75,75,-55,-16,-53,]),'VOID':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,88,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[5,5,5,5,5,-20,5,5,-22,-21,-5,5,5,-26,5,-6,-32,-25,5,-27,-28,-34,-31,5,-29,5,-30,-33,-16,-52,-16,-56,-54,5,5,-55,-16,-53,]),'NUMBER':([21,22,28,29,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,76,77,86,89,92,94,95,96,97,99,103,104,108,109,112,113,115,116,118,120,121,123,124,125,127,128,130,133,134,136,137,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-26,27,27,27,27,27,-32,-25,27,-27,27,-28,27,-34,-31,27,-29,27,-30,-33,-16,-52,-16,27,-56,-54,27,27,-55,-16,-53,]),'LESSTHAN':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,46,46,-50,46,-35,46,-38,-42,-48,46,-46,-47,-39,-40,-37,-41,-45,46,-49,46,-36,46,46,46,46,46,46,46,]),'RETURN':([54,76,77,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[72,-26,72,-32,-25,72,-27,-28,-34,-31,72,-29,72,-30,-33,-16,-52,-16,-56,-54,72,72,-55,-16,-53,]),'MINUS':([21,22,27,28,29,30,31,32,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,54,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,76,77,78,83,85,86,87,89,92,94,95,96,97,99,100,102,103,104,105,108,109,110,112,113,114,115,116,118,120,121,123,124,125,127,128,129,130,133,134,136,137,],[28,28,-51,28,28,-49,44,44,-50,44,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-35,44,44,44,-48,44,-46,-47,44,44,44,44,-45,44,28,-26,28,-49,44,-36,28,44,28,28,28,-32,-25,28,-27,44,44,28,-28,44,28,-34,44,-31,28,44,-29,28,-30,-33,-16,-52,-16,28,-56,-54,44,28,28,-55,-16,-53,]),'DIVIDE':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,41,41,-50,41,-35,41,41,41,-48,41,41,-47,41,41,41,41,41,41,-49,41,-36,41,41,41,41,41,41,41,]),'GREATEREQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,40,40,-50,40,-35,40,-38,-42,-48,40,-46,-47,-39,-40,-37,-41,-45,40,-49,40,-36,40,40,40,40,40,40,40,]),'RPAREN':([20,23,24,26,27,30,34,35,36,37,38,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,85,86,98,100,105,129,],[-16,33,-13,-12,-51,-49,-16,-15,-50,56,-16,-14,-35,85,-18,-17,-38,-42,-48,-43,-46,-47,-39,-40,-37,-41,-45,-44,-36,-16,-19,107,111,131,]),'SEMICOLON':([16,27,30,31,32,33,36,56,60,61,62,63,64,65,66,67,68,69,70,71,78,82,83,85,87,93,102,110,114,],[19,-51,-49,42,52,53,-50,-35,-38,-42,-48,-43,-46,-47,-39,-40,-37,-41,-45,-44,-49,95,96,-36,99,104,109,115,118,]),'COMMA':([24,27,30,35,36,56,58,60,61,62,63,64,65,66,67,68,69,70,71,85,],[34,-51,-49,-15,-50,-35,86,-38,-42,-48,-43,-46,-47,-39,-40,-37,-41,-45,-44,-36,]),'PLUS':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,50,50,-50,50,-35,50,50,50,-48,50,-46,-47,50,50,50,50,-45,50,-49,50,-36,50,50,50,50,50,50,50,]),'IDENTIFIER':([0,1,2,3,5,6,7,8,9,10,12,15,19,20,21,22,25,28,29,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,72,75,76,77,78,79,86,88,89,90,92,94,95,96,97,99,103,104,108,109,112,113,115,116,118,120,121,123,124,125,127,128,130,133,134,136,137,],[8,-8,-7,8,-10,8,8,-11,16,8,-9,18,-20,8,30,30,35,30,30,8,30,30,30,30,-22,30,30,30,30,30,30,30,30,30,-21,-5,78,30,8,-26,78,-11,93,30,-6,30,101,30,30,-32,-25,78,-27,30,-28,30,-34,-31,78,-29,78,-30,-33,-16,-52,-16,30,-56,-54,78,78,-55,-16,-53,]),'ASSIGN':([16,18,78,93,101,],[21,22,92,103,108,]),'$end':([0,3,4,6,10,11,13,14,17,19,42,52,53,88,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-22,-21,-5,-6,]),'STRING':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,88,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[12,12,12,12,12,-20,12,12,-22,-21,-5,12,12,-26,12,-6,-32,-25,12,-27,-28,-34,-31,12,-29,12,-30,-33,-16,-52,-16,-56,-54,12,12,-55,-16,-53,]),'LOGICAND':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,43,43,-50,43,-35,43,-38,-42,-48,43,-46,-47,-39,-40,-37,-41,-45,43,-49,43,-36,43,43,43,43,43,43,43,]),'RBRACE':([54,73,76,77,80,91,95,96,97,99,104,106,109,112,113,115,116,117,118,119,120,121,123,124,127,128,130,132,133,134,135,136,137,],[-16,88,-26,-16,-23,-24,-32,-25,-16,-27,-28,112,-34,-31,-16,-29,-16,120,-30,121,-33,-16,-52,-16,-56,-54,-16,134,-16,-55,136,-16,-53,]),'TIMES':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,45,45,-50,45,-35,45,45,45,-48,45,45,-47,45,45,45,45,45,45,-49,45,-36,45,45,45,45,45,45,45,]),'GREATERTHAN':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,47,47,-50,47,-35,47,-38,-42,-48,47,-46,-47,-39,-40,-37,-41,-45,47,-49,47,-36,47,47,47,47,47,47,47,]),'LPAREN':([16,21,22,28,29,30,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,74,76,77,78,81,86,89,92,94,95,96,97,99,103,104,108,109,112,113,115,116,118,120,121,122,123,124,125,127,128,130,133,134,136,137,],[20,29,29,29,29,38,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,89,-26,29,38,94,29,29,29,29,-32,-25,29,-27,29,-28,29,-34,-31,29,-29,29,-30,-33,-16,125,-52,-16,29,-56,-54,29,29,-55,-16,-53,]),'LESSEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,49,49,-50,49,-35,49,-38,-42,-48,49,-46,-47,-39,-40,-37,-41,-45,49,-49,49,-36,49,49,49,49,49,49,49,]),'ELSE':([121,123,124,136,137,],[-16,-52,126,-16,-53,]),'IF':([54,76,77,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[81,-26,81,-32,-25,81,-27,-28,-34,-31,81,-29,81,-30,-33,-16,-52,-16,-56,-54,81,81,-55,-16,-53,]),'LBRACE':([33,84,107,111,126,131,],[54,97,113,116,130,133,]),'INT':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,88,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[2,2,2,2,2,-20,2,2,-22,-21,-5,2,2,-26,2,-6,-32,-25,2,-27,-28,-34,-31,2,-29,2,-30,-33,-16,-52,-16,-56,-54,2,2,-55,-16,-53,]),'FLOAT':([0,3,6,7,10,19,20,34,42,52,53,54,75,76,77,88,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[1,1,1,1,1,-20,1,1,-22,-21,-5,1,1,-26,1,-6,-32,-25,1,-27,-28,-34,-31,1,-29,1,-30,-33,-16,-52,-16,-56,-54,1,1,-55,-16,-53,]),'WHILE':([54,76,77,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[74,-26,74,-32,-25,74,-27,-28,-34,-31,74,-29,74,-30,-33,-16,-52,-16,-56,-54,74,74,-55,-16,-53,]),'BREAK':([54,76,77,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[82,-26,82,-32,-25,82,-27,-28,-34,-31,82,-29,82,-30,-33,-16,-52,-16,-56,-54,82,82,-55,-16,-53,]),'LOOP':([54,76,77,95,96,97,99,104,109,112,113,115,116,118,120,121,123,124,127,128,130,133,134,136,137,],[84,-26,84,-32,-25,84,-27,-28,-34,-31,84,-29,84,-30,-33,-16,-52,-16,-56,-54,84,84,-55,-16,-53,]),'ISEQUAL':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,48,48,-50,48,-35,48,-38,-42,-48,48,-46,-47,-39,-40,-37,-41,-45,48,-49,48,-36,48,48,48,48,48,48,48,]),'LOGICOR':([27,30,31,32,36,37,56,58,60,61,62,63,64,65,66,67,68,69,70,71,78,83,85,87,100,102,105,110,114,129,],[-51,-49,51,51,-50,51,-35,51,-38,-42,-48,51,-46,-47,-39,-40,-37,-41,-45,51,-49,51,-36,51,51,51,51,51,51,51,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([20,34,],[23,55,]),'argdecl':([20,34,],[24,24,]),'expression':([21,22,28,29,38,39,40,41,43,44,45,46,47,48,49,50,51,54,72,77,86,89,92,94,97,103,108,113,116,125,130,133,],[31,32,36,37,58,60,61,62,63,64,65,66,67,68,69,70,71,83,87,83,58,100,102,105,83,110,114,83,83,129,83,83,]),'funcdecl':([0,3,6,10,],[3,3,3,3,]),'toplevelgroup':([0,3,6,10,],[4,13,14,17,]),'statementlist':([54,77,97,113,116,130,133,],[73,91,106,117,119,132,135,]),'optelse':([124,],[127,]),'ifelse':([54,77,97,113,116,130,133,],[76,76,76,76,76,76,76,]),'elifgroup':([121,136,],[124,137,]),'statement':([54,77,97,113,116,130,133,],[77,77,77,77,77,77,77,]),'funcdef':([0,3,6,10,],[6,6,6,6,]),'arglist':([38,86,],[57,98,]),'type':([0,3,6,7,10,20,34,54,75,77,97,113,116,130,133,],[9,9,9,15,9,25,25,79,90,79,79,79,79,79,79,]),'globalvardecl':([0,3,6,10,],[10,10,10,10,]),'empty':([0,3,6,10,20,34,38,54,77,86,97,113,116,121,124,130,133,136,],[11,11,11,11,26,26,59,80,80,59,80,80,80,123,128,80,80,123,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',126),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',130),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',134),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',138),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',142),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',159),
  ('type -> INT','type',1,'p_type','compiler.py',170),
  ('type -> FLOAT','type',1,'p_type','compiler.py',171),
  ('type -> STRING','type',1,'p_type','compiler.py',172),
  ('type -> VOID','type',1,'p_type','compiler.py',173),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',174),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',179),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',183),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',187),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',191),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',195),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',199),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',203),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',207),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl_var','compiler.py',211),
  ('globalvardecl -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',6,'p_globalvardecl_constinitialized','compiler.py',215),
  ('globalvardecl -> type IDENTIFIER ASSIGN expression SEMICOLON','globalvardecl',5,'p_globalvardecl_varinitialized','compiler.py',219),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',223),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',227),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',234),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',238),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',242),
  ('statement -> type IDENTIFIER SEMICOLON','statement',3,'p_statement_localvardecl','compiler.py',246),
  ('statement -> type IDENTIFIER ASSIGN expression SEMICOLON','statement',5,'p_statement_localvardecl_initialized','compiler.py',250),
  ('statement -> CONST type IDENTIFIER ASSIGN expression SEMICOLON','statement',6,'p_statement_localvardecl_constinitialized','compiler.py',254),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',258),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',262),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',266),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',270),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',274),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',278),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',282),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',283),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',284),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',285),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',286),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',287),
  ('expression -> expression LOGICAND expression','expression',3,'p_expression_binaryop','compiler.py',288),
  ('expression -> expression LOGICOR expression','expression',3,'p_expression_binaryop','compiler.py',289),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',290),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',291),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',292),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',293),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',298),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',303),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',307),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',311),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',315),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',319),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',323),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',327),
]
