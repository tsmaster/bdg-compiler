
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xdd\x82\xd8\xda\xb4P\rR\x92\xdb6ZX\xdcA\x11'
    
_lr_action_items = {'ELIF':([93,109,],[95,95,]),'RETURN':([26,32,33,52,55,63,64,84,87,89,90,93,94,96,97,100,101,103,106,107,109,110,],[28,-24,28,-27,-23,28,-25,-29,-26,28,28,-16,-28,-53,-16,-57,-55,28,28,-56,-16,-54,]),'VOID':([0,2,6,9,16,17,23,25,44,],[5,5,5,5,-20,5,5,-5,-6,]),'NUMBER':([26,28,31,32,33,36,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,83,84,87,89,90,93,94,96,97,98,100,101,103,106,107,109,110,],[29,29,29,-24,29,29,29,29,29,29,-27,29,29,-23,29,29,29,29,29,29,29,29,-25,29,-29,-26,29,29,-16,-28,-53,-16,29,-57,-55,29,29,-56,-16,-54,]),'WHILE':([26,32,33,52,55,63,64,84,87,89,90,93,94,96,97,100,101,103,106,107,109,110,],[38,-24,38,-27,-23,38,-25,-29,-26,38,38,-16,-28,-53,-16,-57,-55,38,38,-56,-16,-54,]),'MINUS':([26,28,29,31,32,33,34,36,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,87,89,90,93,94,96,97,98,100,101,102,103,106,107,109,110,],[31,31,-43,31,-24,31,-41,31,62,-41,62,-42,31,31,62,31,31,-27,31,31,-23,31,31,31,31,31,31,31,31,-25,62,62,-30,62,62,62,-40,-39,62,62,62,62,-37,-38,-31,31,-29,-26,31,31,-16,-28,-53,-16,31,-57,-55,62,31,31,-56,-16,-54,]),'STRING':([0,2,6,9,16,17,23,25,44,],[11,11,11,11,-20,11,11,-5,-6,]),'GREATEREQUAL':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,53,-41,53,-42,53,53,53,-30,53,53,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,53,]),'RPAREN':([17,18,19,21,23,24,27,29,42,45,47,49,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,82,83,88,102,],[-16,22,-13,-12,-16,-15,-14,-43,-41,-42,-16,69,82,-18,-17,-30,85,86,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,-16,-19,104,]),'SEMICOLON':([14,22,29,34,39,40,42,43,45,68,69,72,73,74,75,76,77,78,79,80,82,],[16,25,-43,-41,52,55,-41,64,-42,84,-30,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,]),'COMMA':([19,24,29,42,45,66,69,72,73,74,75,76,77,78,79,80,82,],[23,-15,-43,-41,-42,83,-30,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,]),'PLUS':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,61,-41,61,-42,61,61,61,-30,61,61,61,-40,-39,61,61,61,61,-37,-38,-31,61,]),'IDENTIFIER':([0,1,2,4,5,6,7,8,9,11,16,17,20,23,25,26,28,31,32,33,36,44,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,83,84,87,89,90,93,94,96,97,98,100,101,103,106,107,109,110,],[7,-7,7,-8,-10,7,-11,14,7,-9,-20,7,24,7,-5,34,42,42,-24,34,42,-6,42,42,42,42,-27,42,42,-23,42,42,42,42,42,42,42,34,-25,42,-29,-26,34,34,-16,-28,-53,-16,42,-57,-55,34,34,-56,-16,-54,]),'ASSIGN':([34,],[48,]),'$end':([0,2,3,6,9,10,12,13,15,16,25,44,],[-16,-16,0,-16,-16,-4,-1,-2,-3,-20,-5,-6,]),'DIVIDE':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,54,-41,54,-42,54,54,54,-30,54,54,54,-40,-39,54,54,54,54,54,54,-31,54,]),'RBRACE':([26,30,32,33,35,46,52,55,63,64,81,84,87,89,90,91,92,93,94,96,97,100,101,103,105,106,107,108,109,110,],[-16,44,-24,-16,-21,-22,-27,-23,-16,-25,87,-29,-26,-16,-16,93,94,-16,-28,-53,-16,-57,-55,-16,107,-16,-56,109,-16,-54,]),'TIMES':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,56,-41,56,-42,56,56,56,-30,56,56,56,-40,-39,56,56,56,56,56,56,-31,56,]),'GREATERTHAN':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,58,-41,58,-42,58,58,58,-30,58,58,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,58,]),'LPAREN':([14,26,28,31,32,33,34,36,37,38,42,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,83,84,87,89,90,93,94,95,96,97,98,100,101,103,106,107,109,110,],[17,36,36,36,-24,36,47,36,50,51,47,36,36,36,36,-27,36,36,-23,36,36,36,36,36,36,36,36,-25,36,-29,-26,36,36,-16,-28,98,-53,-16,36,-57,-55,36,36,-56,-16,-54,]),'LESSEQUAL':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,60,-41,60,-42,60,60,60,-30,60,60,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,60,]),'ELSE':([93,96,97,109,110,],[-16,-53,99,-16,-54,]),'IF':([26,32,33,52,55,63,64,84,87,89,90,93,94,96,97,100,101,103,106,107,109,110,],[37,-24,37,-27,-23,37,-25,-29,-26,37,37,-16,-28,-53,-16,-57,-55,37,37,-56,-16,-54,]),'LBRACE':([22,41,85,86,99,104,],[26,63,89,90,103,106,]),'INT':([0,2,6,9,16,17,23,25,44,],[1,1,1,1,-20,1,1,-5,-6,]),'FLOAT':([0,2,6,9,16,17,23,25,44,],[4,4,4,4,-20,4,4,-5,-6,]),'LESSTHAN':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,57,-41,57,-42,57,57,57,-30,57,57,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,57,]),'BREAK':([26,32,33,52,55,63,64,84,87,89,90,93,94,96,97,100,101,103,106,107,109,110,],[39,-24,39,-27,-23,39,-25,-29,-26,39,39,-16,-28,-53,-16,-57,-55,39,39,-56,-16,-54,]),'ISEQUAL':([29,34,40,42,43,45,49,66,68,69,70,71,72,73,74,75,76,77,78,79,80,82,102,],[-43,-41,59,-41,59,-42,59,59,59,-30,59,59,-36,-40,-39,-33,-34,-32,-35,-37,-38,-31,59,]),'LOOP':([26,32,33,52,55,63,64,84,87,89,90,93,94,96,97,100,101,103,106,107,109,110,],[41,-24,41,-27,-23,41,-25,-29,-26,41,41,-16,-28,-53,-16,-57,-55,41,41,-56,-16,-54,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argdecllist':([17,23,],[18,27,]),'argdecl':([17,23,],[19,19,]),'expression':([26,28,31,33,36,47,48,50,51,53,54,56,57,58,59,60,61,62,63,83,89,90,98,103,106,],[40,43,45,40,49,66,68,70,71,72,73,74,75,76,77,78,79,80,40,66,40,40,102,40,40,]),'funcdecl':([0,2,6,9,],[2,2,2,2,]),'toplevelgroup':([0,2,6,9,],[3,12,13,15,]),'statementlist':([26,33,63,89,90,103,106,],[30,46,81,91,92,105,108,]),'optelse':([97,],[100,]),'ifelse':([26,33,63,89,90,103,106,],[32,32,32,32,32,32,32,]),'elifgroup':([93,109,],[97,110,]),'statement':([26,33,63,89,90,103,106,],[33,33,33,33,33,33,33,]),'funcdef':([0,2,6,9,],[6,6,6,6,]),'arglist':([47,83,],[65,88,]),'type':([0,2,6,9,17,23,],[8,8,8,8,20,20,]),'globalvardecl':([0,2,6,9,],[9,9,9,9,]),'empty':([0,2,6,9,17,23,26,33,47,63,83,89,90,93,97,103,106,109,],[10,10,10,10,21,21,35,35,67,35,67,35,35,96,101,35,35,96,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevelgroup","S'",1,None,None,None),
  ('toplevelgroup -> funcdecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdecl','compiler.py',111),
  ('toplevelgroup -> funcdef toplevelgroup','toplevelgroup',2,'p_toplevelgroup_funcdef','compiler.py',115),
  ('toplevelgroup -> globalvardecl toplevelgroup','toplevelgroup',2,'p_toplevelgroup_vardecl','compiler.py',119),
  ('toplevelgroup -> empty','toplevelgroup',1,'p_toplevelgroup_empty','compiler.py',123),
  ('funcdecl -> type IDENTIFIER LPAREN argdecllist RPAREN SEMICOLON','funcdecl',6,'p_funcdecl','compiler.py',127),
  ('funcdef -> type IDENTIFIER LPAREN argdecllist RPAREN LBRACE statementlist RBRACE','funcdef',8,'p_funcdef','compiler.py',152),
  ('type -> INT','type',1,'p_type','compiler.py',163),
  ('type -> FLOAT','type',1,'p_type','compiler.py',164),
  ('type -> STRING','type',1,'p_type','compiler.py',165),
  ('type -> VOID','type',1,'p_type','compiler.py',166),
  ('type -> IDENTIFIER','type',1,'p_type','compiler.py',167),
  ('argdecllist -> empty','argdecllist',1,'p_argdecllist_empty','compiler.py',172),
  ('argdecllist -> argdecl','argdecllist',1,'p_argdecllist_one','compiler.py',176),
  ('argdecllist -> argdecl COMMA argdecllist','argdecllist',3,'p_argdecllist_many','compiler.py',180),
  ('argdecl -> type IDENTIFIER','argdecl',2,'p_argdecl','compiler.py',184),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',188),
  ('arglist -> empty','arglist',1,'p_arglist_empty','compiler.py',192),
  ('arglist -> expression','arglist',1,'p_arglist_single','compiler.py',196),
  ('arglist -> expression COMMA arglist','arglist',3,'p_arglist_many','compiler.py',200),
  ('globalvardecl -> type IDENTIFIER SEMICOLON','globalvardecl',3,'p_globalvardecl','compiler.py',204),
  ('statementlist -> empty','statementlist',1,'p_statementlist_empty','compiler.py',208),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_bootstrap','compiler.py',212),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','compiler.py',219),
  ('statement -> ifelse','statement',1,'p_statement_ifelse','compiler.py',223),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','compiler.py',227),
  ('statement -> LOOP LBRACE statementlist RBRACE','statement',4,'p_statement_loop','compiler.py',231),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','compiler.py',235),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statementlist RBRACE','statement',7,'p_statement_while_loop','compiler.py',239),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','compiler.py',243),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','compiler.py',247),
  ('expression -> IDENTIFIER LPAREN arglist RPAREN','expression',4,'p_expression_functioncall','compiler.py',251),
  ('expression -> expression ISEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',261),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binaryop','compiler.py',262),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binaryop','compiler.py',263),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binaryop','compiler.py',264),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binaryop','compiler.py',265),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryop','compiler.py',266),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryop','compiler.py',267),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binaryop','compiler.py',268),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binaryop','compiler.py',269),
  ('expression -> IDENTIFIER','expression',1,'p_expression_variable','compiler.py',274),
  ('expression -> MINUS expression','expression',2,'p_expression_negop','compiler.py',279),
  ('expression -> NUMBER','expression',1,'p_expression_number','compiler.py',283),
  ('compare -> ISEQUAL','compare',1,'p_compare','compiler.py',287),
  ('compare -> LESSTHAN','compare',1,'p_compare','compiler.py',288),
  ('compare -> GREATERTHAN','compare',1,'p_compare','compiler.py',289),
  ('compare -> LESSEQUAL','compare',1,'p_compare','compiler.py',290),
  ('compare -> GREATEREQUAL','compare',1,'p_compare','compiler.py',291),
  ('arithop -> PLUS','arithop',1,'p_arithop','compiler.py',295),
  ('arithop -> MINUS','arithop',1,'p_arithop','compiler.py',296),
  ('arithop -> TIMES','arithop',1,'p_arithop','compiler.py',297),
  ('arithop -> DIVIDE','arithop',1,'p_arithop','compiler.py',298),
  ('elifgroup -> empty','elifgroup',1,'p_elifgroup_empty','compiler.py',303),
  ('elifgroup -> ELIF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup','elifgroup',8,'p_elifgroup_many','compiler.py',307),
  ('optelse -> empty','optelse',1,'p_optelse_empty','compiler.py',311),
  ('optelse -> ELSE LBRACE statementlist RBRACE','optelse',4,'p_optelse_single','compiler.py',315),
  ('ifelse -> IF LPAREN expression RPAREN LBRACE statementlist RBRACE elifgroup optelse','ifelse',9,'p_ifelse_if','compiler.py',319),
]
